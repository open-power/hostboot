#!/bin/bash
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/tools/ebmc/setup-standalone-repo $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2021,2023
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

function usage ()
{
    echo "Usage: source ${BASH_SOURCE[0]} PACKAGE_NAME [-h|--help] [-x|--xml-only OR -n|--no-xml] [-s|--system-type e|2u|4u] [-b|--branch-name]"
    echo "Description: This script will take the given PACKAGE_NAME and checkout a new branch in this hostboot repo to the"
    echo "             commit hash that is in the PNOR build."
    echo "NOTE:        This script must run in the current environment with source (or .) preceeding the script call. Otherwise,"
    echo "             the CONFIG_FILE environment variable cannot be updated in the user's working shell if it's incorrect."
    echo "             This script also requires rchland tokens to access the paths where the data is at."
    echo "Options:"
    echo "       PACKAGE_NAME is a package name to match this hostboot repo to. ex. 1020.2204.20220126z"
    echo "       -h|--help        Used to display this usage text"
    echo "       -x|--xml-only    Copy system xmls into repo and won't perform any setup actions on the repo. Cannot use with -n"
    echo "       -n|--no-xml      Checkout supplied PACKAGE_NAME and perform setup actions but don't copy system xmls to repo. Cannot use with -x"
    echo "       -s|--system-type Copies the system xml of the targeted system and replaces simics_P10.system.xml with it."
    echo "                            e = Everest, 2u = Rainer 2U, 4u = Rainier 4U, b = Bonnell"
    echo "       -b|--branch-name The branch name for the new branch created by this script. Default is PACKAGE_NAME"
    echo ""
    echo "Examples:"
    echo "       source ${BASH_SOURCE[0]} 1020.2204.20220128b"
    echo "           Creates a new branch called 1020.2204.20220128b checked out at the matching Hostboot commit hash, "
    echo "           copies over all system xmls from PNOR build, and modifies the CONFIG_FILE env var but doesn't replace simics_P10.system.xml"
    echo "       source ${BASH_SOURCE[0]} 1020.2204.20220128b -b ever6-level"
    echo "           Creates new branch called ever6-level checked out at the matching Hostboot commit hash, copies over"
    echo "           all system xmls and modifies the CONFIG_FILE env var but doesn't replace simics_P10.system.xml"
    echo "       source ${BASH_SOURCE[0]} 1020.2204.20220128b -xs e"
    echo "           Copies over the Everest system xml from 1020.2204.20220128b and replaces simics_P10.system.xml with it and does not modify CONFIG_FILE env var"
    echo "       source ${BASH_SOURCE[0]} 1020.2204.20220128b -nb build-0128b"
    echo "           Creates a new branch called build-0128b checked out at the matching Hostboot commit hash and modifies the CONFIG_FILE env var but doesn't"
    echo "           copy over the system xmls from the PNOR build nor is simics_P10.system.xml replaced by anything."
    return 1
}

function copy_targeting_xml ()
{
    echo ""
    if [ -z "${sys_type}" ]; then
        echo "Copying system MRWs into $PROJECT_ROOT/src/usr/targeting/common/xmltohb/ ..."
        cp -v /afs/rchland/projects/esw/$pnor_release/Builds/$pnor_build/op-build/output/host/powerpc64le-buildroot-linux-gnu/sysroot/openpower_mrw_scratch/*_hb.mrw.xml $PROJECT_ROOT/src/usr/targeting/common/xmltohb/
        if [ $? -ne 0 ]; then
            return $?
        fi
        echo ""
        echo "Done."
        echo "Remember to replace simics_P10.system.xml with your system's XML if you want to patch targeting."
    else
        echo "Copying $sys_type MRW into $PROJECT_ROOT/src/usr/targeting/common/xmltohb/ ..."
        cp -v /afs/rchland/projects/esw/$pnor_release/Builds/$pnor_build/op-build/output/host/powerpc64le-buildroot-linux-gnu/sysroot/openpower_mrw_scratch/$sys_type*_hb.mrw.xml $PROJECT_ROOT/src/usr/targeting/common/xmltohb/
        if [ $? -ne 0 ]; then
            return $?
        fi
        echo ""
        echo "Replacing $PROJECT_ROOT/src/usr/targeting/common/xmltohb/simics_P10.system.xml with $sys_type"
        cp -v $PROJECT_ROOT/src/usr/targeting/common/xmltohb/$sys_type*_hb.mrw.xml $PROJECT_ROOT/src/usr/targeting/common/xmltohb/simics_P10.system.xml
        if [ $? -ne 0 ]; then
            return $?
        fi
    fi
}

function checkout_hostboot_level ()
{
    echo ""
    echo "Checking out a new branch for $HOSTBOOT_COMMIT_HASH as $branch_name ..."
    git fetch gerrit && git checkout -b $branch_name $HOSTBOOT_COMMIT_HASH
    if [ $? -ne 0 ]; then
        return $?
    fi
}

function get_standalone_changes ()
{
    ssh -p 29418 hostboot.gerrit gerrit query "(intopic:bmc_standalone_patching) project:hostboot" --current-patch-set | grep -E 'change I|subject:'
    if [ $? -ne 0 ]; then
        return $?
    fi
}

function gerrit_refs ()
{
    ssh -p 29418 hostboot.gerrit gerrit query --current-patch-set "project:hostboot $1" | grep ref: | awk '{print $2}'
    if [ $? -ne 0 ]; then
        return $?
    fi
}

function gerrit_pick ()
{
    # $1 input is a commit or search string
    git fetch gerrit $(gerrit_refs $1) && git cherry-pick --strategy=recursive -X theirs FETCH_HEAD
    if [ $? -ne 0 ]; then
        return $?
    fi
}

function cherrypick_standalone_patch ()
{
    echo ""
    echo "Applying standalone changes necessary for full-system eBMC patching ..."
    standalone_patch_changes=$(get_standalone_changes)
    if [ -z "$standalone_patch_changes" ]; then
        # Couldn't find the standalone patch commit
        return 1
    fi
    # Separate the change ids from the subject lines
    changeIds=()
    subjects=()

    i=0
    # Internal Field Seperator needs to be updated.
    IFS=$'\n'
    for line in $standalone_patch_changes ; do
        if ! ((i % 2)); then
            changeIds+=($( echo $line | awk '{print $2}'))
        else
            subjects+=($( echo $line | sed "s/.*subject: //g"))
        fi

        ((i=i+1))
    done

    # Put the current git log into a private file so that its easier to grep through the current stack of commits
    # to find if needed changes are already in the branch.
    git log > .gitlog

    i=0
    for CHANGEID in ${changeIds[@]} ; do

        if ! grep -q $CHANGEID .gitlog ; then
            echo "PICK $CHANGEID ${subjects[$i]}"

            gerrit_pick $CHANGEID
            if [ $? -ne 0 ]; then
                \rm .gitlog
                return $?
            fi
        else
            echo "HAVE $CHANGEID ${subjects[$i]}"
        fi
        ((i=i+1))
    done

    \rm .gitlog

}

function verify_config_file ()
{
    config=$(env | grep CONFIG_FILE | cut -d"=" -f2)

    # See if the environment variable exists
    if [ -z "$config" ]; then
        echo ""
        echo "User environment variable for CONFIG_FILE not found... fixing."
        cp -v /afs/rchland/projects/esw/$pnor_release/Builds/$pnor_build/op-build/openpower/configs/hostboot/p10ebmc.config $PROJECT_ROOT/
        export CONFIG_FILE=$PROJECT_ROOT/p10ebmc.config
        echo "Environment variable for config now set to:"
        echo $(env | grep CONFIG_FILE)
    else
        # Get the md5sums of each config file to see if they are the same. If not, we want to take the one from the build.
        config_md5sum=$(md5sum $config | cut -d" " -f1)
        build_config_md5sum=$(md5sum /afs/rchland/projects/esw/$pnor_release/Builds/$pnor_build/op-build/openpower/configs/hostboot/p10ebmc.config | cut -d" " -f1)

        if [ $config_md5sum = $build_config_md5sum ]; then
            echo ""
            echo "User CONFIG_FILE ( $config ) matches the build config file. Not copying the config from the build over."
        else
            echo ""
            echo "User config file $config DOES NOT match the build config file. Replacing with the one from the build."
            cp -v /afs/rchland/projects/esw/$pnor_release/Builds/$pnor_build/op-build/openpower/configs/hostboot/p10ebmc.config $PROJECT_ROOT/
            export CONFIG_FILE=$PROJECT_ROOT/p10ebmc.config
            echo "Environment variable for config now set to:"
            echo $(env | grep CONFIG_FILE)
        fi
    fi
}

function cleanup_repo ()
{
    echo "Clobbering Hostboot repo..."
    vexec make clobber
    echo "Creating a new sandbox to work with..."
    yes | hb simsetup
}

###################################################################################################
# Main
###################################################################################################
function main ()
{
    if [[ $# -lt 1 ]]; then
        usage
        return 1
    fi
    # This script requires the user be in a hostboot workon
    if [[ ! "$PROJECT_ROOT" ]] ; then
        echo "ERROR: Must be run from inside a workon"
        return 1
    fi

    # Do a case insensitive compare of the selected MACHINE type.
    # This script uses this var to select which .xml file it replaces when doing targeting changes. Presently, the
    # script assumes simics_P10.system.xml is the file to overwrite when compiling targeting changes. So the MACHINE
    # must be set to P10_STANDALONE, otherwise the prime will select another xml file which has not been overwritten for
    # targeting changes.
    if [ "${MACHINE^^}" != "P10_STANDALONE" ]; then
        echo "ERROR: This script currently only supports P10 standalone for patching hardware systems and full-system simics."
        echo "       Please use MACHINE=P10_STANDALONE from a P10 based hostboot git repo."
        return 1;
    fi

    ################################################
    ##    Command Line Arg Parsing
    ################################################
    package_name=$1
    case "$package_name" in
        "--"*)
            usage
            return 1;;
        "-"*)
            usage
            return 1;;
    esac

    build_release=$(echo $package_name | cut -c 1-4 | awk '{print "fw"$1}')
    echo "Build Release: $build_release"
    pnor_build=$(sed -n 's/pnor_build: //p' < /afs/rchland/projects/esw/$build_release/Builds/$package_name/sbs-metadata/pnor_build_details.txt)
    echo "PNOR Build: $pnor_build"

    if [ -z "$pnor_build" ]; then
        echo "ERROR: Could not find pnor build info with given package name:'$package_name'"
        return 1
    fi

    pnor_release=$(sed -n 's/pnor_release: //p' < /afs/rchland/projects/esw/$build_release/Builds/$package_name/sbs-metadata/pnor_build_details.txt)
    echo "PNOR Release: $pnor_release"

    if [ -z "$pnor_release" ]; then
        echo "ERROR: Could not find pnor release info with given package name:'$package_name'"
        return 1
    fi

    export HOSTBOOT_COMMIT_HASH=$(sed -n -e 's/^.*hostboot-p10-//p' < /afs/rchland.ibm.com/projects/esw/$pnor_release/Builds/$pnor_build/logs/status.html | cut -c 1-7 | head -n1)
    echo "Hostboot commit for PNOR build: $HOSTBOOT_COMMIT_HASH"
    if [ -z "$HOSTBOOT_COMMIT_HASH" ]; then
        echo "ERROR: Could not find hostboot commit hash with given package name:'$package_name'"
        return 1
    fi
    shift

    # Change the long args to short args
    for arg in "$@"; do
        shift
        case "$arg" in
            "--help") set -- "$@" "-h" ;;
            "--xml-only") set -- "$@" "-x" ;;
            "--no-xml") set -- "$@" "-n" ;;
            "--system-type") set -- "$@" "-s" ;;
            "--branch-name") set -- "$@" "-b" ;;
            "--"*)  echo "ERROR: Invalid argument ${arg}"; usage; return 1;;
            *) set -- "$@" "$arg"
        esac
    done

    # Default values for optional args
    no_xml=false
    xml_only=false
    sys_type=""
    branch_name=""

    # Parse through the optional args
    OPTIND=1
    while getopts "hb:s:xn" option
    do
        case "${option}" in
            h)
                usage
                return 0
                ;;
            s)
                sys_type="${OPTARG}"
                if [ "${sys_type}" = "e" ]; then
                    sys_type="Everest"
                elif [ "${sys_type}" = "2u" ]; then
                    sys_type="Rainier-2U"
                elif [ "${sys_type}" = "4u" ]; then
                    sys_type="Rainier-4U"
                elif [ "${sys_type}" = "b" ]; then
                    sys_type="Bonnell"
                else
                    echo "ERROR: Invalid system target."
                    usage
                    return 1
                fi
                ;;
            b)
                branch_name="$OPTARG"
                ;;
            x)
                xml_only=true
                ;;
            n)
                no_xml=true
                ;;
            ?)
                usage
                return 1
                ;;
            *)
                usage
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [ -z "${branch_name}" ]
    then
        branch_name="${package_name}"
    fi

    # Check for incompatible args
    if [ "$xml_only" = true ] && [ "$no_xml" = true ]; then
        echo "ERROR: Cannot supply both -n and -x args."
        usage
        return 1
    fi

    ################################################
    ## Perform requested actions
    ################################################
    if [ "$xml_only" == false ]; then
        checkout_hostboot_level
        if [ $? -ne 0 ]; then
            echo "ERROR: Couldn't checkout the hostboot level. See above messages for more info."
            return $?
        fi
        cherrypick_standalone_patch
        if [ $? -ne 0 ]; then
            echo "ERROR: Couldn't cherry pick the required patch. See above messages for more info."
            return $?
        fi
    fi

    if [ "$no_xml" == false ]; then
        copy_targeting_xml
        if [ $? -ne 0 ]; then
            echo "ERROR: Couldn't copy over targeting xml files. See above messages for more info."
            return $?
        fi
    fi

    if [ "$xml_only" == false ]; then
        verify_config_file

        while true; do
            read -p " To finish setup, this script must 'make clobber' and perform 'hb simsetup' in this repo. Do that now [Y/N]? " yn
            case $yn in
                [Yy] ) cleanup_repo
                       echo "Hostboot repo has been clobbered and a new sandbox for this driver has been created. You may now apply your changes, compile, prime, and patch the system."
                       echo "IMPORTANT: If you exit this shell you MUST export the correct CONFIG_FILE in the new shell to build patches again on this branch. The file is located in your project root."
                       break ;;
                [Nn] )
                    # Remind the user of their responsibilities. Put this notice here so it's not seen when doing copy-only actions.
                    echo ""
                    echo "Repo has been setup for creating standalone patches for full system simulation and hardware."
                    echo "IMPORTANT: You must 'make clobber' your repo now, perform 'hb simsetup' and 'hb prime' actions."
                    echo "           Otherwise, your patches will be built incorrectly!"
                    break ;;
                * ) echo " Please answer Y or N." ;;
                esac
        done
    fi

}

# The user must source this script
# otherwise it can't update the environment variable for the CONFIG_FILE
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    main $@
else
    echo "ERROR: This script must be sourced in order to setup the repo properly"
    usage
fi

# Cleanup the script variables
unset package_name
unset pnor_release
unset pnor_build
unset build_release
unset branch_name
unset no_xml
unset xml_only
unset sys_type
unset config
unset OPTIND

#!/bin/bash
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/tools/ebmc/patch-bmc $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2024
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

# This is a convenience script for patching eBMC systems. See the
# USAGE function for usage help.

function errlog () {
    echo "$@" >&2
}


# Constants

BMC_PATCH_DIRECTORY=/usr/local/share/hostfw/running/
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
SSHPASS_SCRIPT="sshpass -p"

# If the STANDALONE_COMMIT_CHANGE_ID is not found users can force the script
# to continue without that commit with HB_PATCH_BMC_FORCE_PATCH.
STANDALONE_COMMIT_CHANGE_ID=I090b925139d1ed594679f43065b68fa434305469

# If neither HOSTBOOT_COMMIT_HASH (set by setup-standalone-repo) nor
# BASE_CHANGEID_FOR_PATCHES (set by user) is found, then MGP_FILES_EXIST
# will be set to 0.  Users can force the script to continue without that
# commit with HB_PATCH_BMC_FORCE_PATCH.  With that set and this variable
# equal 0 then the script won't attempt to copy a non-existent directory.
MGP_FILES_EXIST=1

#User might specify a different ssh port (e.g. for simics)
if [ -z "$SSH_PORT" ]
then
    SSH_CMD="ssh"
    COPY="rsync -zP --rsync-path=sudo\${IFS}rsync"
else
    SSH_CMD="ssh -p $SSH_PORT"
    COPY="scp -P $SSH_PORT"
fi

#User might specify a different location for patches
if [ -z "$PATCHES_DIR" ]
then
    PATCHES_DIR="$PROJECT_ROOT/standalone/pnor"
    IMG_DIR="$PROJECT_ROOT/img"
else
    # If PATCHES_DIR is set by user then all the data lives there
    SCRIPT_DIR=$PATCHES_DIR
    IMG_DIR=$PATCHES_DIR
    PROJECT_ROOT=1
    EXTERNAL_PATCHES=1
fi
echo "PATCHES_DIR=$PATCHES_DIR"

# We filter out files based on `_test` so we can't have that in the path
if echo $IMG_DIR | grep '_test'; then
  errlog "** IMG_DIR ($IMG_DIR) contains '_test', that is not allowed"
  if [[ "$HB_PATCH_BMC_FORCE_PATCH" ]] ; then
     errlog 'Continuing because HB_PATCH_BMC_FORCE_PATCH is set.'
  else
     errlog 'Press enter to continue. (Set the environment variable HB_PATCH_BMC_FORCE_PATCH to disable this check.)'
     read
  fi
fi
echo "IMG_DIR=$IMG_DIR"


# Library functions


function checkstatus () {
    if [[ $? -ne 0 ]] ; then
        echo "Command failed: $1"
        exit 1
    fi
}

function USAGE () {
    errlog "Usage(1): $0 [USERNAME@]HOSTNAME PASSWORD [OPTIONS...]"
    errlog "    HOSTNAME         The hostname of the machine to patch, including a user name if needed"
    errlog "    PASSWORD         SSH password for the machine to patch"
    errlog ""
    errlog "Usage(2): $0 [EXTERNALDIR] --cponly [OPTIONS...]"
    errlog "    EXTERNALDIR      Path to a directory to copy data files and scripts into"
    errlog ""
    errlog "Usage(3): PATCHES_DIR=[COPYDIR] [COPYDIR]/patch-bmc [USERNAME@]HOSTNAME PASSWORD [OPTIONS...]"
    errlog "    COPYDIR          Path to a directory where data files and scripts were previously copied into"
    errlog "    HOSTNAME         The hostname of the machine to patch, including a user name if needed"
    errlog "    PASSWORD         SSH password for the machine to patch"
    errlog ""
    errlog "    OPTIONS may be one or more of the following:"
    errlog "      HBI         Patch Hostboot Base (HBB) and extended (HBI) images"
    errlog "      HBBL        Patch Hostboot Bootloader"
    errlog "      HBRT        Patch Hostboot runtime"
    errlog "      HBD         Patch Hostboot targeting data (only use with appropriate targeting XML changes)"
    errlog "      --nopldmd   Do not restart PLDMD on the BMC after patching"
    errlog "      --cponly    Copy files to an external dir instead of a BMC"
    errlog "      -h/--help   Display this help text and exit"
    errlog ""
    errlog "For example, to patch HBB, HBI and HBD on the host 'bmcmachine' with the username 'root'"
    errlog "and password 'mypassword', run:"
    errlog "    $0 root@bmcmachine mypassword HBI HBD"
    errlog ""
    errlog "    Environment Variables:"
    errlog "      SSH_PORT    Set to value of non-standard (22) ssh port to use  [optional]"
    exit 1
}

function SSHPASS_RC () {
    errlog "+ Running command: $@"
    set -o pipefail
    # ssh will stupidly print newlines, so filter them out to clean up our output
    $SSHPASS_SCRIPT "$PASSWORD" "$@" | { grep -v -E '^\s*$' || true; }
    local RC=$?
    set +o pipefail

    return $RC
}

function SSHPASS () {
    SSHPASS_RC "$@"
    RC=$?

    if [[ $RC != 0 ]] ; then
	errlog "Remote command failed: $@"
	exit 1
    fi
}

function REMOTE_SUDO () {
    CMD=$1
    SSHPASS $SSH_CMD "$HOSTNAME" sudo bash -c "\"$CMD\""
}

function PATCH_HBI_HBB () {
    # Copy files and create symlinks
    SSHPASS $COPY "$PATCHES_DIR/HBI.bin" "$PATCHES_DIR/HBB.bin" "$HOSTNAME":"$BMC_PATCH_DIRECTORY"
    REMOTE_SUDO "cd $BMC_PATCH_DIRECTORY && ln -sf HBB.bin HBB && ln -sf HBI.bin HBI"
    REMOTE_SUDO "cd $BMC_PATCH_DIRECTORY && ln -sf HBB.bin $HBB.lid && ln -sf HBI.bin $HBI.lid"

    if [ -z "$PATCH_BMC_NO_DEBUG" ]
    then
        echo '*********************************************************************************'
        echo 'Copying the symbol files over for debug, set PATCH_BMC_NO_DEBUG=1 to skip copying.'
        echo '*********************************************************************************'
        REMOTE_SUDO "mkdir -p $BMC_PATCH_DIRECTORY/hbdebug/"
        # Copy the symbol files over for debug
        SSHPASS $COPY `find $IMG_DIR/hbotStringFile $IMG_DIR/*.list.bz2 $IMG_DIR/*.syms $IMG_DIR/*.bin.modinfo | grep -v _test` "$HOSTNAME":"$BMC_PATCH_DIRECTORY/hbdebug/"
        REMOTE_SUDO "cd $BMC_PATCH_DIRECTORY && ln -sf hbdebug/hbotStringFile $HBOTSTRINGFILE.lid"
        REMOTE_SUDO "cd $BMC_PATCH_DIRECTORY && ln -sf hbdebug/hbicore.syms $HBICORE_SYMS.lid"
    else
        echo '****************************************************************************************************************************'
        echo 'PATCH_BMC_NO_DEBUG is set, so skip copying the symbol files over for debug, unset PATCH_BMC_NO_DEBUG to copy debug binaries.'
        echo '****************************************************************************************************************************'
    fi
}

function PATCH_HBD () {
    # Copy files and create symlink
    SSHPASS $COPY "$PATCHES_DIR/HBD.bin" "$HOSTNAME":"$BMC_PATCH_DIRECTORY"
    REMOTE_SUDO "cd $BMC_PATCH_DIRECTORY && ln -sf HBD.bin HBD && ln -sf HBD.bin $HBD.lid"
}

function PATCH_HBRT () {
    HBRT_PATCH_DIR=/tmp/hbrt_patch_`date +%Y%m%H%M%S`/
    rm -rf $HBRT_PATCH_DIR
    mkdir -p $HBRT_PATCH_DIR
    cp $IMG_DIR/hbirt.bin $HBRT_PATCH_DIR
    echo "HBRT  hbirt.bin  $HBRT_RT.lid  80d00009.lid" > $HBRT_PATCH_DIR/lidnumbers.txt
    if ! SSHPASS_RC $COPY "$HOSTNAME":/usr/local/share/hostfw/running/81e002ff.lid $HBRT_PATCH_DIR >/dev/null ; then
	SSHPASS $COPY "$HOSTNAME":/media/hostfw/running-ro/81e002ff.lid $HBRT_PATCH_DIR
	checkstatus "download master LID list"
    fi
    echo Building LIDs...
    echo /afs/rch/usr5/dcrowell/public/bin/makelids $HBRT_PATCH_DIR
    /afs/rch/usr5/dcrowell/public/bin/makelids $HBRT_PATCH_DIR
    checkstatus "makelids"
    SSHPASS $COPY $HBRT_PATCH_DIR/lids_to_patch/*.lid "$HOSTNAME":"$BMC_PATCH_DIRECTORY"
    rm -rf $HBRT_PATCH_DIR
}

function PATCH_HBBL () {
    # Copy files and create symlink
    SSHPASS $COPY "$PATCHES_DIR/HBBL.bin" "$HOSTNAME":"$BMC_PATCH_DIRECTORY"
    REMOTE_SUDO "cd $BMC_PATCH_DIRECTORY && ln -sf HBBL.bin HBBL && ln -sf HBBL.bin $HBBL.lid"
}

function RESTART_PLDMD () {
    REMOTE_SUDO "systemctl restart pldmd"
}

function CHECK_STATE () {
    QUERY_RESULT=$(REMOTE_SUDO "obmcutil state")
    checkstatus "Checking state of BMC"
    if echo $QUERY_RESULT | grep 'HostState.Off'; then
        errlog '***************************************************************************'
        errlog 'INFO - BMC is HostState.Off, valid state to have pldmd restart be effective'
        errlog '***************************************************************************'
    else
        errlog '******************************************************************************************************'
        errlog 'WARNING !! BMC is not in HostState.Off, you need to be powered off to have pldmd restart be effective.'
        errlog '    obmcutil poweroff OR obmcutil chassisoff           '
        errlog 'Make any changes and Press enter when ready to continue'
        errlog '******************************************************************************************************'
        read
    fi
}

function FETCH_LID_IDS_FROM_BMC () {
    LID_IDS=$(REMOTE_SUDO "pldmtool bios GetBIOSAttributeCurrentValueByHandle -a hb_lid_ids")

    checkstatus "Fetching LIDs from BMC"

    # This will set variables in the environment that correspond to
    # each LID variable, so that e.g. we can use $HBI to get HBI's LID
    # number.
    set -o pipefail
    LID_VARS=$(echo $LID_IDS | grep -o -P "(?<=Value\": )(\".+?\")" | tr ',' '\n' | tr '"' ' ' | grep -v '\.')
    checkstatus "Evaluating LID IDs"
    set +o pipefail


    eval "$LID_VARS"
}

function CHECK_REPO_FOR_STANDALONE_COMMIT () {
    # This is the change-ID for the standalone PNOR layout changes
    # that will make a standalone build compatible with a BMC machine.
    git log | grep $STANDALONE_COMMIT_CHANGE_ID >/dev/null

    if [[ $? -ne 0 ]] ; then
        errlog "WARNING: Patching from standalone, but commit $STANDALONE_COMMIT_CHANGE_ID was not found in the repository."
        errlog '         This may cause the host to crash.'

        if [[ "$HB_PATCH_BMC_FORCE_PATCH" ]] ; then
            errlog 'Continuing because HB_PATCH_BMC_FORCE_PATCH is set.'
        else
            errlog 'Press enter to continue. (Set the environment variable HB_PATCH_BMC_FORCE_PATCH to disable this check.)'
            read
        fi
    fi
}

function SHOW_PATCHES_ON_BMC () {
    echo 'Current patches:'
    REMOTE_SUDO "ls -lat /usr/local/share/hostfw/running/"
}

function MAKE_GIT_PATCHFILES () {
    MGP_COPYDIR=$1
    echo "MGP_COPYDIR=$MGP_COPYDIR"

    if [ -z "$BASE_CHANGEID_FOR_PATCHES" ]
    then
        BASE_CHANGEID_FOR_PATCHES=$HOSTBOOT_COMMIT_HASH
    fi

    if [ -z "$EXTERNAL_PATCHES" ]
    then
        rm -f $MGP_COPYDIR/HB_BASE_IS__*

        if [ "$BASE_CHANGEID_FOR_PATCHES" != "" ]
        then
            echo "Making patches based against $BASE_CHANGEID_FOR_PATCHES"
            rm -f $MGP_COPYDIR/*.patch
            git format-patch $BASE_CHANGEID_FOR_PATCHES --output-directory $MGP_COPYDIR/
            touch $MGP_COPYDIR/HB_BASE_IS__$BASE_CHANGEID_FOR_PATCHES
        else
            echo "** No base commit found, skipping patches **"
            MGP_FILES_EXIST=0
        fi
    else
        # if EXTERNAL_PATCHES is set, the patch files already exist so just copy them over
        cp $PATCHES_DIR/HB_BASE_IS__* $MGP_COPYDIR/
        cp $PATCHES_DIR/*.patch $MGP_COPYDIR/
    fi
}

# Main

if [[ ! "$PROJECT_ROOT" ]] ; then
    errlog "Must be run from inside a workon"
    exit 1
fi

if [[ $# -lt 3 ]] ; then
    USAGE
    exit 1
fi

HOSTNAME=$1
PASSWORD=$2

COPY_ONLY=0
if [[ "$PASSWORD" == --cponly ]] ; then
    COPY_ONLY=1
fi

PATCH_HBI=0
PATCH_HBBL=0
PATCH_HBRT=0
PATCH_HBD=0
RESTART_PLDMD=1

shift 2

for type in $* ; do
    case $type in
        HBI)
            PATCH_HBI=1
            ;;

        HBBL)
            PATCH_HBBL=1
            ;;

        HBRT)
            PATCH_HBRT=1
            ;;

        HBD)
            PATCH_HBD=1
            ;;

        --nopldmd)
            RESTART_PLDMD=0
            ;;

        -h|--help)
            USAGE
            exit 1
            ;;

        *)
            errlog "Unrecognized option $type"
            exit 1
            ;;
    esac
done

if [[ "$MACHINE" = P10_STANDALONE ]] ; then
    CHECK_REPO_FOR_STANDALONE_COMMIT
fi

# Just copy files to a directory to be patched later
if [[ $COPY_ONLY = 1 ]] ; then
    COPYDIR=$HOSTNAME   #steal the first arg

    # Data
    SECTIONS=""
    if [[ $PATCH_HBI = 1 ]] ; then
        cp "$PATCHES_DIR/HBI.bin" "$PATCHES_DIR/HBB.bin" "$COPYDIR"
        SECTIONS="$SECTIONS HBI"
    fi
    if [[ $PATCH_HBBL = 1 ]] ; then
        cp "$PATCHES_DIR/HBBL.bin" "$COPYDIR"
        SECTIONS="$SECTIONS HBBL"
    fi
    if [[ $PATCH_HBRT = 1 ]] ; then
        cp "$IMG_DIR/hbirt.bin" "$COPYDIR"
        SECTIONS="$SECTIONS HBRT"
    fi
    if [[ $PATCH_HBD = 1 ]] ; then
        cp "$PATCHES_DIR/HBD.bin" "$COPYDIR"
        SECTIONS="$SECTIONS HBD"
    fi

    # Copy all of the non-tst symbol data out there for debug
    cp img/hbotStringFile `find img/*.list.bz2 img/*.syms img/*.bin.modinfo | grep -v _test` "$COPYDIR"

    # Patch files to recreate
    MAKE_GIT_PATCHFILES $COPYDIR

    echo "Patches copied to $COPYDIR."
    echo "To apply to BMC run:" > $COPYDIR/HOW_TO_APPLY.txt
    echo "   PATCHES_DIR=$COPYDIR $COPYDIR/patch-bmc [USERNAME@]HOSTNAME PASSWORD $SECTIONS" >> $COPYDIR/HOW_TO_APPLY.txt
    cat $COPYDIR/HOW_TO_APPLY.txt

    # Copy this script out there
    cp $0 "$COPYDIR"

else   # Apply the data to the BMC

   FETCH_LID_IDS_FROM_BMC

   # Copy patch files over too so we know what is being patched
   COPYDIR=/tmp/hb_patches_`date +%Y%m%H%M%S`/
   mkdir -p $COPYDIR
   MAKE_GIT_PATCHFILES $COPYDIR

   if [[ $PATCH_HBI = 1 ]] ; then
       PATCH_HBI_HBB
   fi

   if [[ $PATCH_HBD = 1 ]] ; then
       PATCH_HBD
   fi

   if [[ $PATCH_HBRT = 1 ]] ; then
       PATCH_HBRT
   fi

   if [[ $PATCH_HBBL = 1 ]] ; then
       PATCH_HBBL
   fi

   if [ ${MGP_FILES_EXIST} -eq 1 ]; then
       REMOTE_SUDO "mkdir -p $BMC_PATCH_DIRECTORY/hbdebug/"
       SSHPASS $COPY "$COPYDIR"/ "$HOSTNAME":"$BMC_PATCH_DIRECTORY/hbdebug/"
   fi

   # Need slight delay for rsync to complete before rm
   sleep 2

   rm -rf $COPYDIR

   if [[ $RESTART_PLDMD = 1 ]] ; then
       RESTART_PLDMD
   fi

   CHECK_STATE

   SHOW_PATCHES_ON_BMC
fi

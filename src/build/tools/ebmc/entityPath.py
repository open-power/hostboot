# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/tools/ebmc/entityPath.py $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2024
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG
# The content of this file, entityPath.py, is automatically
# generated by src/usr/targeting/common/xmltohb/xmltohb.pl and output to
# obj/genfiles/errl/entityPath.py.

# At this time, the generated file must be manually copied from the
# obj/genfiles/errl directory to the src/build/tools/ebmc directory and
# then manually checked in to be picked up by the Hostboot build.

# To pull the parser change into a BMC image, update the commit pointer in the
# openbmc project's meta-openpower/recipes-phosphor/logging/hostboot-pel-parsers_git.bb
# file to reference the Hostboot commit with the change.

""" Creates the entity path for the given data
Function is used by ErrlUserDetailsParserCallout and
ErrlUserDetailsParserTarget in b0100.py

@param[in] data: memoryview object to get the data from
@param[in] start: starting index of data to use for entity path
@returns: a string of the entity path, and the offset value for the data following
          the entity path data
"""
def errlud_parse_entity_path(data, start):
    pathType = { 0x01: "Logical:",
                 0x02: "Physical:",
                 0x03: "Device:",
                 0x04: "Power:" }

    elementInstance = {
                        0x00: "/NA",
                        0x01: "/Sys",
                        0x02: "/Node",
                        0x03: "/DIMM",
                        0x04: "/Membuf",
                        0x05: "/Proc",
                        0x06: "/EX",
                        0x07: "/Core",
                        0x08: "/L2",
                        0x09: "/L3",
                        0x0A: "/L4",
                        0x0B: "/MCS",
                        0x0D: "/MBA",
                        0x0E: "/XBUS",
                        0x0F: "/ABUS",
                        0x10: "/PCI",
                        0x11: "/DPSS",
                        0x12: "/APSS",
                        0x13: "/OCC",
                        0x14: "/PSI",
                        0x15: "/FSP",
                        0x16: "/PNOR",
                        0x17: "/OSC",
                        0x18: "/TODCLK",
                        0x19: "/CONTROL_NODE",
                        0x1A: "/OSCREFCLK",
                        0x1B: "/OSCPCICLK",
                        0x1C: "/REFCLKENDPT",
                        0x1D: "/PCICLKENDPT",
                        0x1E: "/NX",
                        0x1F: "/PORE",
                        0x20: "/PCIESWITCH",
                        0x21: "/CAPP",
                        0x22: "/FSI",
                        0x23: "/EQ",
                        0x24: "/MCA",
                        0x25: "/MCBIST",
                        0x26: "/MI",
                        0x27: "/DMI",
                        0x28: "/OBUS",
                        0x2A: "/SBE",
                        0x2B: "/PPE",
                        0x2C: "/PERV",
                        0x2D: "/PEC",
                        0x2E: "/PHB",
                        0x2F: "/SYSREFCLKENDPT",
                        0x30: "/MFREFCLKENDPT",
                        0x31: "/TPM",
                        0x32: "/SP",
                        0x33: "/UART",
                        0x34: "/PS",
                        0x35: "/FAN",
                        0x36: "/VRM",
                        0x37: "/USB",
                        0x38: "/ETH",
                        0x39: "/PANEL",
                        0x3A: "/BMC",
                        0x3B: "/FLASH",
                        0x3C: "/SEEPROM",
                        0x3D: "/TMP",
                        0x3E: "/GPIO_EXPANDER",
                        0x3F: "/POWER_SEQUENCER",
                        0x40: "/RTC",
                        0x41: "/FANCTLR",
                        0x42: "/OBUS_BRICK",
                        0x43: "/NPU",
                        0x44: "/MC",
                        0x45: "/TEST_FAIL",
                        0x46: "/MFREFCLK",
                        0x47: "/SMPGROUP",
                        0x48: "/OMI",
                        0x49: "/MCC",
                        0x4A: "/OMIC",
                        0x4B: "/OCMB_CHIP",
                        0x4C: "/MEM_PORT",
                        0x4D: "/I2C_MUX",
                        0x4E: "/PMIC",
                        0x4F: "/NMMU",
                        0x50: "/PAU",
                        0x51: "/IOHS",
                        0x52: "/PAUC",
                        0x53: "/FC",
                        0x54: "/LPCREFCLKENDPT",
                        0x55: "/GENERIC_I2C_DEVICE",
                        0x56: "/MDS_CTLR",
                        0x57: "/DCM",
                        0x66: "/POWER_IC",
                        0x67: "/TEMP_SENSOR",
                        0x68: "/LAST_IN_RANGE",
                      }

    # Entity Path Layout
    # 1 byte  : PATH_TYPE:4, NumberOfElements:4
    # N number of [Element, Instance#] pairs
    # 1 byte  : Element
    # 1 byte  : Instance #
    #
    # Output is PathType:/ElementInstance#/ElementInstance#/ElementInstance#
    pathTypeLength = data[start]
    start+=1

    pathString = pathType.get((pathTypeLength & 0xF0) >> 4, "Unknown:")
    pathSize = (pathTypeLength & 0x0F) * 2

    for x in range(0, pathSize, 2):
        pathString += elementInstance.get(data[start], "/UNKNOWN")
        start += 1
        pathString += str(data[start])
        start += 1

    return pathString, start

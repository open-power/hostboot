#!/bin/bash -e
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/tools/standaloneHelper $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2012,2024
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

#
# This script aids in various tasks needed to assemble and simulate a P10
# standalone build in Simics
#

# Export artifacts IDs and variables that will be used in
# assemble.standalone.mk
assemble_setup()
{

    STANDALONE_DIR=${PROJECT_ROOT}/standalone

    build-ffs-tools

    source ${PROJECT_ROOT}/src/build/citest/etc/sbe
    source ${PROJECT_ROOT}/src/build/citest/etc/hcode
    source ${PROJECT_ROOT}/src/build/citest/etc/hdat
    source ${PROJECT_ROOT}/src/build/citest/etc/occ
    source ${PROJECT_ROOT}/src/build/citest/etc/wof
    source ${PROJECT_ROOT}/src/build/citest/etc/devtree

    if [ ! -z "${SECUREBOOT_KEY_TRANSITION_MODE}" ] &&
        [ ! -z "${CFM_TEST_IMAGE}" ]; then
        source ${PROJECT_ROOT}/src/build/citest/etc/cfmtest
    fi

    if cat ${PROJECT_ROOT}/obj/genfiles/config.h | grep -q "CONFIG_SECUREBOOT 1"; then
        export CONFIG_SECUREBOOT="1"
    fi

    if [[ ! -d ${STANDALONE_DIR}/pnor ]];then
        mkdir -p ${STANDALONE_DIR}/pnor
    fi

    if [[ ! -d ${STANDALONE_DIR}/staging ]];then
        mkdir -p ${STANDALONE_DIR}/staging
    fi

    # Removing previously assembled items
    rm -rf ${STANDALONE_DIR}/pnor/*
    rm -rf ${STANDALONE_DIR}/staging/*

}

# Setup layout of files around simics.
simics_setup()
{

    hbfw_dir=${PROJECT_ROOT}/standalone/simics/hbfw

    if [[ ! -d ${hbfw_dir} ]];then
        echo "Could not find " ${hbfw_dir}
        echo "Please run \"hb simsetup\" to create it and other Simics artifacts."
        exit 1
    fi

    # Emptying out .../hbfw directory and repopulating it
    rm -rf ${hbfw_dir}/*

    # Copy down fsp-trace
    cp /opt/mcp/shared/fr_FLD9-DEV-20190308/opt/fsp/usr/bin/fsp-trace ${hbfw_dir}

    # Copy down HB's Simics and Debugs files
    cp -rf ${PROJECT_ROOT}/src/build/simics/* ${hbfw_dir}
    cp -rf ${PROJECT_ROOT}/src/build/debug/* ${hbfw_dir}

    # Copy gen files
    cp ${PROJECT_ROOT}/obj/genfiles/attrInfo.csv ${hbfw_dir}
    cp ${PROJECT_ROOT}/obj/genfiles/targAttrInfo.csv ${hbfw_dir}
    cp ${PROJECT_ROOT}/obj/genfiles/attrEnumInfo.csv ${hbfw_dir}

    # Copy img files
    cp ${PROJECT_ROOT}/img/securerom.bin.modinfo ${hbfw_dir}
    cp ${PROJECT_ROOT}/img/hbibl.bin.modinfo ${hbfw_dir}
    cp ${PROJECT_ROOT}/img/hbirt${UNDERSCORE_TEST}.bin.modinfo ${hbfw_dir}/hbirt.bin.modinfo
    cp ${PROJECT_ROOT}/img/securerom.list.bz2 ${hbfw_dir}
    cp ${PROJECT_ROOT}/img/hbibl.list.bz2 ${hbfw_dir}
    cp ${PROJECT_ROOT}/img/hbirt${UNDERSCORE_TEST}.list.bz2 ${hbfw_dir}/hbirt.list.bz2
    cp ${PROJECT_ROOT}/img/securerom.syms ${hbfw_dir}
    cp ${PROJECT_ROOT}/img/hbibl.syms ${hbfw_dir}
    cp ${PROJECT_ROOT}/img/hbirt${UNDERSCORE_TEST}.syms ${hbfw_dir}/hbirt.syms
    cp ${PROJECT_ROOT}/img/errlparser ${hbfw_dir}
    cp ${PROJECT_ROOT}/img/hbicore${UNDERSCORE_TEST}.bin.modinfo ${hbfw_dir}/hbicore.bin.modinfo
    cp ${PROJECT_ROOT}/img/isteplist.csv ${hbfw_dir}
    cp ${PROJECT_ROOT}/img/hbicore${UNDERSCORE_TEST}.list.bz2 ${hbfw_dir}/hbicore.list.bz2
    cp ${PROJECT_ROOT}/img/hbicore${UNDERSCORE_TEST}.syms ${hbfw_dir}/hbicore.syms
    cp ${PROJECT_ROOT}/img/hbotStringFile ${hbfw_dir}

}

hash_file ()
{
    # sha1sum prints out the filename in the second column, which we don't want
    sha1sum "$1" 2>/dev/null | awk '{print $1}'
}

# This will generate SBE Odyssey images unless some are provided via
# environment exports
generate_sbe_odyssey_images()
{
    SBE_DIR=${PROJECT_ROOT}/src/build/tools/extern/sbe

    if [[ "${HB_FAST_PRIME}" ]] && [[ -z $HB_FORCE_REBUILD_ODY ]]
    then
        export SBE_SUBREPO_TOP_COMMIT=$(git submodule status $SBE_DIR | awk '{print $1}' | sed 's/^-//')
        export ODYSSEY_SBE_IMAGES=${HOSTBOOT_ENVIRONMENT}/prime/sbe/release-fw1060/$SBE_SUBREPO_TOP_COMMIT/
        # Check if the cached images exist; rebuild the SBE submodule if they don't
        if [ -d ${ODYSSEY_SBE_IMAGES} ]; then
            echo "\n***Using default pre-built SBE Odyssey images\n"
            return 0
        else
            echo "${ODYSSEY_SBE_IMAGES} DNE: generating SBE submodule images"
            unset ODYSSEY_SBE_IMAGES
        fi
    fi
        
    # Use default paths for Odyssey images if no custom ones are specified
    if [ -n "${ODYSSEY_SBE_IMAGES}" ]; then
        ODYSSEY_SROM_IMG=${ODYSSEY_SBE_IMAGES}/odyssey_srom_DD1.bin
        ODYSSEY_OTPROM_IMG=${ODYSSEY_SBE_IMAGES}/odyssey_otprom_DD1.bin
        ODYSSEY_PNOR_IMG=${ODYSSEY_SBE_IMAGES}/odyssey_nor_DD1.img.ecc
        ODYSSEY_DEBUG_TAR_IMG=${ODYSSEY_SBE_IMAGES}/odyssey_sbe_debug_DD1.tar.gz
    fi

    # Clone SBE repo to ${PROJECT_ROOT}/src/build/tools/extern/sbe
    # SBE is tracked as a git module
    (cd ${PROJECT_ROOT} && make sbe $1)

    # Use default paths for Odyssey images if no custom ones are specified
    if [ -z $ODYSSEY_SROM_IMG ]; then
        ODYSSEY_SROM_IMG=${SBE_DIR}/images/odyssey/onetime/srom/odyssey_srom_DD1.bin
    fi

    if [ -z $ODYSSEY_OTPROM_IMG ]; then
        ODYSSEY_OTPROM_IMG=${SBE_DIR}/images/odyssey/onetime/otprom/odyssey_otprom_DD1.bin
    fi

    if [ -z $ODYSSEY_PNOR_IMG ]; then
        ODYSSEY_PNOR_IMG=${SBE_DIR}/simics/sbe/odyssey_standalone/images/odyssey_nor_DD1.img.ecc
    fi

    if [ -z $ODYSSEY_DEBUG_TAR_IMG ]; then
        ODYSSEY_DEBUG_TAR_IMG=${SBE_DIR}/images/odysseylab/odysseylab_sbe_debug_DD1.tar.gz
    fi

    # If any of the Odyssey images don't exist, re-generate all of them
    if [ ! -f "$ODYSSEY_SROM_IMG" ] || \
       [ ! -f "$ODYSSEY_OTPROM_IMG" ] || \
       [ ! -f "$ODYSSEY_PNOR_IMG" ] || \
       [ $HB_FORCE_REBUILD_ODY ]
    then
        echo -e "\n\n Generating SBE Odyssey images..."

        cd ${SBE_DIR}
        # HB env setup scripts export SIGNING_BASE_DIR to perform image signature. When this
        # path is set in SBE, however, it goes down the path we don't want for Odyssey standalone
        # and tries to find keys that don't exist. We need to unset SIGNING_BASE_DIR var in the
        # new shell that SBE workon spawns to prevent SBE going down the wrong signing path.
        ./sbe workon odysseylab pnor <<< 'unset SIGNING_BASE_DIR && ./sbe build && ./sbe prime skip-sim-install && exit'
        cd ${PROJECT_ROOT}
        STANDALONE_SIMICS=${PROJECT_ROOT}/standalone/simics
        tar -xzvf ${ODYSSEY_DEBUG_TAR_IMG} -C ${STANDALONE_SIMICS}/ || exit 1
    else
        echo "\nSkipping generation of SBE Odyssey images\n"
    fi

    if [ ! -f "$ODYSSEY_SROM_IMG" ] || \
       [ ! -f "$ODYSSEY_OTPROM_IMG" ] || \
       [ ! -f "$ODYSSEY_PNOR_IMG" ]
    then
        echo "SBE Odyssey build did not create one or more artifacts"
        echo "Check paths: $ODYSSEY_SROM_IMG; $ODYSSEY_OTPROM_IMG; $ODYSSEY_PNOR_IMG"
        exit 1
    fi

}

# Function that will take HB's bootloader image (hbbl.bin), copy it to the PPE
# repo, and build repo to generate ECC enabled SBE image
generate_sbe_image()
{
    cd ${PROJECT_ROOT}
    PPE_DIR=${PROJECT_ROOT}/src/build/tools/extern/ppe

    export PPE_SUBREPO_TOP_COMMIT=$(git submodule status ${PPE_DIR} | awk '{print $1}' | sed 's/^-//')
    if [[ "${HB_FAST_PRIME}" ]] && [[ -z $HB_FORCE_REBUILD_SBE ]]
    then
        PPE_CACHE_DIR="${HOSTBOOT_ENVIRONMENT}/prime/ppe/release-fw1060/${PPE_SUBREPO_TOP_COMMIT}"
        if [ -d ${PPE_CACHE_DIR} ]; then
            echo "\n***Using default pre-built SBE images from ${PPE_CACHE_DIR}\n"
            return 0
        else
            echo "${PPE_CACHE_DIR} DNE - generating PPE submodule images"
        fi

    fi

    mkdir -p "$PROJECT_ROOT/standalone/imghash"
    HBIBL_HASH_FILE="$PROJECT_ROOT/standalone/imghash/hbibl.bin.hash"
    SBE_SEEPROM_IMG=${PROJECT_ROOT}/standalone/simics/import/boot_roms/sbe_seeprom_p10.bin.ecc
    SBE_MEASUREMENT_IMG=${PROJECT_ROOT}/standalone/simics/import/boot_roms/sbe_measurement_p10.bin.ecc
    SBE_OTPROM_IMG=${PROJECT_ROOT}/standalone/simics/import/boot_roms/sbe_otprom_p10.bin
    SBE_SEEPROM_IMAGE_DD1=${PROJECT_ROOT}/src/build/tools/extern/ppe/images/sbe_seeprom_DD1.bin

    # Clone PPE repo to ${PROJECT_ROOT}/src/build/tools/extern/ppe
    # PPE is tracked as a git module
    (cd ${PROJECT_ROOT} && make ppe $1)

    if [[ ! -f ${PPE_DIR}/Makefile ]];then
        echo "Could not find PPE's Makefile."
        echo "Please run \"hb prime\" to clone PPE repo."
        exit 1
    fi

    if ! diff "$HBIBL_HASH_FILE" <(hash_file "$PROJECT_ROOT/img/hbibl.bin") &>/dev/null \
        || [ ! -f "$SBE_SEEPROM_IMG" ] \
        || [ ! -f "$SBE_MEASUREMENT_IMG" ] \
        || [ ! -f "$SBE_OTPROM_IMG" ] \
        || [ ! -f "$SBE_SEEPROM_IMAGE_DD1" ] \
        || [ $HB_FORCE_REBUILD_SBE ]
    then
        echo -e "\n\nGenerating SBE image..."

        cp ${PROJECT_ROOT}/standalone/pnor/hbbl.bin ${PPE_DIR}/src/tools/debug/hbbl.bin
        cd ${PPE_DIR}
        ./sb workon<<<'make install $1 && ./sb prime -m $PROJECT_ROOT/standalone/simics -b 1 && exit'
        hash_file "$PROJECT_ROOT/img/hbibl.bin" >"$HBIBL_HASH_FILE"
        cd ${PROJECT_ROOT}
    else
        echo 'SBE image is already up to date.'
    fi

    if [ ! -f "$SBE_SEEPROM_IMG" ] \
        || [ ! -f "$SBE_MEASUREMENT_IMG" ] \
        || [ ! -f "$SBE_OTPROM_IMG" ] \
        || [ ! -f "$SBE_SEEPROM_IMAGE_DD1" ]
    then
        echo "SBE build did not create one or more artifacts"
        echo "Check paths: $SBE_SEEPROM_IMG $SBE_MEASUREMENT_IMG $SBE_OTPROM_IMG $SBE_SEEPROM_IMAGE_DD1"
        exit 1
    fi
}

# Build the HCODE image inside the EKB repo
generate_hcode_image()
{
    EKB_DIR=${PROJECT_ROOT}/src/build/tools/extern/ekb
    HCODE_IMAGE=${EKB_DIR}/output/images/hw_image/p10.hw_image.bin

    if [[ "${HB_FAST_PRIME}" ]] && [[ -z $HB_FORCE_REBUILD_EKB ]]
    then
        export EKB_SUBREPO_TOP_COMMIT=$(git submodule status $EKB_DIR | awk '{print $1}' | sed 's/^-//')
        EKB_CACHE_DIR="${HOSTBOOT_ENVIRONMENT}/prime/ekb/release-fw1060/${EKB_SUBREPO_TOP_COMMIT}"
        if [ -d ${EKB_CACHE_DIR} ]; then
            echo "\n***Using default pre-built HCODE images\n"
            cp ${EKB_CACHE_DIR}/p10.hw_image.bin \
                ${PROJECT_ROOT}/standalone/staging/p10.hw_image.bin
            cp ${EKB_CACHE_DIR}/p10.hw_image_lid.bin \
                ${PROJECT_ROOT}/standalone/staging/p10.hw_image_lid.bin
            return 0
        else
            echo "${EKB_CACHE_DIR} DNE - generating EKB submodule image"
        fi
    fi

    # Clone EKB repo to ${PROJECT_ROOT}/src/build/tools/extern/ekb
    # EKB is tracked as a git module
    # This is skipped if user supplied an override image
    if [[ -z ${HCODE_OVERRIDE_IMAGE} ]]; then
        (cd ${PROJECT_ROOT} && make ekb $1)
    fi

    # Only [re]generate the HCODE image if the user hasn't asked us not to or
    # the HCODE image hasn't been built already.
    if [[ ! "$HB_SKIP_GEN_HCODE" || ! -f $HCODE_IMAGE || $HB_FORCE_REBUILD_EKB ]] ;
    then
        echo -e "\n\nGenerating HCODE image..."

        if [[ ! -f ${EKB_DIR}/ekb ]];then
            echo "Could not find ekb script in EKB repo."
            echo "Please run \"hb prime\" to clone EKB repo."
            exit 1
        fi

        cd ${EKB_DIR}
        CTEPATH=/afs/awd.austin.ibm.com/projects/cte \
               env -u ECMD_RELEASE \
               PROJECT_ROOT=${EKB_DIR} \
               ./ekb workon<<<'unset HOST_PREFIX && \
        git submodule update --init chips/p10/engd/p10 && \
        ./ekb build p10.hw_image && \
        exit'
        cd ${PROJECT_ROOT}
    else
        echo 'Skipping HCODE generation because HB_SKIP_GEN_HCODE is set.'
    fi

    cp "$HCODE_IMAGE" ${PROJECT_ROOT}/standalone/staging/p10.hw_image.bin
    cp "$HCODE_IMAGE" ${PROJECT_ROOT}/standalone/staging/p10.hw_image_lid.bin
}

FIRST_PARAM=$1
shift

BUILD_PARAMS=""

# Parse out arguments. Only looking for parallel jobs argument "-jN"
while [[ $# -gt 0 ]]
do
    case $1 in
        -j*)
            BUILD_PARAMS=$1
            shift
        ;;
    esac
done

# Calling script functions with BUILD_PARAMS
case ${FIRST_PARAM} in
    "--assembleSetup")
        assemble_setup $BUILD_PARAMS
    ;;
    "--simicsSetup")
        simics_setup
    ;;
    "--generateSbeImage")
        generate_sbe_image $BUILD_PARAMS
    ;;
    "--generateHcodeImage")
        generate_hcode_image
    ;;
    "--generateSbeOdysseyImages")
        generate_sbe_odyssey_images
    ;;
esac

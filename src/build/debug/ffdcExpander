#!/bin/sh
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/debug/ffdcExpander $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2013,2024
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG


###############################################################################
# @file ffdcExpander
#       This shell script takes a SYSDUMP file and extracts various debug elements.
#       The caller has the option to post artifacts to a defect.
#
#       The starting point for this script is at the end of the file.
###############################################################################


###############################################################################
# Some global variables
###############################################################################
FFDC_SCRIPT_NAME=$(basename "${0}")   # Cache the name of this script
FFDC_SCRIPT_DIR=$(dirname "${0}")     # Location of this script and supporting scripts
FFDC_SCRIPT_DIR="${FFDC_SCRIPT_DIR}/"
FFDC_SYSDUMP_FILE=""                  # format SYSDUMP.13020B8.20000001.20190725181300 (may have .tar/.gz)
FFDC_HB_DUMP_FILE=""                  # format SYSDUMP.13020B8.20000001.20190725181300-MDC.hbmem
FFDC_DRIVER_DIR=""                    # The directory where the driver is. Used to find debug data
FFDC_BUILD_RELEASE=""                 # format '1040', '1050', '1060', etc
FFDC_BUILD_TAG=""                     # format b0311a2412.1060 (FSP) or 1060.2402.20240115a (BMC)
FFDC_HB_IMAGE_DIR=""                  # Where the hostboot images and hbotStringFile is.
FFDC_HB_DUMP_DEBUG=""                 # Where the hb-dump-debug tool is.
FFDC_ERRL_PARSER=""                   # Where the errlparser tool is.
FFDC_CWD="`pwd -P`/"                  # The current working directory
FFDC_DEST_DIR="${FFDC_CWD}"           # The destination directory of artifacts, default to CWD
FFDC_RETURN_VALUE="0"                 # The return value. Default to success '0'
FFDC_TIME_STAMP=""                    # A time stamp is generated to make the files unique
FFDC_EXPANDER_LOG=""                  # A log file, the name will be the build tag.

###############################################################################
# Print the usage line
#
# @return 0 if successful, not 0 if a failure occurred
###############################################################################
function _ffdcUsage_()
{
    echo ""
    echo "    Usage: ${FFDC_SCRIPT_NAME} -s <SYSDUMP_FILE> | -h <HB_MEMORY_SYSDUMP_FILE> -b <BUILD_TAG>"
    echo "                               [ OPTIONS ]"
    echo ""
    echo "                        OPTIONS: [ -d <DEST_DIR> ] [ -t ]"
    echo "                                -t  attach a time stamp to the artifacts"
    echo "                                -i  directory that contains hostboot images, hbotStringFile, etc."
    echo "    Examples: ${FFDC_SCRIPT_NAME} -s SYSDUMP.139B0B0.20000001.20240116092023.gz"
    echo "              ${FFDC_SCRIPT_NAME} -s SYSDUMP.139B0B0.20000001.20240116092023.gz -i /path/to/my/images/"
    echo "              ${FFDC_SCRIPT_NAME} -h SYSDUMP.13ECFCX.20000001.20240307152945-MDC.hbmem -b b0724a_1931.922"
    echo "              ${FFDC_SCRIPT_NAME} -h SYSDUMP.13ECFCX.20000001.20240307152945-MDC.hbmem -b b0724a_1931.922 -i /path/to/my/images/"
    echo "              ${FFDC_SCRIPT_NAME} -s SYSDUMP.139B0B0.20000001.20240116092023.gz -d dir"
    echo ""
    return 0; # Return success
}

function _writeLog_()
{
    if [ -e "${FFDC_EXPANDER_LOG}" ]; then
        echo $1 >> ${FFDC_EXPANDER_LOG}
    else
        # Log file doesn't exist, just print to screen.
        echo "$1"
        return 1;
    fi
    return 0;
}

###############################################################################
# @brief Get the caller's options and validate them
#
# @param [in] $* - All of the caller's inputs after name of script
#
# @return 0 if successful, not 0 if a failure occurred
###############################################################################
function _getUserInputOptionsAndValidate_()
{
    # Default caller options
    CALLER_SYSDUMP_FILE=""
    CALLER_HB_DUMP_FILE=""
    CALLER_BUILD_TAG=""
    CALLER_IMG_DIR=""
    CALLER_DEST_DIR=""
    CALLER_REQUESTS_TIME_STAMP=""

    # Get caller's options
    FFDC_RETURN_VALUE="22" # Default to 'Invalid argument'
    MANDATORY_OPTION_CHOSEN="0"
    echo ""
    while getopts ts:h:b:d:i: option
    do
        if [ -n "${option}" ]; then
            FFDC_RETURN_VALUE="0";  # Found an argument
        fi
        case "${option}"
            in
            t) CALLER_REQUESTS_TIME_STAMP=1;;
            s) CALLER_SYSDUMP_FILE=${OPTARG}; MANDATORY_OPTION_CHOSEN="1";;
            h) CALLER_HB_DUMP_FILE=${OPTARG}; MANDATORY_OPTION_CHOSEN="1";;
            b) CALLER_BUILD_TAG=${OPTARG};;
            d) CALLER_DEST_DIR=${OPTARG};;
            i) CALLER_IMG_DIR=${OPTARG};;
           \?) FFDC_RETURN_VALUE=22;;
            :) FFDC_RETURN_VALUE=22;;
        esac
    done

    # If call to getopts not successful, then propagate error back
    if [ "$FFDC_RETURN_VALUE" != "0" ]; then
        _ffdcUsage_
        return $FFDC_RETURN_VALUE;
    fi

    # Check for a valid option chosen
    if [ "$MANDATORY_OPTION_CHOSEN" == "0" ]; then
        _ffdcUsage_
        return $FFDC_RETURN_VALUE;
    fi

    if [ -n "${CALLER_SYSDUMP_FILE}" ] && [ -n "${CALLER_BUILD_TAG}" ]; then
            echo "    ERROR: Incompatible options: Options -s and -b can't be used together."
            echo "                                 Build info is pulled from dump directly.";
            _ffdcUsage_
            return 22; # return 'Invalid argument'
    fi

    if [ -n "${CALLER_SYSDUMP_FILE}" ] && [ -n "${CALLER_HB_DUMP_FILE}" ]; then
            echo "    ERROR: Incompatible options: options -s and -h can't be used together";
            _ffdcUsage_
            return 22; # return 'Invalid argument'
    fi

    # Verify that if caller is passing in a HB dump file, they must supply the build tag
    if [ -n "${CALLER_HB_DUMP_FILE}" ] && [ -z "${CALLER_BUILD_TAG}" ]; then
            echo "    ERROR: Must supply a -b option with the -h option";
            _ffdcUsage_
            return 22; # return 'Invalid argument'
    fi

    if [ -z "${CALLER_HB_DUMP_FILE}" ] && [ -n "${CALLER_BUILD_TAG}" ]; then
            echo "    ERROR: Must supply a -h option with the -b option";
            _ffdcUsage_
            return 22; # return 'Invalid argument'
    fi

    #######################################################
    #                   Option -t
    #######################################################
    # If caller requests a time stamp, option -t, then oblige
    if [ "$CALLER_REQUESTS_TIME_STAMP" == "1" ]; then
        FFDC_TIME_STAMP=$(date '+%Y-%m-%d-%H%M')
        FFDC_TIME_STAMP="_${FFDC_TIME_STAMP}"
    fi

    #######################################################
    #                   Option -s
    #######################################################
    # If caller supplied a SYSDUMP file then confirm it exists
    if [ -n "${CALLER_SYSDUMP_FILE}" ]; then
         if [ ! -e "${CALLER_SYSDUMP_FILE}" ]; then
            echo "    SYSDUMP file (${CALLER_SYSDUMP_FILE}) not found";
            return 22; # return 'Invalid argument'
         fi

        # Save caller's SYSDUMP file
        FFDC_SYSDUMP_FILE="${CALLER_SYSDUMP_FILE}"

        ## Add an absolute path to the file, if not already an absolute path
        # Check the first character to see if starting with absolute path
        FIRST_CHAR="${FFDC_SYSDUMP_FILE:0:1}"
        # If first char not a '/' then append an absolute path
        if [ "${FIRST_CHAR}" != "/" ]; then
            FFDC_SYSDUMP_FILE="${FFDC_CWD}${FFDC_SYSDUMP_FILE}"
        fi
    fi # end if [ -n "${CALLER_SYSDUMP_FILE}" ]; then

    #######################################################
    #                   Option -i
    #######################################################
    # If caller supplied an img dir then confirm it exists
    if [ -n "${CALLER_IMG_DIR}" ]; then
         if [ ! -e "${CALLER_IMG_DIR}" ]; then
            echo "    Supplied img (${CALLER_IMG_DIR}) not found";
            return 22; # return 'Invalid argument'
         fi

        # Save caller's img dir, option -i
        FFDC_HB_IMAGE_DIR="${CALLER_IMG_DIR}"

        ## Add an absolute path to the file, if not already an absolute path
        # Check the first character to see if starting with absolute path
        FIRST_CHAR="${FFDC_HB_IMAGE_DIR:0:1}"
        # If first char not a '/' then append an absolute path
        if [ "${FIRST_CHAR}" != "/" ]; then
            FFDC_HB_IMAGE_DIR="${FFDC_CWD}${FFDC_HB_IMAGE_DIR}"
        fi

        # Make sure there is at least an hbotStringFile for traces.
        if [[ ! -e "${FFDC_HB_IMAGE_DIR}/hbotStringFile" ]]; then
            echo ""
            echo "    ERROR:  Could not find hbotStringFile in ${FFDC_HB_IMAGE_DIR}"
            echo ""
            return 2;  # Return 'No such file or directory'
        fi
        # If there is an hb-dump-debug present use that.
        if [[ -e "${FFDC_HB_IMAGE_DIR}/hb-dump-debug" ]]; then
            echo ""
            echo "    Using ${FFDC_HB_IMAGE_DIR}/hb-dump-debug"
            FFDC_HB_DUMP_FILE=${FFDC_HB_IMAGE_DIR}/hb-dump-debug
        fi
        # If there is an errlparser present use that.
        if [[ -e "${FFDC_HB_IMAGE_DIR}/errlparser" ]]; then
            echo ""
            echo "    Using errlparser tool: ${FFDC_HB_IMAGE_DIR}/errlparser"
            FFDC_ERRL_PARSER=${FFDC_HB_IMAGE_DIR}/errlparser
        fi
    fi # end if [ -n "${CALLER_IMG_DIR}" ]; then

    #######################################################
    #                   Option -h
    #######################################################
    # If caller supplied a HB dump file, option -h, then confirm it exists
    if [ -n "${CALLER_HB_DUMP_FILE}" ]; then
         if [ ! -e "${CALLER_HB_DUMP_FILE}" ]; then
            echo "    HB dump file (${CALLER_HB_DUMP_FILE}) not found";
            return 22; # return 'Invalid argument'
         fi

        # Save caller's HB dump file, option -h
        FFDC_HB_DUMP_FILE="${CALLER_HB_DUMP_FILE}"

        ## Add an absolute path to the HB dump file, if not already an absolute path
        # Check the first character to see if starting with absolute path
        FIRST_CHAR="${FFDC_HB_DUMP_FILE:0:1}"
        # If first char not a '/' then append an absolute path
        if [ "${FIRST_CHAR}" != "/" ]; then
            FFDC_HB_DUMP_FILE="${FFDC_CWD}${FFDC_HB_DUMP_FILE}"
        fi
    fi # end if [ -n "${CALLER_HB_DUMP_FILE}" ]; then

    #######################################################
    #                   Option -d
    #######################################################
    # If caller supplied a destination directory, option -d, then confirm it
    #  exists and determine if it is a relative path or absolute path
    if [ -n "${CALLER_DEST_DIR}" ]; then
         if [ ! -e "${CALLER_DEST_DIR}" ]; then
            echo "    Destination directory (${CALLER_DEST_DIR}) not found";
            while true; do
                echo ""
                read -p "    Do you wish to ceate it [Y/N] ? " yn
                case $yn in
                    [Yy] ) break;;
                    [Nn] ) echo "    exiting ..."; echo ""; return 22;; # return 'Invalid argument'
                    * ) echo "    Please answer [Y]es or [N]o.";;
                esac
            done

            mkdir -p ${CALLER_DEST_DIR}
            FFDC_RETURN_VALUE=$?
            if [ "$FFDC_RETURN_VALUE" != "0" ]; then
                echo ""
                return $FFDC_RETURN_VALUE;  # Propagate failure
            fi
            echo "    Destination directory (${CALLER_DEST_DIR}) created";
            echo ""
        fi

        # Save caller's destination directory option
        FFDC_DEST_DIR="$CALLER_DEST_DIR"
        NUM_CHARS=$((${#FFDC_DEST_DIR}-1))
        LAST_CHAR="${FFDC_DEST_DIR:$NUM_CHARS:1}"
        # If last char not a '/' then append a '/'
        if [ "${LAST_CHAR}" != "/" ]; then
            FFDC_DEST_DIR="${FFDC_DEST_DIR}/"
        fi

        ## Add an absolute path to the destination directory, if it is not
        ## already an absolute path.
        # Inspect the first character to determine path is absolute or not
        FIRST_CHAR="${FFDC_DEST_DIR:0:1}"
        # If first char not a '/' then append an absolute path
        if [ "${FIRST_CHAR}" != "/" ]; then
            FFDC_DEST_DIR="${FFDC_CWD}${FFDC_DEST_DIR}"
        fi
    fi # end if [ -n "${CALLER_DEST_DIR}" ]; then

    #######################################################
    #                   Option -b
    #######################################################
    # If caller supplied an build tag, option -b, then validate it
    # Note: Process this option after -d so that the caller's output directory is honored in _setDebugPaths_
    if [ -n "${CALLER_BUILD_TAG}" ]; then
        FFDC_BUILD_TAG=${CALLER_BUILD_TAG}
        _setDebugPaths_ ${FFDC_BUILD_TAG}
        FFDC_RETURN_VALUE=$?
        if [ "${FFDC_RETURN_VALUE}" != "0" ]; then
            echo "ERROR: Couldn't find debug data with: ${CALLER_BUILD_TAG}"
            echo "       Ensure build paths still exist for the requested driver or try another"
        fi
    fi  # end if [ -n "${CALLER_BUILD_TAG}" ]; then

    return 0;  # Return success
}

###############################################################################
# @brief Extract the HB system dump file from the SYSDUMP file
#
# @return 0 if successful, not 0 if a failure occurred
###############################################################################
function _extractHbSysDumpFile_()
{

    ## Extrapolate the HB dump file name from the SYSDUMP file
    # Remove any directories and only get the file name
    FFDC_HB_DUMP_FILE=$(basename ${FFDC_SYSDUMP_FILE})
    # Remove the .gz and .tar from the SYSDUMP, if they exist
    FFDC_HB_DUMP_FILE=$(echo ${FFDC_HB_DUMP_FILE} | sed "s/\.gz$//")
    FFDC_HB_DUMP_FILE=$(echo ${FFDC_HB_DUMP_FILE} | sed "s/\.tar$//")

    # The log file has which driver the dump is from which we need later
    FFDC_LOG_FILE=${FFDC_HB_DUMP_FILE}
    # Append '-MDC.console' to log file name
    FFDC_LOG_FILE+="-MDC.console"
    # Prepend the caller's directory
    FFDC_LOG_FILE="${FFDC_DEST_DIR}${FFDC_LOG_FILE}"

    # Append '-MDC.hbmem' to file
    FFDC_HB_DUMP_FILE+="-MDC.hbmem"
    # Prepend the caller's directory
    FFDC_HB_DUMP_FILE="${FFDC_DEST_DIR}${FFDC_HB_DUMP_FILE}"

    # Check if the HB dump file already exists, if so, ask caller if they wish
    # to overwrite it
    if [[ -e "${FFDC_HB_DUMP_FILE}" ]]; then
        echo ""
        echo "    HB system dump file (${FFDC_HB_DUMP_FILE}) already exists ..."
        while true; do
            echo ""
            read -p "    Do you wish to override the file and continue [Y/N] ? " yn
            case $yn in
                [Yy] ) break;;
                [Nn] ) echo "    Skipping call to ${FFDC_DUMP_PARSER} ..."; return 0;;
                * ) echo "    Please answer [Y]es or [N]o.";;
            esac
        done
    fi


    # These variables are required for makedump to function.
    export CTEPATH=/afs/awd.austin.ibm.com/projects/cte/
    export PYTHONPATH=$CTEPATH/tools/ecmd/rel/x86_64/python
    export LD_LIBRARY_PATH=$CTEPATH/tools/ecmd/rel/x86_64/lib
    . $CTEPATH/tools/ecmd/rel/bin/ecmdaliases.ksh

    FFDC_DUMP_PARSER=$CTEPATH/tools/crondump/dev/makedump
    # Verify that we can get to the dump parser script
    if [[ ! -e "${FFDC_DUMP_PARSER}" ]]; then
        echo ""
        echo "    ERROR:  Could not find parser ${FFDC_DUMP_PARSER}"
        echo ""
        return 2;  # Return 'No such file or directory'
    fi

    # Parse out the HB dump file using the dump parser
    echo ""
    echo "    ${FFDC_DUMP_PARSER} -f ${FFDC_SYSDUMP_FILE} --skip-arch -o ${FFDC_DEST_DIR}"
    ${FFDC_DUMP_PARSER} -f ${FFDC_SYSDUMP_FILE} --skip-arch -o ${FFDC_DEST_DIR};

    FFDC_RETURN_VALUE=$?
    if [ "${FFDC_RETURN_VALUE}" != "0" ]; then
        # check if the HB memory dump file exists, if it does just ignore the error and continue. We got what we wanted
        if [[ ! -e "${FFDC_HB_DUMP_FILE}" ]]; then
            echo ""
            return ${FFDC_RETURN_VALUE};  # Return failure
        fi
    fi

    # Extract the driver info from the SYSDUMP file.
    # For BMC builds there is some extra info that is cut from the front since it's not needed.
    # For FSP, cut does nothing
    FFDC_BUILD_TAG=$(grep "Driver is" ${FFDC_LOG_FILE}  | awk '{print $3}' | cut -d"-" -f3)

    _setDebugPaths_ $FFDC_BUILD_TAG
    FFDC_RETURN_VALUE=$?
    if [ "${FFDC_RETURN_VALUE}" != "0" ]; then
        # The most likely reason for an error from _setDebugPaths_ is the driver it was using to find
        # debug data was cleaned up and no longer exists.
        echo "ERROR: Couldn't find debug data from driver. Check the paths manually and"
        echo "       ask someone to restore it if necessary. If .hbmem was pulled from"
        echo "       the dump then choose another driver and re-run with the .hbmem file"
        return ${FFDC_RETURN_VALUE};  # Return failure
    fi

    echo "    Created file ${FFDC_HB_DUMP_FILE}"

    return 0;  # Return success
}

###############################################################################
# @brief Sets FFDC_DRIVER_DIR, FFDC_HB_IMAGE_DIR, and FFDC_HB_DUMP_DEBUG to the correct paths for
#        a given driver so the script can locate the necessary debug data. Also creates a log file
#        for the script to write useful information to.
#
# @param[in] $1 The driver level, either user supplied or retrieved from the makedump log.
#
# @return 0 if successful, not 0 if a failure occurred
###############################################################################
function _setDebugPaths_()
{
    build_tag=$1
    driver_images_dir=""

    # Save the build tag as a log file for the caller's benefit.
    FFDC_EXPANDER_LOG=${FFDC_DEST_DIR}${build_tag}-ffdcExpander${FFDC_TIME_STAMP}.log
    > ${FFDC_EXPANDER_LOG}
    _writeLog_ "Driver is: ${build_tag}"
    # FSP: b0226a2409.1050
    # BMC: 1060.2402.20240115a
    # Seen above, BMC and FSP build tags are different from each other. We are able to detect which service processor
    # this dump came from by examining the build tag. Simply detect how many '.' characters are in the tag.
    if [[ $build_tag = *"."*"."* ]]; then
        _writeLog_ "Build Type: BMC"
        FFDC_BUILD_RELEASE=$(echo $build_tag | cut -c 1-4 | awk '{print $1}')
        build_release="fw${FFDC_BUILD_RELEASE}"
        _writeLog_ "Build Release: $build_release"
        pnor_build=$(sed -n 's/pnor_build: //p' < /afs/rchland/projects/esw/$build_release/Builds/$build_tag/sbs-metadata/pnor_build_details.txt)
        _writeLog_ "PNOR Build: $pnor_build"

        if [ -z "$pnor_build" ]; then
            echo "ERROR: Could not find pnor build info with given package name:'$build_tag'"
            return 1
        fi

        pnor_release=$(sed -n 's/pnor_release: //p' < /afs/rchland/projects/esw/$build_release/Builds/$build_tag/sbs-metadata/pnor_build_details.txt)
        _writeLog_ "PNOR Release: $pnor_release"

        if [ -z "$pnor_release" ]; then
            echo "ERROR: Could not find pnor release info with given package name:'$build_tag'"
            return 1
        fi

        hb_commit_hash=$(sed -n -e 's/^.*hostboot-p10-//p' < /afs/rchland.ibm.com/projects/esw/$pnor_release/Builds/$pnor_build/logs/status.html | cut -d "/" -f 1 | head -n1)
        _writeLog_ "Hostboot commit for PNOR build: $hb_commit_hash"
        if [ -z "$hb_commit_hash" ]; then
            echo "ERROR: Could not find hostboot commit hash with given package name:'$build_tag'"
            return 1
        fi
        sys_type=${pnor_release:3}
        FFDC_DRIVER_DIR="/afs/rchland/projects/esw/$pnor_release/Builds/$pnor_build/op-build_savedOutput/$sys_type/ship/hostboot-p10-$hb_commit_hash"
        _writeLog_ "Driver Path: ${FFDC_DRIVER_DIR}"

        # Path to the images dir
        driver_images_dir=$FFDC_DRIVER_DIR/img
        # Don't override if set elsewhere
        if [ -z "${FFDC_HB_IMAGE_DIR}" ]; then
            FFDC_HB_IMAGE_DIR=${driver_images_dir}
            _writeLog_ "Images used: ${FFDC_HB_IMAGE_DIR}"
        fi
        # Don't override if set elsewhere
        if [ -z "${FFDC_HB_DUMP_DEBUG}" ]; then
            FFDC_HB_DUMP_DEBUG=$FFDC_DRIVER_DIR/src/build/debug/hb-dump-debug
            _writeLog_ "hb-dump-debug location: ${FFDC_HB_DUMP_DEBUG}"
        fi
    elif [[ $build_tag = *"."* ]]; then
        _writeLog_ "Build Type: FSP"

        FFDC_BUILD_RELEASE=$(echo $build_tag | cut -d"." -f 2)
        build_release="fips$FFDC_BUILD_RELEASE"
        _writeLog_ "Build Release: $build_release"

        FFDC_DRIVER_DIR="/esw/$build_release/Builds/$build_tag"
        _writeLog_ "Driver Path: ${FFDC_DRIVER_DIR}"

        driver_images_dir=${FFDC_DRIVER_DIR}/obj/x86.nfp/hbfw/simics
        # Don't override if set elsewhere
        if [ -z "${FFDC_HB_IMAGE_DIR}" ]; then
            FFDC_HB_IMAGE_DIR=${driver_images_dir}
            _writeLog_ "Images used: ${FFDC_HB_IMAGE_DIR}"
        fi
        # Don't override if set elsewhere
        if [ -z "${FFDC_HB_DUMP_DEBUG}" ]; then
            FFDC_HB_DUMP_DEBUG=${FFDC_DRIVER_DIR}/obj/x86.nfp/hbfw/simics/hb-dump-debug
            _writeLog_ "hb-dump-debug location: ${FFDC_HB_DUMP_DEBUG}"
        fi
    else
        echo "ERROR: Invalid driver detected: $build_tag"
        \rm ${FFDC_EXPANDER_LOG}
        return 1
    fi

    # The errlparser tool has to be in the same location as the image files otherwise
    # the Errl.pm tool will die. Since ffdcExpander needs to work for any P10 builds
    # we can't rely on that tool being updated since each build has it's own version
    # If there is an errlparser present use that.
    if [ -z "${FFDC_ERRL_PARSER}" ]; then
        # The errlparser has not been found yet. That means the caller didn't supply an
        # image path which includes one. Check if one exists in the build's image path
        if [[ ! -e "${driver_images_dir}/errlparser" ]]; then
            # Don't kill the script because of this since the user can get everything else out of this
            # dump.
            echo "ERROR: Could not find errlparser in ${driver_images_dir}"
            echo "WARNING: Error logs will not be parsed. Please provide an image dir with errlparser in it."
        else
            if [[ "$FFDC_HB_IMAGE_DIR" != $driver_images_dir ]]; then
                # Copy the errlparser tool into the img directory
                _writeLog_ "Copying errlparser from build..."
                \cp -v ${driver_images_dir}/errlparser ${FFDC_HB_IMAGE_DIR}/ | tee -a ${FFDC_EXPANDER_LOG}
            fi
            FFDC_ERRL_PARSER=${FFDC_HB_IMAGE_DIR}/errlparser
            echo ""
            echo "Using errlparser tool: ${FFDC_ERRL_PARSER}"
        fi
    fi

    return 0
}

###############################################################################
# @brief Set the path to the fsp-trace tool. This tool is required to parse Hostboot traces using
#        hbotStringFile, regardless of FSP or BMC based dump.
#
# @return 0
###############################################################################
function _setFSPTracePath_()
{
    FFDC_FSP_PATH="/esw/fips$FFDC_BUILD_RELEASE/Builds/built/images/nfs/x86.nfp/bin/"
    echo ""
    echo "    Using fsp-trace tool: ${FFDC_FSP_PATH}fsp-trace"
    PATH=${FFDC_FSP_PATH}:$PATH

    # Verify that we can get to the dump parser script
    if [[ ! -e "${FFDC_FSP_PATH}fsp-trace" ]]; then
        echo ""
        echo "    ERROR:  Could not find fsp-trace in ${FFDC_FSP_PATH}"
        echo ""
        return 2;  # Return 'No such file or directory'
    fi

    _writeLog_ "PATH=${FFDC_FSP_PATH}:\$PATH"

    return 0;  # Return success
}

###############################################################################
# @brief Extract various HB dump info
#
# @param [in] $1 The HB tools directory
# @param [in] $2 Path to the hb-dump-debug tools directory
###############################################################################
function _getInfoFromHBDump_()
{
    _setFSPTracePath_
    FFDC_RETURN_VALUE=$?
    # If call to _setFSPTracePath_ not successful, then propagate error back
    if [ "$FFDC_RETURN_VALUE" != "0" ]; then
        return $FFDC_RETURN_VALUE;
    fi
    if [[ ! -e "${FFDC_HB_DUMP_DEBUG}" ]]; then
        echo ""
        echo "    ERROR:  Could not find hb-dump-debug in ${FFDC_HB_DUMP_DEBUG}"
        echo ""
        return 2;  # Return 'No such file or directory'
    fi
    if [[ ! -e "${FFDC_HB_IMAGE_DIR}" ]]; then
        echo ""
        echo "    ERROR:  Could not find ${FFDC_HB_IMAGE_DIR}"
        echo ""
        return 2;  # Return 'No such file or directory'
    fi

    _writeLog_ "Dump File: ${FFDC_HB_DUMP_FILE}"
    _writeLog_ ""

    echo ""
    echo "    Extracting the Trace information from HB dump ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Trace --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}trace${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Trace --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}trace${FFDC_TIME_STAMP}

    echo ""
    echo "    Extracting the Printk information from HB dump ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Printk --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}printk${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Printk --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}printk${FFDC_TIME_STAMP}

    echo ""
    echo "    Extracting the Errl information (Component/PLID list) from HB dump ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Errl --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}errl${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Errl --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}errl${FFDC_TIME_STAMP}

    echo ""
    echo "    Extracting the Errl information (Detailed listing of all Error Logs) from HB dump ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Errl --tool-options='display=all' --file=${FFDC_HB_DUMP_FILE} >> ${FFDC_DEST_DIR}errl${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Errl --tool-options='display=all' --file=${FFDC_HB_DUMP_FILE} >> ${FFDC_DEST_DIR}errl${FFDC_TIME_STAMP}

    echo ""
    echo "    Extracting the Ps information from HB dump ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Ps --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}ps${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Ps --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}ps${FFDC_TIME_STAMP}

    echo ""
    echo "    Extracting the Ps information from HB dump with backtrace ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Ps --tool-options="with-backtrace" --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}ps_backtrace${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Ps --tool-options="with-backtrace" --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}ps_backtrace${FFDC_TIME_STAMP}

    echo ""
    echo "    Extracting the MemStats information from HB dump ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=Ps --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}memstats${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=MemStats --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}memstats${FFDC_TIME_STAMP}

    echo ""
    echo "    Extracting the PageMgr information from HB dump ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=PageMgr --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}pagemgr${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=PageMgr --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}pagemgr${FFDC_TIME_STAMP}

    echo ""
    echo "    Extracting the BlTrace information from HB dump ..."
    echo "    running: $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=BlTrace --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}bltrace${FFDC_TIME_STAMP}" | tee -a ${FFDC_EXPANDER_LOG}
    $FFDC_HB_DUMP_DEBUG --img-path=$FFDC_HB_IMAGE_DIR/ --tool=BlTrace --file=${FFDC_HB_DUMP_FILE} > ${FFDC_DEST_DIR}bltrace${FFDC_TIME_STAMP}
}

###############################################################################
# @brief The main. The real starting place of this script
#
# @return 0 if successful, not 0 if a failure occurred
###############################################################################
function ffdcExpanderMain()
{
    # Get user input options and validate
    _getUserInputOptionsAndValidate_ $*
    FFDC_RETURN_VALUE=$?
    # If call to _getUserInputOptionsAndValidate_ not successful, then propagate error back
    if [ "$FFDC_RETURN_VALUE" != "0" ]; then
        return $FFDC_RETURN_VALUE;
    fi

    # If caller supplied a SYSDUMP file then extract HB dump file
    if [ -n "${FFDC_SYSDUMP_FILE}" ]; then
        _extractHbSysDumpFile_ ${FFDC_SYSDUMP_FILE}
        FFDC_RETURN_VALUE=$?
    fi
    # If call to _extractHbSysDumpFile_ not successful, then propagate error back
    if [ "$FFDC_RETURN_VALUE" != "0" ]; then
        return $FFDC_RETURN_VALUE;
    fi

    # If caller supplied a HB dump file and a FSP build tag, then retrieve HB info
    if [ -n "${FFDC_HB_DUMP_FILE}" ] && [ -n "${FFDC_DRIVER_DIR}" ]; then

        _getInfoFromHBDump_
        FFDC_RETURN_VALUE=$?
    fi
    # If call to _getInfoFromHBDump_ not successful, then propagate error back
    if [ "$FFDC_RETURN_VALUE" != "0" ]; then
        return $FFDC_RETURN_VALUE;
    fi

    echo ""
    return 0;
}


###############################################################################
# @brief Call the main starting function, ffdcExpanderMain, the beginning point
#        of this script
#
# @return 0 if successful, not 0 if a failure occurred
###############################################################################

ffdcExpanderMain $*
exit $?;

# Note : Assumes these vars were setup in startup.simics
# $hb_masterproc : name of master proc chip object
# $vpo_compile : VPO mode or not
# $hb_multiproc : enable multiple processors
# $hb_skip_eecache : skip preloading eecache into PNOR
##

# Check for env var specifying profile mode
@simenv.hostboot_profile = 'HOSTBOOT_PROFILE' in os.environ

$hb_pnor = ""
$hb_pnor = (get-master-pnors)[0]

# Check if this is a standalone environment for DD1 simics. The "in os.environ" converts the simenv var to a bool
# if the specified env variable exists in the user's environment.
# NOTE: Only care that the variable is set in the environment. Doesn't matter if it's an empty string ""
#       or anything else. Existence of the var implies user wants DD1 simics. To revert back to default DD2
#       simics user must unset STANDALONE_TEST_DD1 in their environment.
@simenv.standalone_test_dd1 = 'STANDALONE_TEST_DD1' in os.environ

#New Simics flow can simply get the string from get-master-pnor command
if ($hb_pnor == NIL) {
    try {
        @simenv.hb_pnor = quiet_run_command("get-master-pnor")[0]
        @SIM_get_object(simenv.hb_pnor[0])
    } except {
        foreach $pnor in (list-objects -all BmcCmp) {
            $hb_pnor = ($pnor)
        }
        $hb_pnor = $hb_pnor+".sfc_master_mem"
    }
}
echo "Master PNOR is: "+$hb_pnor

###################################
#EEPROM Cache
###################################

# Skip any preloading if directed
if( $hb_skip_eecache == "1" ) {
    echo "Skipping load of EECACHE (HB_SKIP_EECACHE)"

} else if ($hostboot_profile == FALSE) {
# Read initial EEPROM data directly from hardware when code coverage is active
# to prevent mismatches between the SBE core scratch registers and what the
# pre-canned EECACHE data reports

    # Look for a custom pre-built copy first
    $found_custom_eecache = 0
    try {
        $eccPreload = (lookup-file "custom_eecache.bin")
        $found_custom_eecache = 1
    } except {
        $found_custom_eecache = 0
    }

    if( $vpo_compile == "1" ) {
        echo "    - Skipping EECACHE preload (VPO Mode)"
    } else {
        if( $found_custom_eecache == 1 ) {
            echo "    - Using custom eecache found in custom_eecache.bin"
        } else {
            if ($standalone_test_dd1 == TRUE) {
                $eccPreloadName = "eecache_prebuilt.bin.ecc"
            } else if ($machine_name == "bonito") {
                $eccPreloadName = "eecache_prebuilt_bonito.bin.ecc"
            } else {
                $eccPreloadName = "eecache_prebuilt_dd2.bin.ecc"
            }
            try {
                $eccPreload = (lookup-file $eccPreloadName)
            } except {
                echo "**** Unable to find "+$eccPreloadName+" - booting with blank EECACHE ****"
                $eccPreload = $eccPreloadName
            }
        }

        # NOTE must change offset if PNOR layout changes EECACHE offsets
        echo "    - Loading EECACHE "+$eccPreload+" at 0x2C000 in PNOR"
        try {
            ($hb_pnor).load-file $eccPreload 0x2C000
        } except {
            echo "**** Unable to load "+$eccPreload+" - booting with blank EECACHE ****"
        }

    }
}
###################################

###################################
#Attribute Overrides
###################################

# Look for a custom pre-built copy first
$found_custom_eecache = 0
try {
    $attrOverride = (lookup-file "attribute_override.bin")
    $found_attr_override = 1

    # NOTE must change offset if PNOR layout changes EECACHE offsets
    echo "    - Loading ATTR_TMP "+$attrOverride+" at 0x22E000 in PNOR"
    try {
        ($hb_pnor).load-file $attrOverride 0x22E000
    } except {
        echo "**** Unable to load "+$attrOverride+" - booting with blank ATTR_TMP ****"
    }
} except {
    echo "    - No attribute overrides found"
}
###################################

###################################
# Update scratch register 0 to let the SBE know which cores are good
###################################

# We are going to, for each processor:
# 1. Save the MVPD SEEPROM contents to a file
# 2. Use a python function (get_eq_pg_records) to parse out the EQ PG rows
# 3. Figure out which cores are functional in each EQ
# 4. Update scratch reg 1
# We only do this if code coverage is not enabled, because we rely on
# being able to use more backing caches for code coverage data.


# Read scratch register 1 to see if more cores were enabled for backing cache
$scratch1orig = (read-device-offset $hb_masterproc.cfam_cmp.fsi2host_mbox.pib_regs 0x380 4 -b)

if ($hostboot_profile == FALSE) {


  # Standalone has 1 DCM
  foreach $dcm in [0] {
    # Always 2 procs per DCM
    foreach $procnum in [0, 1] {
      # Read out the processor's measurement/mvpd/keystore SEEPROM (512Kb)
      (get-seeprom $dcm $procnum 2).save-file "meas_mvpd_ks_img.bin" 0 512*1024

      echo "*** calling get_eq_pg_records"
      # Get a list of the PG records for EQ chiplets
      @simenv.eq_pg = get_eq_pg_records("meas_mvpd_ks_img.bin")

      $pgmask = 0x00044100      # This is EC_R1_PG_MASK from pgLogic.C
      $scratch1 = 0             # Accumulator for scratch reg 1
      $scratch1bit = 0x80000000 # Loop iterator variable, shifted right 1 bit each loop

      # Loop through each EQ PG row
      foreach $pg in $eq_pg {
        # Loop through the 4 cores in each EQ row
        foreach $idx in [0, 1, 2, 3] {
          # All zeroes means the part is functional
          if (($pg & ($pgmask >> $idx)) == 0) {
            $scratch1 = $scratch1 | $scratch1bit
          }
          $scratch1bit = $scratch1bit >> 1
        }
      }

      # Invert the polarity of the scratch register (0 = functional)
      if ($scratch1orig == 0) {
           $scratch1 = (~$scratch1) & 0xFFFFFFFF
      } else {
           $scratch1 = (~$scratch1) & $scratch1orig
      }

      echo "PROC["+$procnum+"]: SBE Scratch Register 1 is set to "
      print -x $scratch1

      # Write value to SBE scratch register 1
      backplane0.dcm[$dcm].chip[$procnum].cfam_cmp.lbus_map.write 0x2800+0x38*4 $scratch1 4 -b
    }
  }
}

###################################

#################################
# Turn on all processor cec-chips
#################################
foreach $proc in (get-component-list -all proc_p10_pib) {
    foreach $cc in (list-objects component=$proc type=cec-chip -recursive) {
        @SIM_get_interface(SIM_get_object(simenv.cc), "signal").signal_raise()
    }
}

### Enable the second processor - @TODO-RTC:254475

# Connect up the missing cfams
try {connect backplane0.cnt_hfsi_link[1] backplane0.cnt_fsi_slave[0][1][1]} except {}

###############################
#Initialize Scratch Registers
###############################

# See src/include/usr/initservice/mboxRegs.H for scratch reg struct definitions

# Scratch register 8:  Set valid bits for Regs 3/4/6/9/10 (Bits 2/3/5/8/9) via
# a read/modify/write operation
$scratch8 = ((get-master-procs)[0].cfam_cmp.lbus_map.read 0x2800 + 0x3F*4 4 -b)
$scratch8 = ($scratch8 |0x34C00000)

# If we're not doing code coverage, then we have set scratch register
# 1 with PG-good cores
if ($hostboot_profile == FALSE) {
  # Set valid bit for register 1 (bit 0)
  $scratch8 = $scratch8 | 0x80000000
}

(get-master-procs)[0].cfam_cmp.lbus_map.write 0x2800 + 0x3F*4 $scratch8 4 -b

# Scratch3:  Set fwModeCtlFlags (0:31) - Read in, and set allowAttrOverrides (bit 7)
$scratch3 = (read-device-offset $hb_masterproc.cfam_cmp.fsi2host_mbox.pib_regs 0x2800 + 0x3A*4 4 -b)
$scratch3 = $scratch3 | 0x01000000
(get-master-procs)[0].cfam_cmp.lbus_map.write 0x2800 + 0x3A*4 $scratch3 4 -b

# Scratch4:  Set refSpiBusDivider (0:15) coreBootFreqMhz (16:31)
(get-master-procs)[0].cfam_cmp.lbus_map.write 0x2800 + 0x3B*4 0x00410000 4 -b

# Scratch6:  Set isMaster (Bit 24)
$scratch6 = (read-device-offset $hb_masterproc.cfam_cmp.fsi2host_mbox.pib_regs 0x3d0 8 -b)
$scratch6 = ($scratch6  | 0x00000080_00000000)
write-device-offset $hb_masterproc.cfam_cmp.fsi2host_mbox.pib_regs 0x3d0 $scratch6 8 -b


# Scratch9:
#   Set iohs<bucket>PllBucket (0:15) 4 bits/bucket :
#       FREQ_PAU_MHZ=2133=0x0855 (DD1)
#       FREQ_PAU_MHZ=2250=0x08CA (DD2)
#   Set mc<bucket>PllBucket (16:27) 3 bits/bucket : For DD1: FREQ_OMI_MHZ=21330->bucket2
#                                                   For DD2: FREQ_OMI_MHZ=25600->bucket0
#   (see p10_frequency_buckets.H for bucket values)
if ($standalone_test_dd1 == TRUE) {
    (get-master-procs)[0].cfam_cmp.lbus_map.write 0x2800 + 0x180*4 0x08554920 4 -b
} else {
    (get-master-procs)[0].cfam_cmp.lbus_map.write 0x2800 + 0x180*4 0x08CA0000 4 -b
}

# Scratch10: Set iohs<bucket>PllBucket (0:31) 4 bits/bucket
(get-master-procs)[0].cfam_cmp.lbus_map.write 0x2800 + 0x181*4 0x33333333 4 -b

#####

# Force the localbus to default to the PIB side
foreach $fsis in (list-objects -all fsi_slave_t3_v6) {
    $fsis->enforce_lbo = FALSE
}

if($fused_core == TRUE) {
echo "Configuring standalone model istep 3.17 fused core workaround"

# The goal of this logic is to pass an SBE check in istep 3.17 which
# ensures that the TP_OTP_SCOM_FUSED_CORE_MODE bit (bit 22) from the
# "PERV CONTROL 0" register (SCOM 0x5001A) is equal to the
# EXPORT_STATUS_TP_EX_FUSE_SMT8_CTYPE_EN_DC bit (bit 10) from the "Export
# regulation control" register (SCOM 0x10009).  In fused mode, both of these
# bits must be set.  The reason this is not needed in a combined simulation
# is that the BMC/FSP sets everything up correctly at the correct times.

# Set TP_OTP_SCOM_FUSED_CORE_MODE bit (bit 22) in the "SET function of PERV
# CONTROL 0" register (SCOM 0x5012A).  Doing so bitwise ORs that bit into the
# real "PERV CONTROL 0" register (SCOM 0x5001A), and when that register is
# written, SIMICS copies that register's TP_OTP_SCOM_FUSED_CORE_MODE bit to the
# EXPORT_STATUS_TP_EX_FUSE_SMT8_CTYPE_EN_DC bit (bit 10) of the "Export
# regulation control" register (SCOM 0x10009) so that SBE will read the fuse as
# requiring fused core mode.
write-device-offset $hb_masterproc.cfam_cmp.fsi2host_mbox.pib_regs 0x12a<<4 0x00000200_00000000 8 -b

# Then, set the TP_OTP_SCOM_FUSED_CORE_MODE bit (bit 22) in the "COPY PERV
# CONTROL COPY 0" register (SCOM 0x5011A).  This is required because at CBS
# start, which occurs -AFTER- standaone.simics runs, SIMICS copies this register
# wholesale into the "PERV CONTROL 0" register (SCOM 0x5001A), and we need
# the TP_OTP_SCOM_FUSED_CORE_MODE bit to have the same value as that of the
# EXPORT_STATUS_TP_EX_FUSE_SMT8_CTYPE_EN_DC bit from the "Export regulation
# control" register as discussed above, so that, in istep 3.17, SBE will
# see both bits equal and not fail the boot.
$pervControlCopy0 = (read-device-offset $hb_masterproc.cfam_cmp.fsi2host_mbox.pib_regs 0x11a<<4 8 -b)
$pervControlCopy0 = ($pervControlCopy0  | 0x00000200_00000000)
write-device-offset $hb_masterproc.cfam_cmp.fsi2host_mbox.pib_regs 0x11a<<4 $pervControlCopy0 8 -b
}

# Dynamic Code Execution is enabled by default in standalone
hb-enableDCE

# Save the output of the LPC console to a file.
(get-lpc-console)[0].capture-start hb_console.txt -overwrite

/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/ocmb/odyssey/procedures/hwp/memory/lib/phy/ody_draminit_utils.H $ */
/*                                                                        */
/* OpenPOWER HostBoot Project                                             */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2022,2024                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// EKB-Mirror-To: hostboot
///
/// @file ody_draminit_utils.H
/// @brief Odyssey PHY draminit utility functions
///
// *HWP HWP Owner: Stephen Glancy <sglancy@us.ibm.com>
// *HWP HWP Backup: Louis Stermole <stermole@us.ibm.com>
// *HWP Team: Memory
// *HWP Level: 2
// *HWP Consumed by: FSP:HB

#ifndef _ODY_DRAMINIT_UTILS_H_
#define _ODY_DRAMINIT_UTILS_H_

#include <fapi2.H>
#include <generic/memory/lib/utils/mss_generic_check.H>
#include <lib/shared/ody_consts.H>
#include <lib/dimm/ody_rank.H>
#include <lib/phy/ody_snps_dram_train_msg_blk.H>
#include <lib/utils/ody_bad_bits.H>
#include <hwp_data_stream.H>
#include <generic/memory/lib/generic_attribute_accessors_manual.H>
#include <mss_generic_attribute_getters.H>
#include <mss_generic_system_attribute_getters.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr0.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr2.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr3.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr4.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr5.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr6.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr8.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr10.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr11.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr12.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr13.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr14.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr15.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr111.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr32.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr32_per_dram.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr33.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr33_per_dram.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr34.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr35.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr37.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr38.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr39.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr50.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr51.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr52.H>
#include <generic/memory/lib/dimm/ddr5/ddr5_mr112.H>
#include <lib/workarounds/ody_phy_workarounds.H>

#ifdef __PPE__
    #include <ppe42_string.h>
#else
    #include <cstring>
#endif

namespace mss
{
namespace ody
{

///
/// @brief Check if we've selected to skip a step in a procedure using ATTR_ODY_DRAMINIT_STEP_ENABLE
/// @param[in] i_hwp_step enum from ATTR_ODY_DRAMINIT_STEP_ENABLE for the bit we're checking
/// @param[in] i_attr_val value of ATTR_ODY_DRAMINIT_STEP_ENABLE
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
inline bool skip_this_step(const uint8_t i_hwp_step,
                           const uint8_t i_attr_val)
{
    // Sanity check that i_hwp_step doesn't overflow (just return false - don't skip)
    if (i_hwp_step >= BITS_PER_BYTE)
    {
        return false;
    }

    const uint8_t l_step_mask = 0x80 >> i_hwp_step;

    return ((i_attr_val & l_step_mask) == 0x00);
}

namespace phy
{

///
/// @brief SPD to PHY nibble swizzle is implemented in the getBits indexing
/// @param[in] i_nibble_enables nibble enable attr value
/// @param[out] o_byte_disables DQ byte disable bits
/// @return FAPI2_RC_SUCCESS iff okay
///
fapi2::ReturnCode nibble_enable_db_disable(const fapi2::buffer<uint32_t>& i_nibble_enables,
        uint8_t(&o_byte_disables)[10]);

constexpr uint8_t NUM_RCW = 0x80;
constexpr uint8_t NUM_SUPPORTED_RCW = 20;
constexpr uint8_t DIMM_NUMBER = 2;
constexpr uint8_t DIMM0 = 0;
constexpr uint8_t DIMM1 = 1;

#ifndef __PPE__
// Attribute getter FP type
typedef fapi2::ReturnCode (*rcw_attr_getter_ptr)(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint8_t& o_value);

// RCW getter methods
const static mss::pair<uint64_t, rcw_attr_getter_ptr>
get_rcw[NUM_SUPPORTED_RCW][mss::ddr5::mr::ATTR_NUM_CHANNELS][DIMM_NUMBER] =
{
    //RCW00
    {
        {
            {0x00, mss::attr::get_ddr5_rcw00_cha_d0},
            {0x00, mss::attr::get_ddr5_rcw00_cha_d1}
        },
        {
            {0x00, mss::attr::get_ddr5_rcw00_chb_d0},
            {0x00, mss::attr::get_ddr5_rcw00_chb_d1}
        }
    },
    //RCW01
    {
        {
            {0x01, mss::attr::get_ddr5_rcw01_cha_d0},
            {0x01, mss::attr::get_ddr5_rcw01_cha_d1}
        },
        {
            {0x01, mss::attr::get_ddr5_rcw01_chb_d0},
            {0x01, mss::attr::get_ddr5_rcw01_chb_d1}
        }
    },
    //RCW05
    {
        {
            {0x05, mss::attr::get_ddr5_rcw05_cha_d0},
            {0x05, mss::attr::get_ddr5_rcw05_cha_d1}
        },
        {
            {0x05, mss::attr::get_ddr5_rcw05_chb_d0},
            {0x05, mss::attr::get_ddr5_rcw05_chb_d1}
        }
    },
    //RCW08
    {
        {
            {0x08, mss::attr::get_ddr5_rcw08_cha_d0},
            {0x08, mss::attr::get_ddr5_rcw08_cha_d1}
        },
        {
            {0x08, mss::attr::get_ddr5_rcw08_chb_d0},
            {0x08, mss::attr::get_ddr5_rcw08_chb_d1}
        }
    },
    //RCW09
    {
        {
            {0x09, mss::attr::get_ddr5_rcw09_cha_d0},
            {0x09, mss::attr::get_ddr5_rcw09_cha_d1}
        },
        {
            {0x09, mss::attr::get_ddr5_rcw09_chb_d0},
            {0x09, mss::attr::get_ddr5_rcw09_chb_d1}
        }
    },
    //RCW0A
    {
        {
            {0x0A, mss::attr::get_ddr5_rcw0a_cha_d0},
            {0x0A, mss::attr::get_ddr5_rcw0a_cha_d1}
        },
        {
            {0x0A, mss::attr::get_ddr5_rcw0a_chb_d0},
            {0x0A, mss::attr::get_ddr5_rcw0a_chb_d1}
        }
    },
    //RCW0C
    {
        {
            {0x0C, mss::attr::get_ddr5_rcw0c_cha_d0},
            {0x0C, mss::attr::get_ddr5_rcw0c_cha_d1}
        },
        {
            {0x0C, mss::attr::get_ddr5_rcw0c_chb_d0},
            {0x0C, mss::attr::get_ddr5_rcw0c_chb_d1}
        }
    },
    //RCW0D
    {
        {
            {0x0D, mss::attr::get_ddr5_rcw0d_cha_d0},
            {0x0D, mss::attr::get_ddr5_rcw0d_cha_d1}
        },
        {
            {0x0D, mss::attr::get_ddr5_rcw0d_chb_d0},
            {0x0D, mss::attr::get_ddr5_rcw0d_chb_d1}
        }
    },
    //RCW0E
    {
        {
            {0x0E, mss::attr::get_ddr5_rcw0e_cha_d0},
            {0x0E, mss::attr::get_ddr5_rcw0e_cha_d1}
        },
        {
            {0x0E, mss::attr::get_ddr5_rcw0e_chb_d0},
            {0x0E, mss::attr::get_ddr5_rcw0e_chb_d1}
        }
    },
    //RCW0F
    {
        {
            {0x0F, mss::attr::get_ddr5_rcw0f_cha_d0},
            {0x0F, mss::attr::get_ddr5_rcw0f_cha_d1}
        },
        {
            {0x0F, mss::attr::get_ddr5_rcw0f_chb_d0},
            {0x0F, mss::attr::get_ddr5_rcw0f_chb_d1}
        }
    },
    //RCW40
    {
        {
            {0x40, mss::attr::get_ddr5_rcw40_cha_d0},
            {0x40, mss::attr::get_ddr5_rcw40_cha_d1}
        },
        {
            {0x40, mss::attr::get_ddr5_rcw40_chb_d0},
            {0x40, mss::attr::get_ddr5_rcw40_chb_d1}
        }
    },
    //RCW41
    {
        {
            {0x41, mss::attr::get_ddr5_rcw41_cha_d0},
            {0x41, mss::attr::get_ddr5_rcw41_cha_d1}
        },
        {
            {0x41, mss::attr::get_ddr5_rcw41_chb_d0},
            {0x41, mss::attr::get_ddr5_rcw41_chb_d1}
        }
    },
    //RCW42
    {
        {
            {0x42, mss::attr::get_ddr5_rcw42_cha_d0},
            {0x42, mss::attr::get_ddr5_rcw42_cha_d1}
        },
        {
            {0x42, mss::attr::get_ddr5_rcw42_chb_d0},
            {0x42, mss::attr::get_ddr5_rcw42_chb_d1}
        }
    },
    //RCW43
    {
        {
            {0x43, mss::attr::get_ddr5_rcw43_cha_d0},
            {0x43, mss::attr::get_ddr5_rcw43_cha_d1}
        },
        {
            {0x43, mss::attr::get_ddr5_rcw43_chb_d0},
            {0x43, mss::attr::get_ddr5_rcw43_chb_d1}
        }
    },
    //RCW44
    {
        {
            {0x44, mss::attr::get_ddr5_rcw44_cha_d0},
            {0x44, mss::attr::get_ddr5_rcw44_cha_d1}
        },
        {
            {0x44, mss::attr::get_ddr5_rcw44_chb_d0},
            {0x44, mss::attr::get_ddr5_rcw44_chb_d1}
        }
    },
    //RCW45
    {
        {
            {0x45, mss::attr::get_ddr5_rcw45_cha_d0},
            {0x45, mss::attr::get_ddr5_rcw45_cha_d1}
        },
        {
            {0x45, mss::attr::get_ddr5_rcw45_chb_d0},
            {0x45, mss::attr::get_ddr5_rcw45_chb_d1}
        }
    },
    //RCW46
    {
        {
            {0x46, mss::attr::get_ddr5_rcw46_cha_d0},
            {0x46, mss::attr::get_ddr5_rcw46_cha_d1}
        },
        {
            {0x46, mss::attr::get_ddr5_rcw46_chb_d0},
            {0x46, mss::attr::get_ddr5_rcw46_chb_d1}
        }
    },
    //RCW47
    {
        {
            {0x47, mss::attr::get_ddr5_rcw47_cha_d0},
            {0x47, mss::attr::get_ddr5_rcw47_cha_d1}
        },
        {
            {0x47, mss::attr::get_ddr5_rcw47_chb_d0},
            {0x47, mss::attr::get_ddr5_rcw47_chb_d1}
        }
    },
    //RCW48
    {
        {
            {0x48, mss::attr::get_ddr5_rcw48_cha_d0},
            {0x48, mss::attr::get_ddr5_rcw48_cha_d1}
        },
        {
            {0x48, mss::attr::get_ddr5_rcw48_chb_d0},
            {0x48, mss::attr::get_ddr5_rcw48_chb_d1}
        }
    },
    //RCW49
    {
        {
            {0x49, mss::attr::get_ddr5_rcw49_cha_d0},
            {0x49, mss::attr::get_ddr5_rcw49_cha_d1}
        },
        {
            {0x49, mss::attr::get_ddr5_rcw49_chb_d0},
            {0x49, mss::attr::get_ddr5_rcw49_chb_d1}
        }
    }
};
#endif

///
/// @class msg_block_vars
/// @brief Structure of attribute values used in the PHY message block
///
struct msg_block_vars
{
    uint8_t iv_AdvTrainOpt = 0;
    uint8_t iv_MsgMisc = 0;
    uint8_t iv_Pstate = 0;
    uint8_t iv_PllBypassEn = 0;
    uint64_t iv_DRAMFreq = 0;
    uint8_t iv_RCW05_next = 0;
    uint8_t iv_RCW06_next = 0;
    uint8_t iv_RXEN_ADJ = 0;
    uint8_t iv_RX2D_DFE_Misc = 0;
    uint8_t iv_PhyVref = 0;
    uint8_t iv_D5Misc = 0;
    uint8_t iv_WL_ADJ = 0;
    uint16_t iv_SequenceCtrl = 0;
    uint8_t iv_HdtCtrl = 0;
    uint8_t iv_PhyCfg = 0;
    uint8_t iv_DFIMRLMargin = 0;
    uint8_t iv_X16Present = 0;
    uint8_t iv_UseBroadcastMR = 0;
    uint8_t iv_D5Quickboot = 0;
    uint8_t iv_DisabledDbyte = 0;
    uint8_t iv_CATrainOpt = 0;
    uint8_t iv_TX2D_DFE_Misc = 0;
    uint8_t iv_RX2D_TrainOpt = 0;
    uint8_t iv_TX2D_TrainOpt = 0;
    uint8_t iv_Share2DVrefResult = 0;
    uint8_t iv_MRE_MIN_PULSE = 0;
    uint8_t iv_DWL_MIN_PULSE = 0;
    uint16_t iv_PhyConfigOverride = 0;
    uint8_t iv_EnabledDQsChA = 0;
    uint8_t iv_EnabledDQsChB = 0;
    uint8_t iv_CsPresentChA[mss::ody::MAX_DIMM_PER_PORT] = {0};
    uint8_t iv_CsPresentChB[mss::ody::MAX_DIMM_PER_PORT] = {0};
    uint8_t iv_MR0[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR2[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR3[mss::ody::MAX_RANK_PER_DIMM][mss::ody::MAX_NIBBLES_PER_PORT] = {};
    uint8_t iv_MR4[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR5[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR6[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR32[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR32_ORG[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR8[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR10[mss::ody::MAX_RANK_PER_DIMM][mss::ody::MAX_NIBBLES_PER_PORT] = {};
    uint8_t iv_MR11[mss::ody::MAX_RANK_PER_DIMM][mss::ody::MAX_NIBBLES_PER_PORT] = {};
    uint8_t iv_MR12[mss::ody::MAX_RANK_PER_DIMM][mss::ody::MAX_NIBBLES_PER_PORT] = {};
    uint8_t iv_MR13[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR14[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR15[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR111[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR33[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR33_ORG[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR33_per_dram[mss::ody::MAX_RANK_PER_DIMM][mss::ody::MAX_NIBBLES_PER_PORT] = {};
    uint8_t iv_MR34[mss::ody::MAX_RANK_PER_DIMM][mss::ddr5::mr::ATTR_NUM_CHANNELS] = {};
    uint8_t iv_MR35[mss::ody::MAX_RANK_PER_DIMM][mss::ddr5::mr::ATTR_NUM_CHANNELS] = {};
    uint8_t iv_MR37[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR38[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR39[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR50[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR51[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_MR52[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_DFE_GainBias[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_ReservedF6 = 0;
    uint8_t iv_ReservedF7 = 0;
    uint8_t iv_ReservedF8 = 0;
    uint8_t iv_ReservedF9 = 0;
    uint8_t iv_RD_RTT_PARK_attr[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_WR_RTT_PARK_attr[mss::ody::MAX_RANK_PER_DIMM] = {0};
    uint8_t iv_RD_RTT_PARK[mss::ody::MAX_RANK_PER_PHY] = {0};
    uint8_t iv_WR_RTT_PARK[mss::ody::MAX_RANK_PER_PHY] = {0};
    uint8_t iv_Reserved1E2 = 0;
    uint8_t iv_Reserved1E3 = 0;
    uint8_t iv_Reserved1E4 = 0;
    uint8_t iv_Reserved1E5 = 0;
    uint8_t iv_Reserved1E6 = 0;
    uint8_t iv_Reserved1E7 = 0;
    uint16_t iv_WL_ADJ_START = 0;
    uint16_t iv_WL_ADJ_END = 0;
    uint8_t iv_RCW[NUM_RCW][mss::ddr5::mr::ATTR_NUM_CHANNELS][DIMM_NUMBER] = {};
    uint32_t iv_nibbles_enables[mss::ody::MAX_DIMM_PER_PORT] = {0};
    uint8_t iv_DisabledDB[mss::ody::MAX_BYTES_PER_PORT][mss::ody::MAX_RANK_PER_DIMM] = {};
    uint8_t iv_VrefCS_Sweep_Min = 0;
    uint8_t iv_VrefCS_Sweep_Max = 0;
    uint8_t iv_VrefCA_Sweep_Min = 0;
    uint8_t iv_VrefCA_Sweep_Max = 0;
    uint8_t iv_MR32_per_dram[mss::ody::MAX_RANK_PER_DIMM][mss::ody::MAX_NIBBLES_PER_PORT] = {};
};

///
/// @brief Configures the sequence control based upon attributes and requested sequences
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_sequence_ctrl user requested sequence control attributes
/// @param[out] o_output the sequence control that this part can support
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
inline fapi2::ReturnCode SequenceCtrl_helper(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        const uint16_t i_sequence_ctrl,
        uint16_t& o_output)
{
    constexpr uint8_t RCD_CSCA = 1;
    constexpr uint8_t LRDIMM_TESTS_START = 2;
    constexpr uint8_t LRDIMM_TESTS_LEN = 4;
    // Note: naming fields after Synopsys's structure spec, and they count bits from right to left
    constexpr uint8_t RFU8 = 7;
    constexpr uint8_t RFU7 = 8;

    fapi2::buffer<uint16_t> l_buffer(i_sequence_ctrl);
    bool l_has_rcd = false;
    FAPI_TRY(mss::has_rcd(i_target, l_has_rcd));

    // Make sure Run RCD_CSCA is disabled for UDIMM
    if (!l_has_rcd)
    {
        l_buffer.clearBit<RCD_CSCA>();
    }

    // Force LRDIMM tests to be disabled
    l_buffer.clearBit<LRDIMM_TESTS_START, LRDIMM_TESTS_LEN>();

    // Force RFU tests to be disabled
    l_buffer.clearBit<RFU8>();
    l_buffer.clearBit<RFU7>();

    FAPI_INF_NO_SBE(TARGTIDFORMAT "Applying overrides to SequenceCtrl before:0x%04x after:0x%04x", GENTARGTID(i_target),
                    i_sequence_ctrl, l_buffer);

    o_output = l_buffer;

fapi_try_exit:
    return fapi2::current_err;
}

///
/// @class msg_block_params
/// @brief Provides storage and methods for setting up message block structure
/// @note Since this is a large class, here's a description of how it works:
///  constructor:
///   - read attributes into iv_msg_block_vars
///   - set up MR values in iv_msg_block_vars
///   - swizzle rank-based fields from port rank to phy rank
///  setup_<field> functions:
///   - force certain values required for RCD or non-RCD
///   - force certain values required for sim
///   - force RFU values as needed
///   - copy values from iv_msg_block_vars into PMU_SMB_DDR5U_1D_t struct
///
class msg_block_params
{
    private:

        fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT> iv_target;
        fapi2::Target<fapi2::TARGET_TYPE_DIMM> iv_dimm;
        msg_block_vars iv_msg_block_vars;
        std::vector<mss::rank::info<mss::mc_type::ODYSSEY>> iv_rank_infos;

    public:

        /// default constructor is deleted
        msg_block_params() = delete;

        ///
        /// @brief Constructor to fetch attributes
        ///
        /// @brief fetch the attributes and initialize it to the params
        /// @param[in] i_target the mem_port target
        /// @param[out] ReturnCode to report error in class construction
        ///
        msg_block_params(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                         fapi2::ReturnCode& o_rc):
            iv_target(i_target)
        {
            const auto l_dimms = mss::find_targets<fapi2::TARGET_TYPE_DIMM>(i_target);
            uint8_t l_dram_width[mss::ody::MAX_DIMM_PER_PORT] = {0};

            if (l_dimms.size() == 0)
            {
                FAPI_INF_NO_SBE(TARGTIDFORMAT " No DIMM targets found on port target. Skipping message block setup.", TARGTID);
                o_rc = fapi2::FAPI2_RC_SUCCESS;
                return;
            }

            iv_dimm = l_dimms[0];

            // Create MR data structs
            fapi2::ReturnCode l_rc = fapi2::FAPI2_RC_SUCCESS;
            const auto l_mr0 = mss::ddr5::mr0_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr2 = mss::ddr5::mr2_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr3 = mss::ddr5::mr3_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr4 = mss::ddr5::mr4_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr5 = mss::ddr5::mr5_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr6 = mss::ddr5::mr6_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr32 = mss::ddr5::mr32_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr32_per_dram = mss::ddr5::mr32_per_dram_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr8 = mss::ddr5::mr8_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr10 = mss::ddr5::mr10_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr11 = mss::ddr5::mr11_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr12 = mss::ddr5::mr12_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr13 = mss::ddr5::mr13_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr14 = mss::ddr5::mr14_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr15 = mss::ddr5::mr15_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr111 = mss::ddr5::mr111_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr33 = mss::ddr5::mr33_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr33_per_dram = mss::ddr5::mr33_per_dram_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr34 = mss::ddr5::mr34_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr35 = mss::ddr5::mr35_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr37 = mss::ddr5::mr37_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr38 = mss::ddr5::mr38_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr39 = mss::ddr5::mr39_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr50 = mss::ddr5::mr50_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr51 = mss::ddr5::mr51_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr52 = mss::ddr5::mr52_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);
            const auto l_mr112 = mss::ddr5::mr112_data<mss::mc_type::ODYSSEY>(iv_dimm, l_rc);

            FAPI_TRY(l_rc, TARGTIDFORMAT " Failed attribute access during MR setup", TARGTID);

            FAPI_TRY(mss::rank::ranks_on_port(i_target, iv_rank_infos));


            // Fetch attributes and populate the member variables
            // Note: doing this in field order to match PMU_SMB_DDR5U_1D_t definition

            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_ADV_TRAIN_OPT, i_target, iv_msg_block_vars.iv_AdvTrainOpt));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_MSG_MISC, i_target, iv_msg_block_vars.iv_MsgMisc));
            // Pstate is always zero for Odyssey
            iv_msg_block_vars.iv_Pstate = 0;
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PLL_BYPASS_EN, i_target, iv_msg_block_vars.iv_PllBypassEn));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_FREQ, i_target, iv_msg_block_vars.iv_DRAMFreq));

            // TODO: Zen:MST-1668 RCW05_next and RCW06_next: need to decide how to set these
            //FAPI_TRY(mss::attr::get_rcw05_next(i_target, iv_msg_block_vars.iv_RCW05_next));
            //FAPI_TRY(mss::attr::get_rcw06_next(i_target, iv_msg_block_vars.iv_RCW06_next));

            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_RXEN_ADJ, i_target, iv_msg_block_vars.iv_RXEN_ADJ));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_RX2D_DFE_MISC, i_target, iv_msg_block_vars.iv_RX2D_DFE_Misc));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_PHY_VREF_RD, i_target, iv_msg_block_vars.iv_PhyVref));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_D5MISC, i_target, iv_msg_block_vars.iv_D5Misc));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_WL_ADJ, i_target, iv_msg_block_vars.iv_WL_ADJ));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_SEQUENCE_CTRL, i_target, iv_msg_block_vars.iv_SequenceCtrl));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_DRAMINIT_VERBOSITY, i_target, iv_msg_block_vars.iv_HdtCtrl));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_CFG, i_target, iv_msg_block_vars.iv_PhyCfg));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_DFIMRL_MARGIN, i_target, iv_msg_block_vars.iv_DFIMRLMargin));
            // X16Present is always zero for Odyssey
            iv_msg_block_vars.iv_X16Present = 0;
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_USE_BROADCAST_MR, i_target, iv_msg_block_vars.iv_UseBroadcastMR));
            // D5Quickboot is always zero for Odyssey
            iv_msg_block_vars.iv_D5Quickboot = 0;
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_DISABLED_DBYTE, i_target, iv_msg_block_vars.iv_DisabledDbyte));
            FAPI_TRY(mss::attr::get_nibble_enables(i_target, iv_msg_block_vars.iv_nibbles_enables));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_CA_TRAIN_OPTIONS, i_target, iv_msg_block_vars.iv_CATrainOpt));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_TX2D_DFE_MISC, i_target, iv_msg_block_vars.iv_TX2D_DFE_Misc));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_RX2D_TRAIN_OPT, i_target, iv_msg_block_vars.iv_RX2D_TrainOpt));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_TX2D_TRAIN_OPT, i_target, iv_msg_block_vars.iv_TX2D_TrainOpt));
            // Share2DVrefResult, MRE_MIN_PULSE, and DWL_MIN_PULSE are always zero for Odyssey
            iv_msg_block_vars.iv_Share2DVrefResult = 0;
            iv_msg_block_vars.iv_MRE_MIN_PULSE = 0;
            iv_msg_block_vars.iv_DWL_MIN_PULSE = 0;
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_CONFIG_OVERRIDE, i_target, iv_msg_block_vars.iv_PhyConfigOverride));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_ENABLED_DQ_CHA, i_target, iv_msg_block_vars.iv_EnabledDQsChA));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_ENABLED_DQ_CHB, i_target, iv_msg_block_vars.iv_EnabledDQsChB));
            FAPI_TRY(mss::attr::get_dimm_ranks_configed(i_target, iv_msg_block_vars.iv_CsPresentChA));
            FAPI_TRY(mss::attr::get_dimm_ranks_configed(i_target, iv_msg_block_vars.iv_CsPresentChB));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_VREFCS_SWEEP_MIN, i_target, iv_msg_block_vars.iv_VrefCS_Sweep_Min));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_VREFCS_SWEEP_MAX, i_target, iv_msg_block_vars.iv_VrefCS_Sweep_Max));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_VREFCA_SWEEP_MIN, i_target, iv_msg_block_vars.iv_VrefCA_Sweep_Min));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_VREFCA_SWEEP_MAX, i_target, iv_msg_block_vars.iv_VrefCA_Sweep_Max));

            // Update the number of CS present based upon the number of DQ on each channel
            if(iv_msg_block_vars.iv_EnabledDQsChA == 0)
            {
                iv_msg_block_vars.iv_CsPresentChA[0] = 0;
                iv_msg_block_vars.iv_CsPresentChA[1] = 0;
            }

            if(iv_msg_block_vars.iv_EnabledDQsChB == 0)
            {
                iv_msg_block_vars.iv_CsPresentChB[0] = 0;
                iv_msg_block_vars.iv_CsPresentChB[1] = 0;
            }

            FAPI_TRY(mss::attr::get_dram_width(i_target, l_dram_width));
            FAPI_ASSERT((l_dram_width != 0),
                        fapi2::ODY_DRAMINIT_ZERO_DRAM_WIDTH()
                        .set_PORT_TARGET(i_target),
                        TARGTIDFORMAT " saw a zero value in ATTR_MEM_EFF_DRAM_WIDTH", TARGTID);

            for (const auto& l_rank_info : iv_rank_infos)
            {
                // TODO Zen:MST-1782 Create API to walk through DRAM/nibble indexes
                const uint8_t l_nibble_increment = (l_dram_width[0] / 4);
                const uint8_t l_max_drams = mss::ody::MAX_NIBBLES_PER_PORT / l_nibble_increment;
                const auto l_phy_rank = l_rank_info.get_phy_rank();

                FAPI_TRY(l_mr0.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR0[l_phy_rank]));
                FAPI_TRY(l_mr2.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR2[l_phy_rank]));
                FAPI_TRY(l_mr4.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR4[l_phy_rank]));
                FAPI_TRY(l_mr5.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR5[l_phy_rank]));
                FAPI_TRY(l_mr6.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR6[l_phy_rank]));
                FAPI_TRY(l_mr32.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR32[l_phy_rank]));
                FAPI_TRY(l_mr32.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR32_ORG[l_phy_rank], mss::ddr5::mr::STRAPB));
                FAPI_TRY(l_mr8.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR8[l_phy_rank]));
                FAPI_TRY(l_mr13.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR13[l_phy_rank]));
                FAPI_TRY(l_mr14.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR14[l_phy_rank]));
                FAPI_TRY(l_mr15.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR15[l_phy_rank]));
                FAPI_TRY(l_mr111.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR111[l_phy_rank]));
                FAPI_TRY(l_mr33.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR33[l_phy_rank]));
                FAPI_TRY(l_mr33.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR33_ORG[l_phy_rank], mss::ddr5::mr::STRAPB));
                // Running on DRAM0 for Channel A and DRAM10 for Channel B
                // Since these are the first DRAMS on each channel
                FAPI_TRY(l_mr34.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR34[l_phy_rank][mss::ddr5::mr::ATTR_CHANNEL_A],
                                              mss::ddr5::mr::ATTR_DRAM_CHA_SELECT));
                FAPI_TRY(l_mr34.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR34[l_phy_rank][mss::ddr5::mr::ATTR_CHANNEL_B],
                                              mss::ddr5::mr::ATTR_DRAM_CHB_SELECT));
                // Running on DRAM0 for Channel A and DRAM10 for Channel B
                // Since these are the first DRAMS on each channel
                FAPI_TRY(l_mr35.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR35[l_phy_rank][mss::ddr5::mr::ATTR_CHANNEL_A],
                                              mss::ddr5::mr::ATTR_DRAM_CHA_SELECT));
                FAPI_TRY(l_mr35.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR35[l_phy_rank][mss::ddr5::mr::ATTR_CHANNEL_B],
                                              mss::ddr5::mr::ATTR_DRAM_CHB_SELECT));
                FAPI_TRY(l_mr37.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR37[l_phy_rank]));
                FAPI_TRY(l_mr38.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR38[l_phy_rank]));
                FAPI_TRY(l_mr39.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR39[l_phy_rank]));
                FAPI_TRY(l_mr50.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR50[l_phy_rank]));
                FAPI_TRY(l_mr51.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR51[l_phy_rank]));
                FAPI_TRY(l_mr52.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR52[l_phy_rank]));
                FAPI_TRY(l_mr112.assemble_data(l_rank_info, iv_msg_block_vars.iv_DFE_GainBias[l_phy_rank]));

                // Get per-DRAM values
                for (uint8_t l_dram = 0, l_nibble_idx = 0; l_dram < l_max_drams; l_dram++, l_nibble_idx += l_nibble_increment)
                {
                    FAPI_TRY(l_mr3.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR3[l_phy_rank][l_nibble_idx], l_dram));
                    FAPI_TRY(l_mr10.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR10[l_phy_rank][l_nibble_idx], l_dram));
                    FAPI_TRY(l_mr11.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR11[l_phy_rank][l_nibble_idx], l_dram));
                    FAPI_TRY(l_mr12.assemble_data(l_rank_info, iv_msg_block_vars.iv_MR12[l_phy_rank][l_nibble_idx], l_dram));
                    FAPI_TRY(l_mr33_per_dram.assemble_data(l_rank_info,
                                                           iv_msg_block_vars.iv_MR33_per_dram[l_phy_rank][l_nibble_idx],
                                                           l_dram));
                    FAPI_TRY(l_mr32_per_dram.assemble_data(l_rank_info,
                                                           iv_msg_block_vars.iv_MR32_per_dram[l_phy_rank][l_nibble_idx],
                                                           l_dram));
                }
            }

            // Copies over ALL of the PHY ranks as needed
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR0));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR2));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR4));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR5));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR6));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR32));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR32_ORG));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR32_per_dram));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR8));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR13));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR14));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR15));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR111));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR33));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR33_ORG));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR33_per_dram));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR34));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR34));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR35));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR35));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR37));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR38));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR39));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR50));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR51));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR52));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_DFE_GainBias));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR3));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR10));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR11));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_MR12));

            // Reserved fields are always zero for Odyssey
            iv_msg_block_vars.iv_ReservedF6 = 0;
            iv_msg_block_vars.iv_ReservedF7 = 0;
            iv_msg_block_vars.iv_ReservedF8 = 0;
            iv_msg_block_vars.iv_ReservedF9 = 0;

            FAPI_TRY(mss::attr::get_ddr5_rtt_park_rd(iv_dimm, iv_msg_block_vars.iv_RD_RTT_PARK_attr));
            FAPI_TRY(mss::attr::get_ddr5_rtt_park_wr(iv_dimm, iv_msg_block_vars.iv_WR_RTT_PARK_attr));

            // Swizzle DRAM index from port rank to phy rank
            for (const auto& l_rank_info : iv_rank_infos)
            {
                const auto l_port_rank = l_rank_info.get_port_rank();
                const auto l_phy_rank = l_rank_info.get_phy_rank();

                iv_msg_block_vars.iv_RD_RTT_PARK[l_phy_rank] = iv_msg_block_vars.iv_RD_RTT_PARK_attr[l_port_rank];
                iv_msg_block_vars.iv_WR_RTT_PARK[l_phy_rank] = iv_msg_block_vars.iv_WR_RTT_PARK_attr[l_port_rank];
            }

            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_RD_RTT_PARK));
            FAPI_TRY(mss::ody::phy::workarounds::clone_redundant_cs_data(i_target, iv_msg_block_vars.iv_WR_RTT_PARK));

            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_CA_DFE_TRAIN_OPTIONS, i_target, iv_msg_block_vars.iv_Reserved1E2));
            // Reserved fields are always zero for Odyssey
            iv_msg_block_vars.iv_Reserved1E3 = 0;
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_ODY_PHY_DEBUG_TRAIN_OPTIONS, i_target, iv_msg_block_vars.iv_Reserved1E4));
            // Reserved fields are always zero for Odyssey
            iv_msg_block_vars.iv_Reserved1E5 = 0;
            iv_msg_block_vars.iv_Reserved1E6 = 0;
            iv_msg_block_vars.iv_Reserved1E7 = 0;
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_WL_ADJ_START, i_target, iv_msg_block_vars.iv_WL_ADJ_START));
            FAPI_TRY(FAPI_ATTR_GET(fapi2::ATTR_MEM_EFF_DDR5_WL_ADJ_END, i_target, iv_msg_block_vars.iv_WL_ADJ_END));

            // Initialize the RCW to zeros
            memset(iv_msg_block_vars.iv_RCW, 0, sizeof(iv_msg_block_vars.iv_RCW));
#ifndef __PPE__

            // Get the supported RCW attr values
            for(uint8_t l_getter_index = 0; l_getter_index < NUM_SUPPORTED_RCW; l_getter_index++)
            {
                for(uint8_t l_channel = 0; l_channel < mss::ddr5::mr::ATTR_NUM_CHANNELS; l_channel++)
                {
                    for(uint8_t l_dimm = 0; l_dimm < DIMM_NUMBER; l_dimm++)
                    {
                        const uint64_t l_rcw_id = get_rcw[l_getter_index][l_channel][l_dimm].first;
                        FAPI_TRY(get_rcw[l_getter_index][l_channel][l_dimm].second(i_target,
                                 iv_msg_block_vars.iv_RCW[l_rcw_id][l_channel][l_dimm]));
                    }
                }
            }

#endif

        fapi_try_exit:
            o_rc = fapi2::current_err;
        }

        ///
        /// @brief default copy assignment operator
        ///
        msg_block_params& operator= (const msg_block_params&) = default;

        ///
        /// @brief default copy constructor
        ///
        msg_block_params(const msg_block_params&) = default;

        ///
        /// @brief default move assignment operator
        ///
        msg_block_params& operator= (msg_block_params&&) = default;

        ///
        /// @brief default move constructor
        ///
        msg_block_params(msg_block_params&&) = default;

        ///
        /// @brief default dtor
        ///
        ~msg_block_params() = default;

        ///
        /// @brief msg_block_params structure setup for parameter AdvTrainOpt
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_AdvTrainOpt(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.AdvTrainOpt = iv_msg_block_vars.iv_AdvTrainOpt;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter MsgMisc
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MsgMisc(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MsgMisc = iv_msg_block_vars.iv_MsgMisc;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter Pstate
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_Pstate(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.Pstate = iv_msg_block_vars.iv_Pstate;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter PllBypassEn
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_PllBypassEn(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.PllBypassEn = iv_msg_block_vars.iv_PllBypassEn;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter DRAMFreq
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_DRAMFreq(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.DRAMFreq = static_cast<uint16_t>(iv_msg_block_vars.iv_DRAMFreq);

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter RCW05_next
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_RCW05_next(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.RCW05_next = iv_msg_block_vars.iv_RCW05_next;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter RCW06_next
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_RCW06_next(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.RCW06_next = iv_msg_block_vars.iv_RCW06_next;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter RXEN_ADJ
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_RXEN_ADJ(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.RXEN_ADJ = iv_msg_block_vars.iv_RXEN_ADJ;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter RX2D_DFE_Misc
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_RX2D_DFE_Misc(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.RX2D_DFE_Misc = iv_msg_block_vars.iv_RX2D_DFE_Misc;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter PhyVref
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_PhyVref(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.PhyVref = iv_msg_block_vars.iv_PhyVref;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter D5Misc
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_D5Misc(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            fapi2::buffer<uint8_t> l_buffer(iv_msg_block_vars.iv_D5Misc);
            uint8_t l_redundant_cs_en = 0;
            constexpr uint8_t PARTIAL_RANK_OPTION = 6;

            // Note: naming fields after Synopsys's structure spec, and they count bits from right to left
            constexpr uint8_t RFU5 = 2;

            FAPI_TRY(mss::attr::get_ddr5_redundant_cs_en(iv_dimm, l_redundant_cs_en))

            // Update D5Misc[1] depending on redundant CS mode
            l_buffer.writeBit<PARTIAL_RANK_OPTION>(l_redundant_cs_en == fapi2::ENUM_ATTR_MEM_EFF_REDUNDANT_CS_EN_ENABLE);

            // Force RFU bit to be disabled
            l_buffer.clearBit<RFU5>();

            io_msg_block.D5Misc = l_buffer;

            FAPI_INF_NO_SBE(TARGTIDFORMAT "Applying overrides to D5Misc before:0x%02x after:0x%02x", GENTARGTID(iv_target),
                            iv_msg_block_vars.iv_D5Misc, l_buffer);


        fapi_try_exit:
            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter WL_ADJ
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_WL_ADJ(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.WL_ADJ = iv_msg_block_vars.iv_WL_ADJ;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter SequenceCtrl
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_SequenceCtrl(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            uint16_t l_temp = 0;
            FAPI_TRY(SequenceCtrl_helper(iv_target, iv_msg_block_vars.iv_SequenceCtrl, l_temp));

            io_msg_block.SequenceCtrl = l_temp;
        fapi_try_exit:
            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter HdtCtrl
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_HdtCtrl(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.HdtCtrl = iv_msg_block_vars.iv_HdtCtrl;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter PhyCfg
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_PhyCfg(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.PhyCfg = iv_msg_block_vars.iv_PhyCfg;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter DFIMRLMargin
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_DFIMRLMargin(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.DFIMRLMargin = iv_msg_block_vars.iv_DFIMRLMargin;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter X16Present
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_X16Present(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.X16Present = iv_msg_block_vars.iv_X16Present;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter UseBroadcastMR
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_UseBroadcastMR(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.UseBroadcastMR = iv_msg_block_vars.iv_UseBroadcastMR;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter D5Quickboot
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_D5Quickboot(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.D5Quickboot = iv_msg_block_vars.iv_D5Quickboot;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter DisabledDbyte
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_DisabledDbyte(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.DisabledDbyte = iv_msg_block_vars.iv_DisabledDbyte;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter CATrainOpt
        /// @param[in] i_sim value of ATTR_IS_SIMULATION
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_CATrainOpt(const uint8_t i_sim,
                                           PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Note: naming fields after Synopsys's structure spec, and they count bits from right to left
            constexpr uint8_t RFU6 = 1;
            constexpr uint8_t CA13_TRAIN_SKIP = 3;
            constexpr uint8_t CSCA_TRAINING_STEP_SIZE = 4;
            constexpr uint8_t CSCA_TRAINING_STEP_SIZE_LEN = 2;
            constexpr uint8_t CA_DFE_TRAINING = 6;
            constexpr uint8_t CA_2D_TRAINING = 7;

            fapi2::buffer<uint8_t> l_buffer(iv_msg_block_vars.iv_CATrainOpt);

            bool l_has_rcd = false;
            uint16_t l_stack_height = 0;
            uint8_t l_density = 0;

            FAPI_TRY(mss::has_rcd(iv_target, l_has_rcd));
            FAPI_TRY(mss::attr::get_3ds_height(iv_dimm, l_stack_height));
            FAPI_TRY(mss::attr::get_dram_density(iv_dimm, l_density));

            // Make sure RDIMM-only training options are disabled for UDIMM
            if (!l_has_rcd)
            {
                l_buffer.clearBit<CA_DFE_TRAINING>()
                .clearBit<CA_2D_TRAINING>();
            }

            // Set max step size for CS and CA training for sim
            if (i_sim)
            {
                l_buffer.setBit<CSCA_TRAINING_STEP_SIZE, CSCA_TRAINING_STEP_SIZE_LEN>();
            }

            // Disable the reserved bit
            l_buffer.clearBit<RFU6>();

            // We want to run CA13 training if we're an 8H stack or greater OR if the DRAM density is 64Gb or greater
            // Skip if we're less than an 8H stack and we're less than a 64Gb
            l_buffer.writeBit<CA13_TRAIN_SKIP>(l_stack_height < fapi2::ENUM_ATTR_MEM_3DS_HEIGHT_H8
                                               && l_density < fapi2::ENUM_ATTR_MEM_EFF_DRAM_DENSITY_64G);

            FAPI_INF_NO_SBE(TARGTIDFORMAT "Applying overrides to CATrainOpt before:0x%04x after:0x%04x", GENTARGTID(iv_target),
                            iv_msg_block_vars.iv_CATrainOpt, l_buffer);

            io_msg_block.CATrainOpt = l_buffer;

        fapi_try_exit:
            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter TX2D_DFE_Misc
        /// @param[in] i_sim value of ATTR_IS_SIMULATION
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_TX2D_DFE_Misc(const uint8_t i_sim,
                                              PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            constexpr uint8_t DSTEP_SIZE_X = 0;
            constexpr uint8_t DSTEP_SIZE_X_LEN = 2;
            constexpr uint8_t VSTEP_SIZE_X = 2;
            constexpr uint8_t VSTEP_SIZE_X_LEN = 2;
            constexpr uint8_t TAP_BIAS_STEP = 4;
            constexpr uint8_t TAP_BIAS_STEP_LEN = 2;
            constexpr uint8_t NB_TAP_M1 = 6;
            constexpr uint8_t NB_TAP_M1_LEN = 2;

            fapi2::buffer<uint8_t> l_buffer(iv_msg_block_vars.iv_TX2D_DFE_Misc);

            // Set min NbTAP to train for sim
            // Set max step size for voltage and delay training for sim
            if (i_sim)
            {
                l_buffer.clearBit<NB_TAP_M1, NB_TAP_M1_LEN>()
                .setBit<TAP_BIAS_STEP, TAP_BIAS_STEP_LEN>()
                .setBit<DSTEP_SIZE_X, DSTEP_SIZE_X_LEN>()
                .setBit<VSTEP_SIZE_X, VSTEP_SIZE_X_LEN>();
            }

            io_msg_block.TX2D_DFE_Misc = l_buffer;

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter RX2D_TrainOpt
        /// @param[in] i_sim value of ATTR_IS_SIMULATION
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_RX2D_TrainOpt(const uint8_t i_sim,
                                              PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Note: naming fields after Synopsys's structure spec, and they count bits from right to left
            constexpr uint8_t RFU7 = 0;
            constexpr uint8_t DELAY_STEP_SIZE = 3;
            constexpr uint8_t DELAY_STEP_SIZE_LEN = 2;
            constexpr uint8_t VOLTAGE_STEP_SIZE = 5;
            constexpr uint8_t VOLTAGE_STEP_SIZE_LEN = 2;
            constexpr uint8_t RX2D_DFE = 7;

            fapi2::buffer<uint8_t> l_buffer(iv_msg_block_vars.iv_RX2D_TrainOpt);

            // Set min NbTAP to train for sim
            // Set max step size for voltage and delay training for sim
            if (i_sim)
            {
                l_buffer.clearBit<RX2D_DFE>()
                .setBit<DELAY_STEP_SIZE, DELAY_STEP_SIZE_LEN>()
                .setBit<VOLTAGE_STEP_SIZE, VOLTAGE_STEP_SIZE_LEN>();
            }

            // Disable the reserved bit
            l_buffer.clearBit<RFU7>();

            io_msg_block.RX2D_TrainOpt = l_buffer;

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter TX2D_TrainOpt
        /// @param[in] i_sim value of ATTR_IS_SIMULATION
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_TX2D_TrainOpt(const uint8_t i_sim,
                                              PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Note: naming fields after Synopsys's structure spec, and they count bits from right to left
            constexpr uint8_t RFU7 = 0;
            constexpr uint8_t DELAY_STEP_SIZE = 3;
            constexpr uint8_t DELAY_STEP_SIZE_LEN = 2;
            constexpr uint8_t VOLTAGE_STEP_SIZE = 5;
            constexpr uint8_t VOLTAGE_STEP_SIZE_LEN = 2;
            constexpr uint8_t TX2D_DFE = 7;

            fapi2::buffer<uint8_t> l_buffer(iv_msg_block_vars.iv_TX2D_TrainOpt);

            // Set min NbTAP to train for sim
            // Set max step size for voltage and delay training for sim
            if (i_sim)
            {
                l_buffer.clearBit<TX2D_DFE>()
                .setBit<DELAY_STEP_SIZE, DELAY_STEP_SIZE_LEN>()
                .setBit<VOLTAGE_STEP_SIZE, VOLTAGE_STEP_SIZE_LEN>();
            }

            // Disable the reserved bit
            l_buffer.clearBit<RFU7>();

            io_msg_block.TX2D_TrainOpt = l_buffer;

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter Share2DVrefResult
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_Share2DVrefResult(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.Share2DVrefResult = iv_msg_block_vars.iv_Share2DVrefResult;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter MRE_MIN_PULSE
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MRE_MIN_PULSE(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MRE_MIN_PULSE = iv_msg_block_vars.iv_MRE_MIN_PULSE;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter DWL_MIN_PULSE
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_DWL_MIN_PULSE(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.DWL_MIN_PULSE = iv_msg_block_vars.iv_DWL_MIN_PULSE;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter PhyConfigOverride
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_PhyConfigOverride(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.PhyConfigOverride = iv_msg_block_vars.iv_PhyConfigOverride;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter EnabledDQsChA
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_EnabledDQsChA(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.EnabledDQsChA = iv_msg_block_vars.iv_EnabledDQsChA;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter EnabledDQsChB
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_EnabledDQsChB(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.EnabledDQsChB = iv_msg_block_vars.iv_EnabledDQsChB;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter CsPresentChA
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_CsPresentChA(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            fapi2::buffer<uint8_t> l_ranks_configed_buf(iv_msg_block_vars.iv_CsPresentChA[0]);

            l_ranks_configed_buf.reverse();

            io_msg_block.CsPresentChA = l_ranks_configed_buf;

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter CsPresentChB
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_CsPresentChB(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            fapi2::buffer<uint8_t> l_ranks_configed_buf(iv_msg_block_vars.iv_CsPresentChB[0]);

            l_ranks_configed_buf.reverse();

            io_msg_block.CsPresentChB = l_ranks_configed_buf;

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR0_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR0(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR0_A0 = iv_msg_block_vars.iv_MR0[0];
            io_msg_block.MR0_A1 = iv_msg_block_vars.iv_MR0[1];
            io_msg_block.MR0_A2 = iv_msg_block_vars.iv_MR0[2];
            io_msg_block.MR0_A3 = iv_msg_block_vars.iv_MR0[3];
            io_msg_block.MR0_B0 = iv_msg_block_vars.iv_MR0[0];
            io_msg_block.MR0_B1 = iv_msg_block_vars.iv_MR0[1];
            io_msg_block.MR0_B2 = iv_msg_block_vars.iv_MR0[2];
            io_msg_block.MR0_B3 = iv_msg_block_vars.iv_MR0[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR2_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR2(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR2_A0 = iv_msg_block_vars.iv_MR2[0];
            io_msg_block.MR2_A1 = iv_msg_block_vars.iv_MR2[1];
            io_msg_block.MR2_A2 = iv_msg_block_vars.iv_MR2[2];
            io_msg_block.MR2_A3 = iv_msg_block_vars.iv_MR2[3];
            io_msg_block.MR2_B0 = iv_msg_block_vars.iv_MR2[0];
            io_msg_block.MR2_B1 = iv_msg_block_vars.iv_MR2[1];
            io_msg_block.MR2_B2 = iv_msg_block_vars.iv_MR2[2];
            io_msg_block.MR2_B3 = iv_msg_block_vars.iv_MR2[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR3_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR3(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR3_A0 = iv_msg_block_vars.iv_MR3[0][0];
            io_msg_block.MR3_A1 = iv_msg_block_vars.iv_MR3[1][0];
            io_msg_block.MR3_A2 = iv_msg_block_vars.iv_MR3[2][0];
            io_msg_block.MR3_A3 = iv_msg_block_vars.iv_MR3[3][0];
            io_msg_block.MR3_B0 = iv_msg_block_vars.iv_MR3[0][0];
            io_msg_block.MR3_B1 = iv_msg_block_vars.iv_MR3[1][0];
            io_msg_block.MR3_B2 = iv_msg_block_vars.iv_MR3[2][0];
            io_msg_block.MR3_B3 = iv_msg_block_vars.iv_MR3[3][0];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR4_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR4(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR4_A0 = iv_msg_block_vars.iv_MR4[0];
            io_msg_block.MR4_A1 = iv_msg_block_vars.iv_MR4[1];
            io_msg_block.MR4_A2 = iv_msg_block_vars.iv_MR4[2];
            io_msg_block.MR4_A3 = iv_msg_block_vars.iv_MR4[3];
            io_msg_block.MR4_B0 = iv_msg_block_vars.iv_MR4[0];
            io_msg_block.MR4_B1 = iv_msg_block_vars.iv_MR4[1];
            io_msg_block.MR4_B2 = iv_msg_block_vars.iv_MR4[2];
            io_msg_block.MR4_B3 = iv_msg_block_vars.iv_MR4[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR5_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR5(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR5_A0 = iv_msg_block_vars.iv_MR5[0];
            io_msg_block.MR5_A1 = iv_msg_block_vars.iv_MR5[1];
            io_msg_block.MR5_A2 = iv_msg_block_vars.iv_MR5[2];
            io_msg_block.MR5_A3 = iv_msg_block_vars.iv_MR5[3];
            io_msg_block.MR5_B0 = iv_msg_block_vars.iv_MR5[0];
            io_msg_block.MR5_B1 = iv_msg_block_vars.iv_MR5[1];
            io_msg_block.MR5_B2 = iv_msg_block_vars.iv_MR5[2];
            io_msg_block.MR5_B3 = iv_msg_block_vars.iv_MR5[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR6_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR6(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR6_A0 = iv_msg_block_vars.iv_MR6[0];
            io_msg_block.MR6_A1 = iv_msg_block_vars.iv_MR6[1];
            io_msg_block.MR6_A2 = iv_msg_block_vars.iv_MR6[2];
            io_msg_block.MR6_A3 = iv_msg_block_vars.iv_MR6[3];
            io_msg_block.MR6_B0 = iv_msg_block_vars.iv_MR6[0];
            io_msg_block.MR6_B1 = iv_msg_block_vars.iv_MR6[1];
            io_msg_block.MR6_B2 = iv_msg_block_vars.iv_MR6[2];
            io_msg_block.MR6_B3 = iv_msg_block_vars.iv_MR6[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR8_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR8(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR8_A0 = iv_msg_block_vars.iv_MR8[0];
            io_msg_block.MR8_A1 = iv_msg_block_vars.iv_MR8[1];
            io_msg_block.MR8_A2 = iv_msg_block_vars.iv_MR8[2];
            io_msg_block.MR8_A3 = iv_msg_block_vars.iv_MR8[3];
            io_msg_block.MR8_B0 = iv_msg_block_vars.iv_MR8[0];
            io_msg_block.MR8_B1 = iv_msg_block_vars.iv_MR8[1];
            io_msg_block.MR8_B2 = iv_msg_block_vars.iv_MR8[2];
            io_msg_block.MR8_B3 = iv_msg_block_vars.iv_MR8[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR10_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR10(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR10_A0 = iv_msg_block_vars.iv_MR10[0][0];
            io_msg_block.MR10_A1 = iv_msg_block_vars.iv_MR10[1][0];
            io_msg_block.MR10_A2 = iv_msg_block_vars.iv_MR10[2][0];
            io_msg_block.MR10_A3 = iv_msg_block_vars.iv_MR10[3][0];
            io_msg_block.MR10_B0 = iv_msg_block_vars.iv_MR10[0][0];
            io_msg_block.MR10_B1 = iv_msg_block_vars.iv_MR10[1][0];
            io_msg_block.MR10_B2 = iv_msg_block_vars.iv_MR10[2][0];
            io_msg_block.MR10_B3 = iv_msg_block_vars.iv_MR10[3][0];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR11_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR11(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR11_A0 = iv_msg_block_vars.iv_MR11[0][0];
            io_msg_block.MR11_A1 = iv_msg_block_vars.iv_MR11[1][0];
            io_msg_block.MR11_A2 = iv_msg_block_vars.iv_MR11[2][0];
            io_msg_block.MR11_A3 = iv_msg_block_vars.iv_MR11[3][0];
            io_msg_block.MR11_B0 = iv_msg_block_vars.iv_MR11[0][0];
            io_msg_block.MR11_B1 = iv_msg_block_vars.iv_MR11[1][0];
            io_msg_block.MR11_B2 = iv_msg_block_vars.iv_MR11[2][0];
            io_msg_block.MR11_B3 = iv_msg_block_vars.iv_MR11[3][0];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR12_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR12(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR12_A0 = iv_msg_block_vars.iv_MR12[0][0];
            io_msg_block.MR12_A1 = iv_msg_block_vars.iv_MR12[1][0];
            io_msg_block.MR12_A2 = iv_msg_block_vars.iv_MR12[2][0];
            io_msg_block.MR12_A3 = iv_msg_block_vars.iv_MR12[3][0];
            io_msg_block.MR12_B0 = iv_msg_block_vars.iv_MR12[0][0];
            io_msg_block.MR12_B1 = iv_msg_block_vars.iv_MR12[1][0];
            io_msg_block.MR12_B2 = iv_msg_block_vars.iv_MR12[2][0];
            io_msg_block.MR12_B3 = iv_msg_block_vars.iv_MR12[3][0];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR13_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR13(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR13_A0 = iv_msg_block_vars.iv_MR13[0];
            io_msg_block.MR13_A1 = iv_msg_block_vars.iv_MR13[1];
            io_msg_block.MR13_A2 = iv_msg_block_vars.iv_MR13[2];
            io_msg_block.MR13_A3 = iv_msg_block_vars.iv_MR13[3];
            io_msg_block.MR13_B0 = iv_msg_block_vars.iv_MR13[0];
            io_msg_block.MR13_B1 = iv_msg_block_vars.iv_MR13[1];
            io_msg_block.MR13_B2 = iv_msg_block_vars.iv_MR13[2];
            io_msg_block.MR13_B3 = iv_msg_block_vars.iv_MR13[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR14_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR14(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR14_A0 = iv_msg_block_vars.iv_MR14[0];
            io_msg_block.MR14_A1 = iv_msg_block_vars.iv_MR14[1];
            io_msg_block.MR14_A2 = iv_msg_block_vars.iv_MR14[2];
            io_msg_block.MR14_A3 = iv_msg_block_vars.iv_MR14[3];
            io_msg_block.MR14_B0 = iv_msg_block_vars.iv_MR14[0];
            io_msg_block.MR14_B1 = iv_msg_block_vars.iv_MR14[1];
            io_msg_block.MR14_B2 = iv_msg_block_vars.iv_MR14[2];
            io_msg_block.MR14_B3 = iv_msg_block_vars.iv_MR14[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR15_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR15(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR15_A0 = iv_msg_block_vars.iv_MR15[0];
            io_msg_block.MR15_A1 = iv_msg_block_vars.iv_MR15[1];
            io_msg_block.MR15_A2 = iv_msg_block_vars.iv_MR15[2];
            io_msg_block.MR15_A3 = iv_msg_block_vars.iv_MR15[3];
            io_msg_block.MR15_B0 = iv_msg_block_vars.iv_MR15[0];
            io_msg_block.MR15_B1 = iv_msg_block_vars.iv_MR15[1];
            io_msg_block.MR15_B2 = iv_msg_block_vars.iv_MR15[2];
            io_msg_block.MR15_B3 = iv_msg_block_vars.iv_MR15[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR111_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR111(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR111_A0 = iv_msg_block_vars.iv_MR111[0];
            io_msg_block.MR111_A1 = iv_msg_block_vars.iv_MR111[1];
            io_msg_block.MR111_A2 = iv_msg_block_vars.iv_MR111[2];
            io_msg_block.MR111_A3 = iv_msg_block_vars.iv_MR111[3];
            io_msg_block.MR111_B0 = iv_msg_block_vars.iv_MR111[0];
            io_msg_block.MR111_B1 = iv_msg_block_vars.iv_MR111[1];
            io_msg_block.MR111_B2 = iv_msg_block_vars.iv_MR111[2];
            io_msg_block.MR111_B3 = iv_msg_block_vars.iv_MR111[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR32_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR32(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR32_A0 = iv_msg_block_vars.iv_MR32[0];
            io_msg_block.MR32_A1 = iv_msg_block_vars.iv_MR32[1];
            io_msg_block.MR32_A2 = iv_msg_block_vars.iv_MR32[2];
            io_msg_block.MR32_A3 = iv_msg_block_vars.iv_MR32[3];
            io_msg_block.MR32_B0 = iv_msg_block_vars.iv_MR32[0];
            io_msg_block.MR32_B1 = iv_msg_block_vars.iv_MR32[1];
            io_msg_block.MR32_B2 = iv_msg_block_vars.iv_MR32[2];
            io_msg_block.MR32_B3 = iv_msg_block_vars.iv_MR32[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR33_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR33(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR33_A0 = iv_msg_block_vars.iv_MR33[0];
            io_msg_block.MR33_A1 = iv_msg_block_vars.iv_MR33[1];
            io_msg_block.MR33_A2 = iv_msg_block_vars.iv_MR33[2];
            io_msg_block.MR33_A3 = iv_msg_block_vars.iv_MR33[3];
            io_msg_block.MR33_B0 = iv_msg_block_vars.iv_MR33[0];
            io_msg_block.MR33_B1 = iv_msg_block_vars.iv_MR33[1];
            io_msg_block.MR33_B2 = iv_msg_block_vars.iv_MR33[2];
            io_msg_block.MR33_B3 = iv_msg_block_vars.iv_MR33[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR34_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR34(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR34_A0 = iv_msg_block_vars.iv_MR34[0][mss::ddr5::mr::ATTR_CHANNEL_A];
            io_msg_block.MR34_A1 = iv_msg_block_vars.iv_MR34[1][mss::ddr5::mr::ATTR_CHANNEL_A];
            io_msg_block.MR34_A2 = iv_msg_block_vars.iv_MR34[2][mss::ddr5::mr::ATTR_CHANNEL_A];
            io_msg_block.MR34_A3 = iv_msg_block_vars.iv_MR34[3][mss::ddr5::mr::ATTR_CHANNEL_A];
            io_msg_block.MR34_B0 = iv_msg_block_vars.iv_MR34[0][mss::ddr5::mr::ATTR_CHANNEL_B];
            io_msg_block.MR34_B1 = iv_msg_block_vars.iv_MR34[1][mss::ddr5::mr::ATTR_CHANNEL_B];
            io_msg_block.MR34_B2 = iv_msg_block_vars.iv_MR34[2][mss::ddr5::mr::ATTR_CHANNEL_B];
            io_msg_block.MR34_B3 = iv_msg_block_vars.iv_MR34[3][mss::ddr5::mr::ATTR_CHANNEL_B];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR35_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR35(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR35_A0 = iv_msg_block_vars.iv_MR35[0][mss::ddr5::mr::ATTR_CHANNEL_A];
            io_msg_block.MR35_A1 = iv_msg_block_vars.iv_MR35[1][mss::ddr5::mr::ATTR_CHANNEL_A];
            io_msg_block.MR35_A2 = iv_msg_block_vars.iv_MR35[2][mss::ddr5::mr::ATTR_CHANNEL_A];
            io_msg_block.MR35_A3 = iv_msg_block_vars.iv_MR35[3][mss::ddr5::mr::ATTR_CHANNEL_A];
            io_msg_block.MR35_B0 = iv_msg_block_vars.iv_MR35[0][mss::ddr5::mr::ATTR_CHANNEL_B];
            io_msg_block.MR35_B1 = iv_msg_block_vars.iv_MR35[1][mss::ddr5::mr::ATTR_CHANNEL_B];
            io_msg_block.MR35_B2 = iv_msg_block_vars.iv_MR35[2][mss::ddr5::mr::ATTR_CHANNEL_B];
            io_msg_block.MR35_B3 = iv_msg_block_vars.iv_MR35[3][mss::ddr5::mr::ATTR_CHANNEL_B];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR32_ORG_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR32_ORG(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR32_ORG_A0 = iv_msg_block_vars.iv_MR32_ORG[0];
            io_msg_block.MR32_ORG_A1 = iv_msg_block_vars.iv_MR32_ORG[1];
            io_msg_block.MR32_ORG_A2 = iv_msg_block_vars.iv_MR32_ORG[2];
            io_msg_block.MR32_ORG_A3 = iv_msg_block_vars.iv_MR32_ORG[3];
            io_msg_block.MR32_ORG_B0 = iv_msg_block_vars.iv_MR32_ORG[0];
            io_msg_block.MR32_ORG_B1 = iv_msg_block_vars.iv_MR32_ORG[1];
            io_msg_block.MR32_ORG_B2 = iv_msg_block_vars.iv_MR32_ORG[2];
            io_msg_block.MR32_ORG_B3 = iv_msg_block_vars.iv_MR32_ORG[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR37_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR37(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR37_A0 = iv_msg_block_vars.iv_MR37[0];
            io_msg_block.MR37_A1 = iv_msg_block_vars.iv_MR37[1];
            io_msg_block.MR37_A2 = iv_msg_block_vars.iv_MR37[2];
            io_msg_block.MR37_A3 = iv_msg_block_vars.iv_MR37[3];
            io_msg_block.MR37_B0 = iv_msg_block_vars.iv_MR37[0];
            io_msg_block.MR37_B1 = iv_msg_block_vars.iv_MR37[1];
            io_msg_block.MR37_B2 = iv_msg_block_vars.iv_MR37[2];
            io_msg_block.MR37_B3 = iv_msg_block_vars.iv_MR37[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR38_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR38(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR38_A0 = iv_msg_block_vars.iv_MR38[0];
            io_msg_block.MR38_A1 = iv_msg_block_vars.iv_MR38[1];
            io_msg_block.MR38_A2 = iv_msg_block_vars.iv_MR38[2];
            io_msg_block.MR38_A3 = iv_msg_block_vars.iv_MR38[3];
            io_msg_block.MR38_B0 = iv_msg_block_vars.iv_MR38[0];
            io_msg_block.MR38_B1 = iv_msg_block_vars.iv_MR38[1];
            io_msg_block.MR38_B2 = iv_msg_block_vars.iv_MR38[2];
            io_msg_block.MR38_B3 = iv_msg_block_vars.iv_MR38[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR39_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR39(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR39_A0 = iv_msg_block_vars.iv_MR39[0];
            io_msg_block.MR39_A1 = iv_msg_block_vars.iv_MR39[1];
            io_msg_block.MR39_A2 = iv_msg_block_vars.iv_MR39[2];
            io_msg_block.MR39_A3 = iv_msg_block_vars.iv_MR39[3];
            io_msg_block.MR39_B0 = iv_msg_block_vars.iv_MR39[0];
            io_msg_block.MR39_B1 = iv_msg_block_vars.iv_MR39[1];
            io_msg_block.MR39_B2 = iv_msg_block_vars.iv_MR39[2];
            io_msg_block.MR39_B3 = iv_msg_block_vars.iv_MR39[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR33_ORG_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR33_ORG(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR33_ORG_A0 = iv_msg_block_vars.iv_MR33_ORG[0];
            io_msg_block.MR33_ORG_A1 = iv_msg_block_vars.iv_MR33_ORG[1];
            io_msg_block.MR33_ORG_A2 = iv_msg_block_vars.iv_MR33_ORG[2];
            io_msg_block.MR33_ORG_A3 = iv_msg_block_vars.iv_MR33_ORG[3];
            io_msg_block.MR33_ORG_B0 = iv_msg_block_vars.iv_MR33_ORG[0];
            io_msg_block.MR33_ORG_B1 = iv_msg_block_vars.iv_MR33_ORG[1];
            io_msg_block.MR33_ORG_B2 = iv_msg_block_vars.iv_MR33_ORG[2];
            io_msg_block.MR33_ORG_B3 = iv_msg_block_vars.iv_MR33_ORG[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR50_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR50(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR50_A0 = iv_msg_block_vars.iv_MR50[0];
            io_msg_block.MR50_A1 = iv_msg_block_vars.iv_MR50[1];
            io_msg_block.MR50_A2 = iv_msg_block_vars.iv_MR50[2];
            io_msg_block.MR50_A3 = iv_msg_block_vars.iv_MR50[3];
            io_msg_block.MR50_B0 = iv_msg_block_vars.iv_MR50[0];
            io_msg_block.MR50_B1 = iv_msg_block_vars.iv_MR50[1];
            io_msg_block.MR50_B2 = iv_msg_block_vars.iv_MR50[2];
            io_msg_block.MR50_B3 = iv_msg_block_vars.iv_MR50[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR51_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR51(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR51_A0 = iv_msg_block_vars.iv_MR51[0];
            io_msg_block.MR51_A1 = iv_msg_block_vars.iv_MR51[1];
            io_msg_block.MR51_A2 = iv_msg_block_vars.iv_MR51[2];
            io_msg_block.MR51_A3 = iv_msg_block_vars.iv_MR51[3];
            io_msg_block.MR51_B0 = iv_msg_block_vars.iv_MR51[0];
            io_msg_block.MR51_B1 = iv_msg_block_vars.iv_MR51[1];
            io_msg_block.MR51_B2 = iv_msg_block_vars.iv_MR51[2];
            io_msg_block.MR51_B3 = iv_msg_block_vars.iv_MR51[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR52_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_MR52(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.MR52_A0 = iv_msg_block_vars.iv_MR52[0];
            io_msg_block.MR52_A1 = iv_msg_block_vars.iv_MR52[1];
            io_msg_block.MR52_A2 = iv_msg_block_vars.iv_MR52[2];
            io_msg_block.MR52_A3 = iv_msg_block_vars.iv_MR52[3];
            io_msg_block.MR52_B0 = iv_msg_block_vars.iv_MR52[0];
            io_msg_block.MR52_B1 = iv_msg_block_vars.iv_MR52[1];
            io_msg_block.MR52_B2 = iv_msg_block_vars.iv_MR52[2];
            io_msg_block.MR52_B3 = iv_msg_block_vars.iv_MR52[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameters DFE_GainBias_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_DFE_GainBias(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.DFE_GainBias_A0 = iv_msg_block_vars.iv_DFE_GainBias[0];
            io_msg_block.DFE_GainBias_A1 = iv_msg_block_vars.iv_DFE_GainBias[1];
            io_msg_block.DFE_GainBias_A2 = iv_msg_block_vars.iv_DFE_GainBias[2];
            io_msg_block.DFE_GainBias_A3 = iv_msg_block_vars.iv_DFE_GainBias[3];
            io_msg_block.DFE_GainBias_B0 = iv_msg_block_vars.iv_DFE_GainBias[0];
            io_msg_block.DFE_GainBias_B1 = iv_msg_block_vars.iv_DFE_GainBias[1];
            io_msg_block.DFE_GainBias_B2 = iv_msg_block_vars.iv_DFE_GainBias[2];
            io_msg_block.DFE_GainBias_B3 = iv_msg_block_vars.iv_DFE_GainBias[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter ReservedF6
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_ReservedF6(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Need to set ReservedF6[6] (counting right-to-left) to get per-DRAM CK/CS/CA ODT
            constexpr uint8_t PER_DRAM_ODT = 1;

            fapi2::buffer<uint8_t> l_buffer(iv_msg_block_vars.iv_ReservedF6);

            l_buffer.setBit<PER_DRAM_ODT>();

            io_msg_block.ReservedF6 = l_buffer;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter ReservedF7
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_ReservedF7(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.ReservedF7 = iv_msg_block_vars.iv_ReservedF7;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter ReservedF8
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_ReservedF8(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.ReservedF8 = iv_msg_block_vars.iv_ReservedF8;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter ReservedF9
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_ReservedF9(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.ReservedF9 = iv_msg_block_vars.iv_ReservedF9;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameters WR_RD_RTT_PARK_A/B[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_WR_RD_RTT_PARK(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            constexpr uint8_t RD_SHIFT = 4;

            io_msg_block.WR_RD_RTT_PARK_A0 = (iv_msg_block_vars.iv_RD_RTT_PARK[0] << RD_SHIFT) |
                                             iv_msg_block_vars.iv_WR_RTT_PARK[0];
            io_msg_block.WR_RD_RTT_PARK_A1 = (iv_msg_block_vars.iv_RD_RTT_PARK[1] << RD_SHIFT) |
                                             iv_msg_block_vars.iv_WR_RTT_PARK[1];
            io_msg_block.WR_RD_RTT_PARK_A2 = (iv_msg_block_vars.iv_RD_RTT_PARK[2] << RD_SHIFT) |
                                             iv_msg_block_vars.iv_WR_RTT_PARK[2];
            io_msg_block.WR_RD_RTT_PARK_A3 = (iv_msg_block_vars.iv_RD_RTT_PARK[3] << RD_SHIFT) |
                                             iv_msg_block_vars.iv_WR_RTT_PARK[3];
            io_msg_block.WR_RD_RTT_PARK_B0 = (iv_msg_block_vars.iv_RD_RTT_PARK[0] << RD_SHIFT) |
                                             iv_msg_block_vars.iv_WR_RTT_PARK[0];
            io_msg_block.WR_RD_RTT_PARK_B1 = (iv_msg_block_vars.iv_RD_RTT_PARK[1] << RD_SHIFT) |
                                             iv_msg_block_vars.iv_WR_RTT_PARK[1];
            io_msg_block.WR_RD_RTT_PARK_B2 = (iv_msg_block_vars.iv_RD_RTT_PARK[2] << RD_SHIFT) |
                                             iv_msg_block_vars.iv_WR_RTT_PARK[2];
            io_msg_block.WR_RD_RTT_PARK_B3 = (iv_msg_block_vars.iv_RD_RTT_PARK[3] << RD_SHIFT) |
                                             iv_msg_block_vars.iv_WR_RTT_PARK[3];

            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for parameter Reserved1E2
        /// @param[in] i_sim value of ATTR_IS_SIMULATION
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_Reserved1E2(const uint8_t i_sim,
                                            PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            constexpr uint8_t BIAS_STEP_SIZE = 4;
            constexpr uint8_t BIAS_STEP_SIZE_LEN = 2;

            fapi2::buffer<uint8_t> l_buffer(iv_msg_block_vars.iv_Reserved1E2);

            // Set max bias step size for sim
            if (i_sim)
            {
                l_buffer.setBit<BIAS_STEP_SIZE, BIAS_STEP_SIZE_LEN>();
            }

            io_msg_block.Reserved1E2 = l_buffer;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter Reserved1E3
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_Reserved1E3(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.Reserved1E3 = iv_msg_block_vars.iv_Reserved1E3;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter Reserved1E4
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_Reserved1E4(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.Reserved1E4 = iv_msg_block_vars.iv_Reserved1E4;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter Reserved1E5
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_Reserved1E5(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.Reserved1E5 = iv_msg_block_vars.iv_Reserved1E5;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter Reserved1E6
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_Reserved1E6(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.Reserved1E6 = iv_msg_block_vars.iv_Reserved1E6;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter Reserved1E7
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_Reserved1E7(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.Reserved1E7 = iv_msg_block_vars.iv_Reserved1E7;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter RCW[N]_CHA/B_D[DIMM]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_RCW(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.RCW00_ChA_D0 = iv_msg_block_vars.iv_RCW[0][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW01_ChA_D0 = iv_msg_block_vars.iv_RCW[1][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW02_ChA_D0 = iv_msg_block_vars.iv_RCW[2][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW03_ChA_D0 = iv_msg_block_vars.iv_RCW[3][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW04_ChA_D0 = iv_msg_block_vars.iv_RCW[4][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW05_ChA_D0 = iv_msg_block_vars.iv_RCW[5][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW06_ChA_D0 = iv_msg_block_vars.iv_RCW[6][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW07_ChA_D0 = iv_msg_block_vars.iv_RCW[7][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW08_ChA_D0 = iv_msg_block_vars.iv_RCW[8][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW09_ChA_D0 = iv_msg_block_vars.iv_RCW[9][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW0A_ChA_D0 = iv_msg_block_vars.iv_RCW[10][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW0B_ChA_D0 = iv_msg_block_vars.iv_RCW[11][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW0C_ChA_D0 = iv_msg_block_vars.iv_RCW[12][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW0D_ChA_D0 = iv_msg_block_vars.iv_RCW[13][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW0E_ChA_D0 = iv_msg_block_vars.iv_RCW[14][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW0F_ChA_D0 = iv_msg_block_vars.iv_RCW[15][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW10_ChA_D0 = iv_msg_block_vars.iv_RCW[16][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW11_ChA_D0 = iv_msg_block_vars.iv_RCW[17][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW12_ChA_D0 = iv_msg_block_vars.iv_RCW[18][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW13_ChA_D0 = iv_msg_block_vars.iv_RCW[19][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW14_ChA_D0 = iv_msg_block_vars.iv_RCW[20][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW15_ChA_D0 = iv_msg_block_vars.iv_RCW[21][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW16_ChA_D0 = iv_msg_block_vars.iv_RCW[22][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW17_ChA_D0 = iv_msg_block_vars.iv_RCW[23][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW18_ChA_D0 = iv_msg_block_vars.iv_RCW[24][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW19_ChA_D0 = iv_msg_block_vars.iv_RCW[25][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW1A_ChA_D0 = iv_msg_block_vars.iv_RCW[26][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW1B_ChA_D0 = iv_msg_block_vars.iv_RCW[27][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW1C_ChA_D0 = iv_msg_block_vars.iv_RCW[28][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW1D_ChA_D0 = iv_msg_block_vars.iv_RCW[29][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW1E_ChA_D0 = iv_msg_block_vars.iv_RCW[30][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW1F_ChA_D0 = iv_msg_block_vars.iv_RCW[31][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW20_ChA_D0 = iv_msg_block_vars.iv_RCW[32][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW21_ChA_D0 = iv_msg_block_vars.iv_RCW[33][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW22_ChA_D0 = iv_msg_block_vars.iv_RCW[34][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW23_ChA_D0 = iv_msg_block_vars.iv_RCW[35][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW24_ChA_D0 = iv_msg_block_vars.iv_RCW[36][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW25_ChA_D0 = iv_msg_block_vars.iv_RCW[37][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW26_ChA_D0 = iv_msg_block_vars.iv_RCW[38][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW27_ChA_D0 = iv_msg_block_vars.iv_RCW[39][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW28_ChA_D0 = iv_msg_block_vars.iv_RCW[40][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW29_ChA_D0 = iv_msg_block_vars.iv_RCW[41][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW2A_ChA_D0 = iv_msg_block_vars.iv_RCW[42][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW2B_ChA_D0 = iv_msg_block_vars.iv_RCW[43][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW2C_ChA_D0 = iv_msg_block_vars.iv_RCW[44][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW2D_ChA_D0 = iv_msg_block_vars.iv_RCW[45][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW2E_ChA_D0 = iv_msg_block_vars.iv_RCW[46][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW2F_ChA_D0 = iv_msg_block_vars.iv_RCW[47][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW30_ChA_D0 = iv_msg_block_vars.iv_RCW[48][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW31_ChA_D0 = iv_msg_block_vars.iv_RCW[49][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW32_ChA_D0 = iv_msg_block_vars.iv_RCW[50][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW33_ChA_D0 = iv_msg_block_vars.iv_RCW[51][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW34_ChA_D0 = iv_msg_block_vars.iv_RCW[52][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW35_ChA_D0 = iv_msg_block_vars.iv_RCW[53][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW36_ChA_D0 = iv_msg_block_vars.iv_RCW[54][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW37_ChA_D0 = iv_msg_block_vars.iv_RCW[55][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW38_ChA_D0 = iv_msg_block_vars.iv_RCW[56][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW39_ChA_D0 = iv_msg_block_vars.iv_RCW[57][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW3A_ChA_D0 = iv_msg_block_vars.iv_RCW[58][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW3B_ChA_D0 = iv_msg_block_vars.iv_RCW[59][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW3C_ChA_D0 = iv_msg_block_vars.iv_RCW[60][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW3D_ChA_D0 = iv_msg_block_vars.iv_RCW[61][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW3E_ChA_D0 = iv_msg_block_vars.iv_RCW[62][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW3F_ChA_D0 = iv_msg_block_vars.iv_RCW[63][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW40_ChA_D0 = iv_msg_block_vars.iv_RCW[64][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW41_ChA_D0 = iv_msg_block_vars.iv_RCW[65][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW42_ChA_D0 = iv_msg_block_vars.iv_RCW[66][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW43_ChA_D0 = iv_msg_block_vars.iv_RCW[67][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW44_ChA_D0 = iv_msg_block_vars.iv_RCW[68][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW45_ChA_D0 = iv_msg_block_vars.iv_RCW[69][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW46_ChA_D0 = iv_msg_block_vars.iv_RCW[70][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW47_ChA_D0 = iv_msg_block_vars.iv_RCW[71][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW48_ChA_D0 = iv_msg_block_vars.iv_RCW[72][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW49_ChA_D0 = iv_msg_block_vars.iv_RCW[73][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW4A_ChA_D0 = iv_msg_block_vars.iv_RCW[74][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW4B_ChA_D0 = iv_msg_block_vars.iv_RCW[75][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW4C_ChA_D0 = iv_msg_block_vars.iv_RCW[76][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW4D_ChA_D0 = iv_msg_block_vars.iv_RCW[77][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW4E_ChA_D0 = iv_msg_block_vars.iv_RCW[78][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW4F_ChA_D0 = iv_msg_block_vars.iv_RCW[79][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW50_ChA_D0 = iv_msg_block_vars.iv_RCW[80][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW51_ChA_D0 = iv_msg_block_vars.iv_RCW[81][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW52_ChA_D0 = iv_msg_block_vars.iv_RCW[82][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW53_ChA_D0 = iv_msg_block_vars.iv_RCW[83][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW54_ChA_D0 = iv_msg_block_vars.iv_RCW[84][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW55_ChA_D0 = iv_msg_block_vars.iv_RCW[85][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW56_ChA_D0 = iv_msg_block_vars.iv_RCW[86][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW57_ChA_D0 = iv_msg_block_vars.iv_RCW[87][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW58_ChA_D0 = iv_msg_block_vars.iv_RCW[88][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW59_ChA_D0 = iv_msg_block_vars.iv_RCW[89][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW5A_ChA_D0 = iv_msg_block_vars.iv_RCW[90][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW5B_ChA_D0 = iv_msg_block_vars.iv_RCW[91][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW5C_ChA_D0 = iv_msg_block_vars.iv_RCW[92][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW5D_ChA_D0 = iv_msg_block_vars.iv_RCW[93][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW5E_ChA_D0 = iv_msg_block_vars.iv_RCW[94][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW5F_ChA_D0 = iv_msg_block_vars.iv_RCW[95][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW60_ChA_D0 = iv_msg_block_vars.iv_RCW[96][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW61_ChA_D0 = iv_msg_block_vars.iv_RCW[97][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW62_ChA_D0 = iv_msg_block_vars.iv_RCW[98][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW63_ChA_D0 = iv_msg_block_vars.iv_RCW[99][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW64_ChA_D0 = iv_msg_block_vars.iv_RCW[100][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW65_ChA_D0 = iv_msg_block_vars.iv_RCW[101][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW66_ChA_D0 = iv_msg_block_vars.iv_RCW[102][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW67_ChA_D0 = iv_msg_block_vars.iv_RCW[103][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW68_ChA_D0 = iv_msg_block_vars.iv_RCW[104][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW69_ChA_D0 = iv_msg_block_vars.iv_RCW[105][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW6A_ChA_D0 = iv_msg_block_vars.iv_RCW[106][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW6B_ChA_D0 = iv_msg_block_vars.iv_RCW[107][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW6C_ChA_D0 = iv_msg_block_vars.iv_RCW[108][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW6D_ChA_D0 = iv_msg_block_vars.iv_RCW[109][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW6E_ChA_D0 = iv_msg_block_vars.iv_RCW[110][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW6F_ChA_D0 = iv_msg_block_vars.iv_RCW[111][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW70_ChA_D0 = iv_msg_block_vars.iv_RCW[112][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW71_ChA_D0 = iv_msg_block_vars.iv_RCW[113][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW72_ChA_D0 = iv_msg_block_vars.iv_RCW[114][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW73_ChA_D0 = iv_msg_block_vars.iv_RCW[115][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW74_ChA_D0 = iv_msg_block_vars.iv_RCW[116][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW75_ChA_D0 = iv_msg_block_vars.iv_RCW[117][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW76_ChA_D0 = iv_msg_block_vars.iv_RCW[118][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW77_ChA_D0 = iv_msg_block_vars.iv_RCW[119][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW78_ChA_D0 = iv_msg_block_vars.iv_RCW[120][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW79_ChA_D0 = iv_msg_block_vars.iv_RCW[121][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW7A_ChA_D0 = iv_msg_block_vars.iv_RCW[122][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW7B_ChA_D0 = iv_msg_block_vars.iv_RCW[123][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW7C_ChA_D0 = iv_msg_block_vars.iv_RCW[124][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW7D_ChA_D0 = iv_msg_block_vars.iv_RCW[125][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW7E_ChA_D0 = iv_msg_block_vars.iv_RCW[126][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];
            io_msg_block.RCW7F_ChA_D0 = iv_msg_block_vars.iv_RCW[127][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM0];

            io_msg_block.RCW00_ChB_D0 = iv_msg_block_vars.iv_RCW[0][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW01_ChB_D0 = iv_msg_block_vars.iv_RCW[1][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW02_ChB_D0 = iv_msg_block_vars.iv_RCW[2][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW03_ChB_D0 = iv_msg_block_vars.iv_RCW[3][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW04_ChB_D0 = iv_msg_block_vars.iv_RCW[4][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW05_ChB_D0 = iv_msg_block_vars.iv_RCW[5][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW06_ChB_D0 = iv_msg_block_vars.iv_RCW[6][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW07_ChB_D0 = iv_msg_block_vars.iv_RCW[7][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW08_ChB_D0 = iv_msg_block_vars.iv_RCW[8][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW09_ChB_D0 = iv_msg_block_vars.iv_RCW[9][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW0A_ChB_D0 = iv_msg_block_vars.iv_RCW[10][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW0B_ChB_D0 = iv_msg_block_vars.iv_RCW[11][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW0C_ChB_D0 = iv_msg_block_vars.iv_RCW[12][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW0D_ChB_D0 = iv_msg_block_vars.iv_RCW[13][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW0E_ChB_D0 = iv_msg_block_vars.iv_RCW[14][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW0F_ChB_D0 = iv_msg_block_vars.iv_RCW[15][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW10_ChB_D0 = iv_msg_block_vars.iv_RCW[16][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW11_ChB_D0 = iv_msg_block_vars.iv_RCW[17][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW12_ChB_D0 = iv_msg_block_vars.iv_RCW[18][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW13_ChB_D0 = iv_msg_block_vars.iv_RCW[19][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW14_ChB_D0 = iv_msg_block_vars.iv_RCW[20][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW15_ChB_D0 = iv_msg_block_vars.iv_RCW[21][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW16_ChB_D0 = iv_msg_block_vars.iv_RCW[22][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW17_ChB_D0 = iv_msg_block_vars.iv_RCW[23][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW18_ChB_D0 = iv_msg_block_vars.iv_RCW[24][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW19_ChB_D0 = iv_msg_block_vars.iv_RCW[25][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW1A_ChB_D0 = iv_msg_block_vars.iv_RCW[26][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW1B_ChB_D0 = iv_msg_block_vars.iv_RCW[27][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW1C_ChB_D0 = iv_msg_block_vars.iv_RCW[28][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW1D_ChB_D0 = iv_msg_block_vars.iv_RCW[29][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW1E_ChB_D0 = iv_msg_block_vars.iv_RCW[30][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW1F_ChB_D0 = iv_msg_block_vars.iv_RCW[31][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW20_ChB_D0 = iv_msg_block_vars.iv_RCW[32][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW21_ChB_D0 = iv_msg_block_vars.iv_RCW[33][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW22_ChB_D0 = iv_msg_block_vars.iv_RCW[34][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW23_ChB_D0 = iv_msg_block_vars.iv_RCW[35][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW24_ChB_D0 = iv_msg_block_vars.iv_RCW[36][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW25_ChB_D0 = iv_msg_block_vars.iv_RCW[37][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW26_ChB_D0 = iv_msg_block_vars.iv_RCW[38][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW27_ChB_D0 = iv_msg_block_vars.iv_RCW[39][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW28_ChB_D0 = iv_msg_block_vars.iv_RCW[40][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW29_ChB_D0 = iv_msg_block_vars.iv_RCW[41][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW2A_ChB_D0 = iv_msg_block_vars.iv_RCW[42][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW2B_ChB_D0 = iv_msg_block_vars.iv_RCW[43][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW2C_ChB_D0 = iv_msg_block_vars.iv_RCW[44][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW2D_ChB_D0 = iv_msg_block_vars.iv_RCW[45][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW2E_ChB_D0 = iv_msg_block_vars.iv_RCW[46][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW2F_ChB_D0 = iv_msg_block_vars.iv_RCW[47][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW30_ChB_D0 = iv_msg_block_vars.iv_RCW[48][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW31_ChB_D0 = iv_msg_block_vars.iv_RCW[49][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW32_ChB_D0 = iv_msg_block_vars.iv_RCW[50][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW33_ChB_D0 = iv_msg_block_vars.iv_RCW[51][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW34_ChB_D0 = iv_msg_block_vars.iv_RCW[52][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW35_ChB_D0 = iv_msg_block_vars.iv_RCW[53][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW36_ChB_D0 = iv_msg_block_vars.iv_RCW[54][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW37_ChB_D0 = iv_msg_block_vars.iv_RCW[55][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW38_ChB_D0 = iv_msg_block_vars.iv_RCW[56][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW39_ChB_D0 = iv_msg_block_vars.iv_RCW[57][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW3A_ChB_D0 = iv_msg_block_vars.iv_RCW[58][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW3B_ChB_D0 = iv_msg_block_vars.iv_RCW[59][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW3C_ChB_D0 = iv_msg_block_vars.iv_RCW[60][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW3D_ChB_D0 = iv_msg_block_vars.iv_RCW[61][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW3E_ChB_D0 = iv_msg_block_vars.iv_RCW[62][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW3F_ChB_D0 = iv_msg_block_vars.iv_RCW[63][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW40_ChB_D0 = iv_msg_block_vars.iv_RCW[64][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW41_ChB_D0 = iv_msg_block_vars.iv_RCW[65][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW42_ChB_D0 = iv_msg_block_vars.iv_RCW[66][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW43_ChB_D0 = iv_msg_block_vars.iv_RCW[67][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW44_ChB_D0 = iv_msg_block_vars.iv_RCW[68][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW45_ChB_D0 = iv_msg_block_vars.iv_RCW[69][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW46_ChB_D0 = iv_msg_block_vars.iv_RCW[70][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW47_ChB_D0 = iv_msg_block_vars.iv_RCW[71][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW48_ChB_D0 = iv_msg_block_vars.iv_RCW[72][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW49_ChB_D0 = iv_msg_block_vars.iv_RCW[73][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW4A_ChB_D0 = iv_msg_block_vars.iv_RCW[74][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW4B_ChB_D0 = iv_msg_block_vars.iv_RCW[75][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW4C_ChB_D0 = iv_msg_block_vars.iv_RCW[76][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW4D_ChB_D0 = iv_msg_block_vars.iv_RCW[77][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW4E_ChB_D0 = iv_msg_block_vars.iv_RCW[78][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW4F_ChB_D0 = iv_msg_block_vars.iv_RCW[79][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW50_ChB_D0 = iv_msg_block_vars.iv_RCW[80][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW51_ChB_D0 = iv_msg_block_vars.iv_RCW[81][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW52_ChB_D0 = iv_msg_block_vars.iv_RCW[82][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW53_ChB_D0 = iv_msg_block_vars.iv_RCW[83][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW54_ChB_D0 = iv_msg_block_vars.iv_RCW[84][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW55_ChB_D0 = iv_msg_block_vars.iv_RCW[85][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW56_ChB_D0 = iv_msg_block_vars.iv_RCW[86][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW57_ChB_D0 = iv_msg_block_vars.iv_RCW[87][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW58_ChB_D0 = iv_msg_block_vars.iv_RCW[88][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW59_ChB_D0 = iv_msg_block_vars.iv_RCW[89][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW5A_ChB_D0 = iv_msg_block_vars.iv_RCW[90][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW5B_ChB_D0 = iv_msg_block_vars.iv_RCW[91][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW5C_ChB_D0 = iv_msg_block_vars.iv_RCW[92][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW5D_ChB_D0 = iv_msg_block_vars.iv_RCW[93][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW5E_ChB_D0 = iv_msg_block_vars.iv_RCW[94][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW5F_ChB_D0 = iv_msg_block_vars.iv_RCW[95][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW60_ChB_D0 = iv_msg_block_vars.iv_RCW[96][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW61_ChB_D0 = iv_msg_block_vars.iv_RCW[97][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW62_ChB_D0 = iv_msg_block_vars.iv_RCW[98][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW63_ChB_D0 = iv_msg_block_vars.iv_RCW[99][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW64_ChB_D0 = iv_msg_block_vars.iv_RCW[100][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW65_ChB_D0 = iv_msg_block_vars.iv_RCW[101][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW66_ChB_D0 = iv_msg_block_vars.iv_RCW[102][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW67_ChB_D0 = iv_msg_block_vars.iv_RCW[103][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW68_ChB_D0 = iv_msg_block_vars.iv_RCW[104][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW69_ChB_D0 = iv_msg_block_vars.iv_RCW[105][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW6A_ChB_D0 = iv_msg_block_vars.iv_RCW[106][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW6B_ChB_D0 = iv_msg_block_vars.iv_RCW[107][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW6C_ChB_D0 = iv_msg_block_vars.iv_RCW[108][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW6D_ChB_D0 = iv_msg_block_vars.iv_RCW[109][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW6E_ChB_D0 = iv_msg_block_vars.iv_RCW[110][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW6F_ChB_D0 = iv_msg_block_vars.iv_RCW[111][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW70_ChB_D0 = iv_msg_block_vars.iv_RCW[112][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW71_ChB_D0 = iv_msg_block_vars.iv_RCW[113][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW72_ChB_D0 = iv_msg_block_vars.iv_RCW[114][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW73_ChB_D0 = iv_msg_block_vars.iv_RCW[115][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW74_ChB_D0 = iv_msg_block_vars.iv_RCW[116][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW75_ChB_D0 = iv_msg_block_vars.iv_RCW[117][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW76_ChB_D0 = iv_msg_block_vars.iv_RCW[118][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW77_ChB_D0 = iv_msg_block_vars.iv_RCW[119][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW78_ChB_D0 = iv_msg_block_vars.iv_RCW[120][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW79_ChB_D0 = iv_msg_block_vars.iv_RCW[121][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW7A_ChB_D0 = iv_msg_block_vars.iv_RCW[122][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW7B_ChB_D0 = iv_msg_block_vars.iv_RCW[123][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW7C_ChB_D0 = iv_msg_block_vars.iv_RCW[124][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW7D_ChB_D0 = iv_msg_block_vars.iv_RCW[125][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW7E_ChB_D0 = iv_msg_block_vars.iv_RCW[126][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];
            io_msg_block.RCW7F_ChB_D0 = iv_msg_block_vars.iv_RCW[127][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM0];

            io_msg_block.RCW00_ChA_D1 = iv_msg_block_vars.iv_RCW[0][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW01_ChA_D1 = iv_msg_block_vars.iv_RCW[1][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW02_ChA_D1 = iv_msg_block_vars.iv_RCW[2][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW03_ChA_D1 = iv_msg_block_vars.iv_RCW[3][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW04_ChA_D1 = iv_msg_block_vars.iv_RCW[4][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW05_ChA_D1 = iv_msg_block_vars.iv_RCW[5][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW06_ChA_D1 = iv_msg_block_vars.iv_RCW[6][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW07_ChA_D1 = iv_msg_block_vars.iv_RCW[7][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW08_ChA_D1 = iv_msg_block_vars.iv_RCW[8][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW09_ChA_D1 = iv_msg_block_vars.iv_RCW[9][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW0A_ChA_D1 = iv_msg_block_vars.iv_RCW[10][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW0B_ChA_D1 = iv_msg_block_vars.iv_RCW[11][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW0C_ChA_D1 = iv_msg_block_vars.iv_RCW[12][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW0D_ChA_D1 = iv_msg_block_vars.iv_RCW[13][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW0E_ChA_D1 = iv_msg_block_vars.iv_RCW[14][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW0F_ChA_D1 = iv_msg_block_vars.iv_RCW[15][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW10_ChA_D1 = iv_msg_block_vars.iv_RCW[16][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW11_ChA_D1 = iv_msg_block_vars.iv_RCW[17][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW12_ChA_D1 = iv_msg_block_vars.iv_RCW[18][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW13_ChA_D1 = iv_msg_block_vars.iv_RCW[19][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW14_ChA_D1 = iv_msg_block_vars.iv_RCW[20][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW15_ChA_D1 = iv_msg_block_vars.iv_RCW[21][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW16_ChA_D1 = iv_msg_block_vars.iv_RCW[22][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW17_ChA_D1 = iv_msg_block_vars.iv_RCW[23][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW18_ChA_D1 = iv_msg_block_vars.iv_RCW[24][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW19_ChA_D1 = iv_msg_block_vars.iv_RCW[25][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW1A_ChA_D1 = iv_msg_block_vars.iv_RCW[26][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW1B_ChA_D1 = iv_msg_block_vars.iv_RCW[27][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW1C_ChA_D1 = iv_msg_block_vars.iv_RCW[28][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW1D_ChA_D1 = iv_msg_block_vars.iv_RCW[29][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW1E_ChA_D1 = iv_msg_block_vars.iv_RCW[30][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW1F_ChA_D1 = iv_msg_block_vars.iv_RCW[31][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW20_ChA_D1 = iv_msg_block_vars.iv_RCW[32][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW21_ChA_D1 = iv_msg_block_vars.iv_RCW[33][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW22_ChA_D1 = iv_msg_block_vars.iv_RCW[34][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW23_ChA_D1 = iv_msg_block_vars.iv_RCW[35][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW24_ChA_D1 = iv_msg_block_vars.iv_RCW[36][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW25_ChA_D1 = iv_msg_block_vars.iv_RCW[37][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW26_ChA_D1 = iv_msg_block_vars.iv_RCW[38][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW27_ChA_D1 = iv_msg_block_vars.iv_RCW[39][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW28_ChA_D1 = iv_msg_block_vars.iv_RCW[40][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW29_ChA_D1 = iv_msg_block_vars.iv_RCW[41][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW2A_ChA_D1 = iv_msg_block_vars.iv_RCW[42][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW2B_ChA_D1 = iv_msg_block_vars.iv_RCW[43][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW2C_ChA_D1 = iv_msg_block_vars.iv_RCW[44][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW2D_ChA_D1 = iv_msg_block_vars.iv_RCW[45][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW2E_ChA_D1 = iv_msg_block_vars.iv_RCW[46][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW2F_ChA_D1 = iv_msg_block_vars.iv_RCW[47][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW30_ChA_D1 = iv_msg_block_vars.iv_RCW[48][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW31_ChA_D1 = iv_msg_block_vars.iv_RCW[49][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW32_ChA_D1 = iv_msg_block_vars.iv_RCW[50][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW33_ChA_D1 = iv_msg_block_vars.iv_RCW[51][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW34_ChA_D1 = iv_msg_block_vars.iv_RCW[52][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW35_ChA_D1 = iv_msg_block_vars.iv_RCW[53][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW36_ChA_D1 = iv_msg_block_vars.iv_RCW[54][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW37_ChA_D1 = iv_msg_block_vars.iv_RCW[55][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW38_ChA_D1 = iv_msg_block_vars.iv_RCW[56][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW39_ChA_D1 = iv_msg_block_vars.iv_RCW[57][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW3A_ChA_D1 = iv_msg_block_vars.iv_RCW[58][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW3B_ChA_D1 = iv_msg_block_vars.iv_RCW[59][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW3C_ChA_D1 = iv_msg_block_vars.iv_RCW[60][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW3D_ChA_D1 = iv_msg_block_vars.iv_RCW[61][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW3E_ChA_D1 = iv_msg_block_vars.iv_RCW[62][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW3F_ChA_D1 = iv_msg_block_vars.iv_RCW[63][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW40_ChA_D1 = iv_msg_block_vars.iv_RCW[64][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW41_ChA_D1 = iv_msg_block_vars.iv_RCW[65][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW42_ChA_D1 = iv_msg_block_vars.iv_RCW[66][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW43_ChA_D1 = iv_msg_block_vars.iv_RCW[67][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW44_ChA_D1 = iv_msg_block_vars.iv_RCW[68][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW45_ChA_D1 = iv_msg_block_vars.iv_RCW[69][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW46_ChA_D1 = iv_msg_block_vars.iv_RCW[70][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW47_ChA_D1 = iv_msg_block_vars.iv_RCW[71][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW48_ChA_D1 = iv_msg_block_vars.iv_RCW[72][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW49_ChA_D1 = iv_msg_block_vars.iv_RCW[73][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW4A_ChA_D1 = iv_msg_block_vars.iv_RCW[74][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW4B_ChA_D1 = iv_msg_block_vars.iv_RCW[75][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW4C_ChA_D1 = iv_msg_block_vars.iv_RCW[76][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW4D_ChA_D1 = iv_msg_block_vars.iv_RCW[77][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW4E_ChA_D1 = iv_msg_block_vars.iv_RCW[78][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW4F_ChA_D1 = iv_msg_block_vars.iv_RCW[79][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW50_ChA_D1 = iv_msg_block_vars.iv_RCW[80][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW51_ChA_D1 = iv_msg_block_vars.iv_RCW[81][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW52_ChA_D1 = iv_msg_block_vars.iv_RCW[82][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW53_ChA_D1 = iv_msg_block_vars.iv_RCW[83][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW54_ChA_D1 = iv_msg_block_vars.iv_RCW[84][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW55_ChA_D1 = iv_msg_block_vars.iv_RCW[85][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW56_ChA_D1 = iv_msg_block_vars.iv_RCW[86][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW57_ChA_D1 = iv_msg_block_vars.iv_RCW[87][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW58_ChA_D1 = iv_msg_block_vars.iv_RCW[88][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW59_ChA_D1 = iv_msg_block_vars.iv_RCW[89][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW5A_ChA_D1 = iv_msg_block_vars.iv_RCW[90][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW5B_ChA_D1 = iv_msg_block_vars.iv_RCW[91][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW5C_ChA_D1 = iv_msg_block_vars.iv_RCW[92][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW5D_ChA_D1 = iv_msg_block_vars.iv_RCW[93][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW5E_ChA_D1 = iv_msg_block_vars.iv_RCW[94][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW5F_ChA_D1 = iv_msg_block_vars.iv_RCW[95][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW60_ChA_D1 = iv_msg_block_vars.iv_RCW[96][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW61_ChA_D1 = iv_msg_block_vars.iv_RCW[97][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW62_ChA_D1 = iv_msg_block_vars.iv_RCW[98][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW63_ChA_D1 = iv_msg_block_vars.iv_RCW[99][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW64_ChA_D1 = iv_msg_block_vars.iv_RCW[100][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW65_ChA_D1 = iv_msg_block_vars.iv_RCW[101][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW66_ChA_D1 = iv_msg_block_vars.iv_RCW[102][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW67_ChA_D1 = iv_msg_block_vars.iv_RCW[103][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW68_ChA_D1 = iv_msg_block_vars.iv_RCW[104][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW69_ChA_D1 = iv_msg_block_vars.iv_RCW[105][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW6A_ChA_D1 = iv_msg_block_vars.iv_RCW[106][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW6B_ChA_D1 = iv_msg_block_vars.iv_RCW[107][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW6C_ChA_D1 = iv_msg_block_vars.iv_RCW[108][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW6D_ChA_D1 = iv_msg_block_vars.iv_RCW[109][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW6E_ChA_D1 = iv_msg_block_vars.iv_RCW[110][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW6F_ChA_D1 = iv_msg_block_vars.iv_RCW[111][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW70_ChA_D1 = iv_msg_block_vars.iv_RCW[112][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW71_ChA_D1 = iv_msg_block_vars.iv_RCW[113][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW72_ChA_D1 = iv_msg_block_vars.iv_RCW[114][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW73_ChA_D1 = iv_msg_block_vars.iv_RCW[115][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW74_ChA_D1 = iv_msg_block_vars.iv_RCW[116][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW75_ChA_D1 = iv_msg_block_vars.iv_RCW[117][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW76_ChA_D1 = iv_msg_block_vars.iv_RCW[118][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW77_ChA_D1 = iv_msg_block_vars.iv_RCW[119][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW78_ChA_D1 = iv_msg_block_vars.iv_RCW[120][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW79_ChA_D1 = iv_msg_block_vars.iv_RCW[121][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW7A_ChA_D1 = iv_msg_block_vars.iv_RCW[122][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW7B_ChA_D1 = iv_msg_block_vars.iv_RCW[123][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW7C_ChA_D1 = iv_msg_block_vars.iv_RCW[124][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW7D_ChA_D1 = iv_msg_block_vars.iv_RCW[125][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW7E_ChA_D1 = iv_msg_block_vars.iv_RCW[126][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];
            io_msg_block.RCW7F_ChA_D1 = iv_msg_block_vars.iv_RCW[127][mss::ddr5::mr::ATTR_CHANNEL_A][DIMM1];

            io_msg_block.RCW00_ChB_D1 = iv_msg_block_vars.iv_RCW[0][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW01_ChB_D1 = iv_msg_block_vars.iv_RCW[1][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW02_ChB_D1 = iv_msg_block_vars.iv_RCW[2][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW03_ChB_D1 = iv_msg_block_vars.iv_RCW[3][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW04_ChB_D1 = iv_msg_block_vars.iv_RCW[4][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW05_ChB_D1 = iv_msg_block_vars.iv_RCW[5][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW06_ChB_D1 = iv_msg_block_vars.iv_RCW[6][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW07_ChB_D1 = iv_msg_block_vars.iv_RCW[7][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW08_ChB_D1 = iv_msg_block_vars.iv_RCW[8][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW09_ChB_D1 = iv_msg_block_vars.iv_RCW[9][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW0A_ChB_D1 = iv_msg_block_vars.iv_RCW[10][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW0B_ChB_D1 = iv_msg_block_vars.iv_RCW[11][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW0C_ChB_D1 = iv_msg_block_vars.iv_RCW[12][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW0D_ChB_D1 = iv_msg_block_vars.iv_RCW[13][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW0E_ChB_D1 = iv_msg_block_vars.iv_RCW[14][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW0F_ChB_D1 = iv_msg_block_vars.iv_RCW[15][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW10_ChB_D1 = iv_msg_block_vars.iv_RCW[16][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW11_ChB_D1 = iv_msg_block_vars.iv_RCW[17][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW12_ChB_D1 = iv_msg_block_vars.iv_RCW[18][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW13_ChB_D1 = iv_msg_block_vars.iv_RCW[19][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW14_ChB_D1 = iv_msg_block_vars.iv_RCW[20][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW15_ChB_D1 = iv_msg_block_vars.iv_RCW[21][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW16_ChB_D1 = iv_msg_block_vars.iv_RCW[22][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW17_ChB_D1 = iv_msg_block_vars.iv_RCW[23][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW18_ChB_D1 = iv_msg_block_vars.iv_RCW[24][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW19_ChB_D1 = iv_msg_block_vars.iv_RCW[25][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW1A_ChB_D1 = iv_msg_block_vars.iv_RCW[26][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW1B_ChB_D1 = iv_msg_block_vars.iv_RCW[27][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW1C_ChB_D1 = iv_msg_block_vars.iv_RCW[28][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW1D_ChB_D1 = iv_msg_block_vars.iv_RCW[29][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW1E_ChB_D1 = iv_msg_block_vars.iv_RCW[30][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW1F_ChB_D1 = iv_msg_block_vars.iv_RCW[31][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW20_ChB_D1 = iv_msg_block_vars.iv_RCW[32][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW21_ChB_D1 = iv_msg_block_vars.iv_RCW[33][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW22_ChB_D1 = iv_msg_block_vars.iv_RCW[34][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW23_ChB_D1 = iv_msg_block_vars.iv_RCW[35][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW24_ChB_D1 = iv_msg_block_vars.iv_RCW[36][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW25_ChB_D1 = iv_msg_block_vars.iv_RCW[37][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW26_ChB_D1 = iv_msg_block_vars.iv_RCW[38][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW27_ChB_D1 = iv_msg_block_vars.iv_RCW[39][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW28_ChB_D1 = iv_msg_block_vars.iv_RCW[40][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW29_ChB_D1 = iv_msg_block_vars.iv_RCW[41][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW2A_ChB_D1 = iv_msg_block_vars.iv_RCW[42][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW2B_ChB_D1 = iv_msg_block_vars.iv_RCW[43][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW2C_ChB_D1 = iv_msg_block_vars.iv_RCW[44][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW2D_ChB_D1 = iv_msg_block_vars.iv_RCW[45][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW2E_ChB_D1 = iv_msg_block_vars.iv_RCW[46][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW2F_ChB_D1 = iv_msg_block_vars.iv_RCW[47][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW30_ChB_D1 = iv_msg_block_vars.iv_RCW[48][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW31_ChB_D1 = iv_msg_block_vars.iv_RCW[49][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW32_ChB_D1 = iv_msg_block_vars.iv_RCW[50][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW33_ChB_D1 = iv_msg_block_vars.iv_RCW[51][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW34_ChB_D1 = iv_msg_block_vars.iv_RCW[52][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW35_ChB_D1 = iv_msg_block_vars.iv_RCW[53][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW36_ChB_D1 = iv_msg_block_vars.iv_RCW[54][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW37_ChB_D1 = iv_msg_block_vars.iv_RCW[55][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW38_ChB_D1 = iv_msg_block_vars.iv_RCW[56][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW39_ChB_D1 = iv_msg_block_vars.iv_RCW[57][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW3A_ChB_D1 = iv_msg_block_vars.iv_RCW[58][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW3B_ChB_D1 = iv_msg_block_vars.iv_RCW[59][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW3C_ChB_D1 = iv_msg_block_vars.iv_RCW[60][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW3D_ChB_D1 = iv_msg_block_vars.iv_RCW[61][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW3E_ChB_D1 = iv_msg_block_vars.iv_RCW[62][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW3F_ChB_D1 = iv_msg_block_vars.iv_RCW[63][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW40_ChB_D1 = iv_msg_block_vars.iv_RCW[64][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW41_ChB_D1 = iv_msg_block_vars.iv_RCW[65][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW42_ChB_D1 = iv_msg_block_vars.iv_RCW[66][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW43_ChB_D1 = iv_msg_block_vars.iv_RCW[67][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW44_ChB_D1 = iv_msg_block_vars.iv_RCW[68][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW45_ChB_D1 = iv_msg_block_vars.iv_RCW[69][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW46_ChB_D1 = iv_msg_block_vars.iv_RCW[70][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW47_ChB_D1 = iv_msg_block_vars.iv_RCW[71][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW48_ChB_D1 = iv_msg_block_vars.iv_RCW[72][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW49_ChB_D1 = iv_msg_block_vars.iv_RCW[73][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW4A_ChB_D1 = iv_msg_block_vars.iv_RCW[74][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW4B_ChB_D1 = iv_msg_block_vars.iv_RCW[75][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW4C_ChB_D1 = iv_msg_block_vars.iv_RCW[76][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW4D_ChB_D1 = iv_msg_block_vars.iv_RCW[77][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW4E_ChB_D1 = iv_msg_block_vars.iv_RCW[78][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW4F_ChB_D1 = iv_msg_block_vars.iv_RCW[79][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW50_ChB_D1 = iv_msg_block_vars.iv_RCW[80][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW51_ChB_D1 = iv_msg_block_vars.iv_RCW[81][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW52_ChB_D1 = iv_msg_block_vars.iv_RCW[82][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW53_ChB_D1 = iv_msg_block_vars.iv_RCW[83][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW54_ChB_D1 = iv_msg_block_vars.iv_RCW[84][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW55_ChB_D1 = iv_msg_block_vars.iv_RCW[85][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW56_ChB_D1 = iv_msg_block_vars.iv_RCW[86][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW57_ChB_D1 = iv_msg_block_vars.iv_RCW[87][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW58_ChB_D1 = iv_msg_block_vars.iv_RCW[88][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW59_ChB_D1 = iv_msg_block_vars.iv_RCW[89][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW5A_ChB_D1 = iv_msg_block_vars.iv_RCW[90][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW5B_ChB_D1 = iv_msg_block_vars.iv_RCW[91][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW5C_ChB_D1 = iv_msg_block_vars.iv_RCW[92][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW5D_ChB_D1 = iv_msg_block_vars.iv_RCW[93][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW5E_ChB_D1 = iv_msg_block_vars.iv_RCW[94][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW5F_ChB_D1 = iv_msg_block_vars.iv_RCW[95][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW60_ChB_D1 = iv_msg_block_vars.iv_RCW[96][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW61_ChB_D1 = iv_msg_block_vars.iv_RCW[97][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW62_ChB_D1 = iv_msg_block_vars.iv_RCW[98][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW63_ChB_D1 = iv_msg_block_vars.iv_RCW[99][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW64_ChB_D1 = iv_msg_block_vars.iv_RCW[100][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW65_ChB_D1 = iv_msg_block_vars.iv_RCW[101][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW66_ChB_D1 = iv_msg_block_vars.iv_RCW[102][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW67_ChB_D1 = iv_msg_block_vars.iv_RCW[103][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW68_ChB_D1 = iv_msg_block_vars.iv_RCW[104][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW69_ChB_D1 = iv_msg_block_vars.iv_RCW[105][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW6A_ChB_D1 = iv_msg_block_vars.iv_RCW[106][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW6B_ChB_D1 = iv_msg_block_vars.iv_RCW[107][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW6C_ChB_D1 = iv_msg_block_vars.iv_RCW[108][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW6D_ChB_D1 = iv_msg_block_vars.iv_RCW[109][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW6E_ChB_D1 = iv_msg_block_vars.iv_RCW[110][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW6F_ChB_D1 = iv_msg_block_vars.iv_RCW[111][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW70_ChB_D1 = iv_msg_block_vars.iv_RCW[112][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW71_ChB_D1 = iv_msg_block_vars.iv_RCW[113][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW72_ChB_D1 = iv_msg_block_vars.iv_RCW[114][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW73_ChB_D1 = iv_msg_block_vars.iv_RCW[115][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW74_ChB_D1 = iv_msg_block_vars.iv_RCW[116][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW75_ChB_D1 = iv_msg_block_vars.iv_RCW[117][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW76_ChB_D1 = iv_msg_block_vars.iv_RCW[118][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW77_ChB_D1 = iv_msg_block_vars.iv_RCW[119][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW78_ChB_D1 = iv_msg_block_vars.iv_RCW[120][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW79_ChB_D1 = iv_msg_block_vars.iv_RCW[121][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW7A_ChB_D1 = iv_msg_block_vars.iv_RCW[122][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW7B_ChB_D1 = iv_msg_block_vars.iv_RCW[123][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW7C_ChB_D1 = iv_msg_block_vars.iv_RCW[124][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW7D_ChB_D1 = iv_msg_block_vars.iv_RCW[125][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW7E_ChB_D1 = iv_msg_block_vars.iv_RCW[126][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];
            io_msg_block.RCW7F_ChB_D1 = iv_msg_block_vars.iv_RCW[127][mss::ddr5::mr::ATTR_CHANNEL_B][DIMM1];

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter BCW[N]_CHA/B_D[DIMM]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_BCW(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // BCW values are all left as zero for Odyssey
            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter WL_ADJ_START
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_WL_ADJ_START(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.WL_ADJ_START = iv_msg_block_vars.iv_WL_ADJ_START;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameter WL_ADJ_END
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_WL_ADJ_END(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.WL_ADJ_END = iv_msg_block_vars.iv_WL_ADJ_END;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameters VrefDqR[RANK]Nib[DRAM]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_VrefDq(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Note the swizzle from DRAM indexing to Synopsys indexing
            io_msg_block.VrefDqR0Nib0 = iv_msg_block_vars.iv_MR10[0][0];
            io_msg_block.VrefDqR0Nib1 = iv_msg_block_vars.iv_MR10[0][1];
            io_msg_block.VrefDqR0Nib2 = iv_msg_block_vars.iv_MR10[0][2];
            io_msg_block.VrefDqR0Nib3 = iv_msg_block_vars.iv_MR10[0][3];
            io_msg_block.VrefDqR0Nib4 = iv_msg_block_vars.iv_MR10[0][4];
            io_msg_block.VrefDqR0Nib5 = iv_msg_block_vars.iv_MR10[0][5];
            io_msg_block.VrefDqR0Nib6 = iv_msg_block_vars.iv_MR10[0][6];
            io_msg_block.VrefDqR0Nib7 = iv_msg_block_vars.iv_MR10[0][7];
            io_msg_block.VrefDqR0Nib8 = iv_msg_block_vars.iv_MR10[0][10];
            io_msg_block.VrefDqR0Nib9 = iv_msg_block_vars.iv_MR10[0][11];
            io_msg_block.VrefDqR0Nib10 = iv_msg_block_vars.iv_MR10[0][12];
            io_msg_block.VrefDqR0Nib11 = iv_msg_block_vars.iv_MR10[0][13];
            io_msg_block.VrefDqR0Nib12 = iv_msg_block_vars.iv_MR10[0][14];
            io_msg_block.VrefDqR0Nib13 = iv_msg_block_vars.iv_MR10[0][15];
            io_msg_block.VrefDqR0Nib14 = iv_msg_block_vars.iv_MR10[0][16];
            io_msg_block.VrefDqR0Nib15 = iv_msg_block_vars.iv_MR10[0][17];
            io_msg_block.VrefDqR0Nib16 = iv_msg_block_vars.iv_MR10[0][8];
            io_msg_block.VrefDqR0Nib17 = iv_msg_block_vars.iv_MR10[0][9];
            io_msg_block.VrefDqR0Nib18 = iv_msg_block_vars.iv_MR10[0][18];
            io_msg_block.VrefDqR0Nib19 = iv_msg_block_vars.iv_MR10[0][19];

            io_msg_block.VrefDqR1Nib0 = iv_msg_block_vars.iv_MR10[1][0];
            io_msg_block.VrefDqR1Nib1 = iv_msg_block_vars.iv_MR10[1][1];
            io_msg_block.VrefDqR1Nib2 = iv_msg_block_vars.iv_MR10[1][2];
            io_msg_block.VrefDqR1Nib3 = iv_msg_block_vars.iv_MR10[1][3];
            io_msg_block.VrefDqR1Nib4 = iv_msg_block_vars.iv_MR10[1][4];
            io_msg_block.VrefDqR1Nib5 = iv_msg_block_vars.iv_MR10[1][5];
            io_msg_block.VrefDqR1Nib6 = iv_msg_block_vars.iv_MR10[1][6];
            io_msg_block.VrefDqR1Nib7 = iv_msg_block_vars.iv_MR10[1][7];
            io_msg_block.VrefDqR1Nib8 = iv_msg_block_vars.iv_MR10[1][10];
            io_msg_block.VrefDqR1Nib9 = iv_msg_block_vars.iv_MR10[1][11];
            io_msg_block.VrefDqR1Nib10 = iv_msg_block_vars.iv_MR10[1][12];
            io_msg_block.VrefDqR1Nib11 = iv_msg_block_vars.iv_MR10[1][13];
            io_msg_block.VrefDqR1Nib12 = iv_msg_block_vars.iv_MR10[1][14];
            io_msg_block.VrefDqR1Nib13 = iv_msg_block_vars.iv_MR10[1][15];
            io_msg_block.VrefDqR1Nib14 = iv_msg_block_vars.iv_MR10[1][16];
            io_msg_block.VrefDqR1Nib15 = iv_msg_block_vars.iv_MR10[1][17];
            io_msg_block.VrefDqR1Nib16 = iv_msg_block_vars.iv_MR10[1][8];
            io_msg_block.VrefDqR1Nib17 = iv_msg_block_vars.iv_MR10[1][9];
            io_msg_block.VrefDqR1Nib18 = iv_msg_block_vars.iv_MR10[1][18];
            io_msg_block.VrefDqR1Nib19 = iv_msg_block_vars.iv_MR10[1][19];

            io_msg_block.VrefDqR2Nib0 = iv_msg_block_vars.iv_MR10[2][0];
            io_msg_block.VrefDqR2Nib1 = iv_msg_block_vars.iv_MR10[2][1];
            io_msg_block.VrefDqR2Nib2 = iv_msg_block_vars.iv_MR10[2][2];
            io_msg_block.VrefDqR2Nib3 = iv_msg_block_vars.iv_MR10[2][3];
            io_msg_block.VrefDqR2Nib4 = iv_msg_block_vars.iv_MR10[2][4];
            io_msg_block.VrefDqR2Nib5 = iv_msg_block_vars.iv_MR10[2][5];
            io_msg_block.VrefDqR2Nib6 = iv_msg_block_vars.iv_MR10[2][6];
            io_msg_block.VrefDqR2Nib7 = iv_msg_block_vars.iv_MR10[2][7];
            io_msg_block.VrefDqR2Nib8 = iv_msg_block_vars.iv_MR10[2][10];
            io_msg_block.VrefDqR2Nib9 = iv_msg_block_vars.iv_MR10[2][11];
            io_msg_block.VrefDqR2Nib10 = iv_msg_block_vars.iv_MR10[2][12];
            io_msg_block.VrefDqR2Nib11 = iv_msg_block_vars.iv_MR10[2][13];
            io_msg_block.VrefDqR2Nib12 = iv_msg_block_vars.iv_MR10[2][14];
            io_msg_block.VrefDqR2Nib13 = iv_msg_block_vars.iv_MR10[2][15];
            io_msg_block.VrefDqR2Nib14 = iv_msg_block_vars.iv_MR10[2][16];
            io_msg_block.VrefDqR2Nib15 = iv_msg_block_vars.iv_MR10[2][17];
            io_msg_block.VrefDqR2Nib16 = iv_msg_block_vars.iv_MR10[2][8];
            io_msg_block.VrefDqR2Nib17 = iv_msg_block_vars.iv_MR10[2][9];
            io_msg_block.VrefDqR2Nib18 = iv_msg_block_vars.iv_MR10[2][18];
            io_msg_block.VrefDqR2Nib19 = iv_msg_block_vars.iv_MR10[2][19];

            io_msg_block.VrefDqR3Nib0 = iv_msg_block_vars.iv_MR10[3][0];
            io_msg_block.VrefDqR3Nib1 = iv_msg_block_vars.iv_MR10[3][1];
            io_msg_block.VrefDqR3Nib2 = iv_msg_block_vars.iv_MR10[3][2];
            io_msg_block.VrefDqR3Nib3 = iv_msg_block_vars.iv_MR10[3][3];
            io_msg_block.VrefDqR3Nib4 = iv_msg_block_vars.iv_MR10[3][4];
            io_msg_block.VrefDqR3Nib5 = iv_msg_block_vars.iv_MR10[3][5];
            io_msg_block.VrefDqR3Nib6 = iv_msg_block_vars.iv_MR10[3][6];
            io_msg_block.VrefDqR3Nib7 = iv_msg_block_vars.iv_MR10[3][7];
            io_msg_block.VrefDqR3Nib8 = iv_msg_block_vars.iv_MR10[3][10];
            io_msg_block.VrefDqR3Nib9 = iv_msg_block_vars.iv_MR10[3][11];
            io_msg_block.VrefDqR3Nib10 = iv_msg_block_vars.iv_MR10[3][12];
            io_msg_block.VrefDqR3Nib11 = iv_msg_block_vars.iv_MR10[3][13];
            io_msg_block.VrefDqR3Nib12 = iv_msg_block_vars.iv_MR10[3][14];
            io_msg_block.VrefDqR3Nib13 = iv_msg_block_vars.iv_MR10[3][15];
            io_msg_block.VrefDqR3Nib14 = iv_msg_block_vars.iv_MR10[3][16];
            io_msg_block.VrefDqR3Nib15 = iv_msg_block_vars.iv_MR10[3][17];
            io_msg_block.VrefDqR3Nib16 = iv_msg_block_vars.iv_MR10[3][8];
            io_msg_block.VrefDqR3Nib17 = iv_msg_block_vars.iv_MR10[3][9];
            io_msg_block.VrefDqR3Nib18 = iv_msg_block_vars.iv_MR10[3][18];
            io_msg_block.VrefDqR3Nib19 = iv_msg_block_vars.iv_MR10[3][19];

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR3R[RANK]Nib[DRAM]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        /// @note as of the M18 software, MR3RXNibY are used to input per-device MR33 settings
        ///
        fapi2::ReturnCode setup_MR3_per_dram(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Note the swizzle from DRAM indexing to Synopsys indexing
            io_msg_block.MR3R0Nib0 = iv_msg_block_vars.iv_MR33_per_dram[0][0];
            io_msg_block.MR3R0Nib1 = iv_msg_block_vars.iv_MR33_per_dram[0][1];
            io_msg_block.MR3R0Nib2 = iv_msg_block_vars.iv_MR33_per_dram[0][2];
            io_msg_block.MR3R0Nib3 = iv_msg_block_vars.iv_MR33_per_dram[0][3];
            io_msg_block.MR3R0Nib4 = iv_msg_block_vars.iv_MR33_per_dram[0][4];
            io_msg_block.MR3R0Nib5 = iv_msg_block_vars.iv_MR33_per_dram[0][5];
            io_msg_block.MR3R0Nib6 = iv_msg_block_vars.iv_MR33_per_dram[0][6];
            io_msg_block.MR3R0Nib7 = iv_msg_block_vars.iv_MR33_per_dram[0][7];
            io_msg_block.MR3R0Nib8 = iv_msg_block_vars.iv_MR33_per_dram[0][10];
            io_msg_block.MR3R0Nib9 = iv_msg_block_vars.iv_MR33_per_dram[0][11];
            io_msg_block.MR3R0Nib10 = iv_msg_block_vars.iv_MR33_per_dram[0][12];
            io_msg_block.MR3R0Nib11 = iv_msg_block_vars.iv_MR33_per_dram[0][13];
            io_msg_block.MR3R0Nib12 = iv_msg_block_vars.iv_MR33_per_dram[0][14];
            io_msg_block.MR3R0Nib13 = iv_msg_block_vars.iv_MR33_per_dram[0][15];
            io_msg_block.MR3R0Nib14 = iv_msg_block_vars.iv_MR33_per_dram[0][16];
            io_msg_block.MR3R0Nib15 = iv_msg_block_vars.iv_MR33_per_dram[0][17];
            io_msg_block.MR3R0Nib16 = iv_msg_block_vars.iv_MR33_per_dram[0][8];
            io_msg_block.MR3R0Nib17 = iv_msg_block_vars.iv_MR33_per_dram[0][9];
            io_msg_block.MR3R0Nib18 = iv_msg_block_vars.iv_MR33_per_dram[0][18];
            io_msg_block.MR3R0Nib19 = iv_msg_block_vars.iv_MR33_per_dram[0][19];

            io_msg_block.MR3R1Nib0 = iv_msg_block_vars.iv_MR33_per_dram[1][0];
            io_msg_block.MR3R1Nib1 = iv_msg_block_vars.iv_MR33_per_dram[1][1];
            io_msg_block.MR3R1Nib2 = iv_msg_block_vars.iv_MR33_per_dram[1][2];
            io_msg_block.MR3R1Nib3 = iv_msg_block_vars.iv_MR33_per_dram[1][3];
            io_msg_block.MR3R1Nib4 = iv_msg_block_vars.iv_MR33_per_dram[1][4];
            io_msg_block.MR3R1Nib5 = iv_msg_block_vars.iv_MR33_per_dram[1][5];
            io_msg_block.MR3R1Nib6 = iv_msg_block_vars.iv_MR33_per_dram[1][6];
            io_msg_block.MR3R1Nib7 = iv_msg_block_vars.iv_MR33_per_dram[1][7];
            io_msg_block.MR3R1Nib8 = iv_msg_block_vars.iv_MR33_per_dram[1][10];
            io_msg_block.MR3R1Nib9 = iv_msg_block_vars.iv_MR33_per_dram[1][11];
            io_msg_block.MR3R1Nib10 = iv_msg_block_vars.iv_MR33_per_dram[1][12];
            io_msg_block.MR3R1Nib11 = iv_msg_block_vars.iv_MR33_per_dram[1][13];
            io_msg_block.MR3R1Nib12 = iv_msg_block_vars.iv_MR33_per_dram[1][14];
            io_msg_block.MR3R1Nib13 = iv_msg_block_vars.iv_MR33_per_dram[1][15];
            io_msg_block.MR3R1Nib14 = iv_msg_block_vars.iv_MR33_per_dram[1][16];
            io_msg_block.MR3R1Nib15 = iv_msg_block_vars.iv_MR33_per_dram[1][17];
            io_msg_block.MR3R1Nib16 = iv_msg_block_vars.iv_MR33_per_dram[1][8];
            io_msg_block.MR3R1Nib17 = iv_msg_block_vars.iv_MR33_per_dram[1][9];
            io_msg_block.MR3R1Nib18 = iv_msg_block_vars.iv_MR33_per_dram[1][18];
            io_msg_block.MR3R1Nib19 = iv_msg_block_vars.iv_MR33_per_dram[1][19];

            io_msg_block.MR3R2Nib0 = iv_msg_block_vars.iv_MR33_per_dram[2][0];
            io_msg_block.MR3R2Nib1 = iv_msg_block_vars.iv_MR33_per_dram[2][1];
            io_msg_block.MR3R2Nib2 = iv_msg_block_vars.iv_MR33_per_dram[2][2];
            io_msg_block.MR3R2Nib3 = iv_msg_block_vars.iv_MR33_per_dram[2][3];
            io_msg_block.MR3R2Nib4 = iv_msg_block_vars.iv_MR33_per_dram[2][4];
            io_msg_block.MR3R2Nib5 = iv_msg_block_vars.iv_MR33_per_dram[2][5];
            io_msg_block.MR3R2Nib6 = iv_msg_block_vars.iv_MR33_per_dram[2][6];
            io_msg_block.MR3R2Nib7 = iv_msg_block_vars.iv_MR33_per_dram[2][7];
            io_msg_block.MR3R2Nib8 = iv_msg_block_vars.iv_MR33_per_dram[2][10];
            io_msg_block.MR3R2Nib9 = iv_msg_block_vars.iv_MR33_per_dram[2][11];
            io_msg_block.MR3R2Nib10 = iv_msg_block_vars.iv_MR33_per_dram[2][12];
            io_msg_block.MR3R2Nib11 = iv_msg_block_vars.iv_MR33_per_dram[2][13];
            io_msg_block.MR3R2Nib12 = iv_msg_block_vars.iv_MR33_per_dram[2][14];
            io_msg_block.MR3R2Nib13 = iv_msg_block_vars.iv_MR33_per_dram[2][15];
            io_msg_block.MR3R2Nib14 = iv_msg_block_vars.iv_MR33_per_dram[2][16];
            io_msg_block.MR3R2Nib15 = iv_msg_block_vars.iv_MR33_per_dram[2][17];
            io_msg_block.MR3R2Nib16 = iv_msg_block_vars.iv_MR33_per_dram[2][8];
            io_msg_block.MR3R2Nib17 = iv_msg_block_vars.iv_MR33_per_dram[2][9];
            io_msg_block.MR3R2Nib18 = iv_msg_block_vars.iv_MR33_per_dram[2][18];
            io_msg_block.MR3R2Nib19 = iv_msg_block_vars.iv_MR33_per_dram[2][19];

            io_msg_block.MR3R3Nib0 = iv_msg_block_vars.iv_MR33_per_dram[3][0];
            io_msg_block.MR3R3Nib1 = iv_msg_block_vars.iv_MR33_per_dram[3][1];
            io_msg_block.MR3R3Nib2 = iv_msg_block_vars.iv_MR33_per_dram[3][2];
            io_msg_block.MR3R3Nib3 = iv_msg_block_vars.iv_MR33_per_dram[3][3];
            io_msg_block.MR3R3Nib4 = iv_msg_block_vars.iv_MR33_per_dram[3][4];
            io_msg_block.MR3R3Nib5 = iv_msg_block_vars.iv_MR33_per_dram[3][5];
            io_msg_block.MR3R3Nib6 = iv_msg_block_vars.iv_MR33_per_dram[3][6];
            io_msg_block.MR3R3Nib7 = iv_msg_block_vars.iv_MR33_per_dram[3][7];
            io_msg_block.MR3R3Nib8 = iv_msg_block_vars.iv_MR33_per_dram[3][10];
            io_msg_block.MR3R3Nib9 = iv_msg_block_vars.iv_MR33_per_dram[3][11];
            io_msg_block.MR3R3Nib10 = iv_msg_block_vars.iv_MR33_per_dram[3][12];
            io_msg_block.MR3R3Nib11 = iv_msg_block_vars.iv_MR33_per_dram[3][13];
            io_msg_block.MR3R3Nib12 = iv_msg_block_vars.iv_MR33_per_dram[3][14];
            io_msg_block.MR3R3Nib13 = iv_msg_block_vars.iv_MR33_per_dram[3][15];
            io_msg_block.MR3R3Nib14 = iv_msg_block_vars.iv_MR33_per_dram[3][16];
            io_msg_block.MR3R3Nib15 = iv_msg_block_vars.iv_MR33_per_dram[3][17];
            io_msg_block.MR3R3Nib16 = iv_msg_block_vars.iv_MR33_per_dram[3][8];
            io_msg_block.MR3R3Nib17 = iv_msg_block_vars.iv_MR33_per_dram[3][9];
            io_msg_block.MR3R3Nib18 = iv_msg_block_vars.iv_MR33_per_dram[3][18];
            io_msg_block.MR3R3Nib19 = iv_msg_block_vars.iv_MR33_per_dram[3][19];

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameters VrefCSR[RANK]Nib[DRAM]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_VrefCS(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Note the swizzle from DRAM indexing to Synopsys indexing
            io_msg_block.VrefCSR0Nib0 = iv_msg_block_vars.iv_MR12[0][0];
            io_msg_block.VrefCSR0Nib1 = iv_msg_block_vars.iv_MR12[0][1];
            io_msg_block.VrefCSR0Nib2 = iv_msg_block_vars.iv_MR12[0][2];
            io_msg_block.VrefCSR0Nib3 = iv_msg_block_vars.iv_MR12[0][3];
            io_msg_block.VrefCSR0Nib4 = iv_msg_block_vars.iv_MR12[0][4];
            io_msg_block.VrefCSR0Nib5 = iv_msg_block_vars.iv_MR12[0][5];
            io_msg_block.VrefCSR0Nib6 = iv_msg_block_vars.iv_MR12[0][6];
            io_msg_block.VrefCSR0Nib7 = iv_msg_block_vars.iv_MR12[0][7];
            io_msg_block.VrefCSR0Nib8 = iv_msg_block_vars.iv_MR12[0][10];
            io_msg_block.VrefCSR0Nib9 = iv_msg_block_vars.iv_MR12[0][11];
            io_msg_block.VrefCSR0Nib10 = iv_msg_block_vars.iv_MR12[0][12];
            io_msg_block.VrefCSR0Nib11 = iv_msg_block_vars.iv_MR12[0][13];
            io_msg_block.VrefCSR0Nib12 = iv_msg_block_vars.iv_MR12[0][14];
            io_msg_block.VrefCSR0Nib13 = iv_msg_block_vars.iv_MR12[0][15];
            io_msg_block.VrefCSR0Nib14 = iv_msg_block_vars.iv_MR12[0][16];
            io_msg_block.VrefCSR0Nib15 = iv_msg_block_vars.iv_MR12[0][17];
            io_msg_block.VrefCSR0Nib16 = iv_msg_block_vars.iv_MR12[0][8];
            io_msg_block.VrefCSR0Nib17 = iv_msg_block_vars.iv_MR12[0][9];
            io_msg_block.VrefCSR0Nib18 = iv_msg_block_vars.iv_MR12[0][18];
            io_msg_block.VrefCSR0Nib19 = iv_msg_block_vars.iv_MR12[0][19];

            io_msg_block.VrefCSR1Nib0 = iv_msg_block_vars.iv_MR12[1][0];
            io_msg_block.VrefCSR1Nib1 = iv_msg_block_vars.iv_MR12[1][1];
            io_msg_block.VrefCSR1Nib2 = iv_msg_block_vars.iv_MR12[1][2];
            io_msg_block.VrefCSR1Nib3 = iv_msg_block_vars.iv_MR12[1][3];
            io_msg_block.VrefCSR1Nib4 = iv_msg_block_vars.iv_MR12[1][4];
            io_msg_block.VrefCSR1Nib5 = iv_msg_block_vars.iv_MR12[1][5];
            io_msg_block.VrefCSR1Nib6 = iv_msg_block_vars.iv_MR12[1][6];
            io_msg_block.VrefCSR1Nib7 = iv_msg_block_vars.iv_MR12[1][7];
            io_msg_block.VrefCSR1Nib8 = iv_msg_block_vars.iv_MR12[1][10];
            io_msg_block.VrefCSR1Nib9 = iv_msg_block_vars.iv_MR12[1][11];
            io_msg_block.VrefCSR1Nib10 = iv_msg_block_vars.iv_MR12[1][12];
            io_msg_block.VrefCSR1Nib11 = iv_msg_block_vars.iv_MR12[1][13];
            io_msg_block.VrefCSR1Nib12 = iv_msg_block_vars.iv_MR12[1][14];
            io_msg_block.VrefCSR1Nib13 = iv_msg_block_vars.iv_MR12[1][15];
            io_msg_block.VrefCSR1Nib14 = iv_msg_block_vars.iv_MR12[1][16];
            io_msg_block.VrefCSR1Nib15 = iv_msg_block_vars.iv_MR12[1][17];
            io_msg_block.VrefCSR1Nib16 = iv_msg_block_vars.iv_MR12[1][8];
            io_msg_block.VrefCSR1Nib17 = iv_msg_block_vars.iv_MR12[1][9];
            io_msg_block.VrefCSR1Nib18 = iv_msg_block_vars.iv_MR12[1][18];
            io_msg_block.VrefCSR1Nib19 = iv_msg_block_vars.iv_MR12[1][19];

            io_msg_block.VrefCSR2Nib0 = iv_msg_block_vars.iv_MR12[2][0];
            io_msg_block.VrefCSR2Nib1 = iv_msg_block_vars.iv_MR12[2][1];
            io_msg_block.VrefCSR2Nib2 = iv_msg_block_vars.iv_MR12[2][2];
            io_msg_block.VrefCSR2Nib3 = iv_msg_block_vars.iv_MR12[2][3];
            io_msg_block.VrefCSR2Nib4 = iv_msg_block_vars.iv_MR12[2][4];
            io_msg_block.VrefCSR2Nib5 = iv_msg_block_vars.iv_MR12[2][5];
            io_msg_block.VrefCSR2Nib6 = iv_msg_block_vars.iv_MR12[2][6];
            io_msg_block.VrefCSR2Nib7 = iv_msg_block_vars.iv_MR12[2][7];
            io_msg_block.VrefCSR2Nib8 = iv_msg_block_vars.iv_MR12[2][10];
            io_msg_block.VrefCSR2Nib9 = iv_msg_block_vars.iv_MR12[2][11];
            io_msg_block.VrefCSR2Nib10 = iv_msg_block_vars.iv_MR12[2][12];
            io_msg_block.VrefCSR2Nib11 = iv_msg_block_vars.iv_MR12[2][13];
            io_msg_block.VrefCSR2Nib12 = iv_msg_block_vars.iv_MR12[2][14];
            io_msg_block.VrefCSR2Nib13 = iv_msg_block_vars.iv_MR12[2][15];
            io_msg_block.VrefCSR2Nib14 = iv_msg_block_vars.iv_MR12[2][16];
            io_msg_block.VrefCSR2Nib15 = iv_msg_block_vars.iv_MR12[2][17];
            io_msg_block.VrefCSR2Nib16 = iv_msg_block_vars.iv_MR12[2][8];
            io_msg_block.VrefCSR2Nib17 = iv_msg_block_vars.iv_MR12[2][9];
            io_msg_block.VrefCSR2Nib18 = iv_msg_block_vars.iv_MR12[2][18];
            io_msg_block.VrefCSR2Nib19 = iv_msg_block_vars.iv_MR12[2][19];

            io_msg_block.VrefCSR3Nib0 = iv_msg_block_vars.iv_MR12[3][0];
            io_msg_block.VrefCSR3Nib1 = iv_msg_block_vars.iv_MR12[3][1];
            io_msg_block.VrefCSR3Nib2 = iv_msg_block_vars.iv_MR12[3][2];
            io_msg_block.VrefCSR3Nib3 = iv_msg_block_vars.iv_MR12[3][3];
            io_msg_block.VrefCSR3Nib4 = iv_msg_block_vars.iv_MR12[3][4];
            io_msg_block.VrefCSR3Nib5 = iv_msg_block_vars.iv_MR12[3][5];
            io_msg_block.VrefCSR3Nib6 = iv_msg_block_vars.iv_MR12[3][6];
            io_msg_block.VrefCSR3Nib7 = iv_msg_block_vars.iv_MR12[3][7];
            io_msg_block.VrefCSR3Nib8 = iv_msg_block_vars.iv_MR12[3][10];
            io_msg_block.VrefCSR3Nib9 = iv_msg_block_vars.iv_MR12[3][11];
            io_msg_block.VrefCSR3Nib10 = iv_msg_block_vars.iv_MR12[3][12];
            io_msg_block.VrefCSR3Nib11 = iv_msg_block_vars.iv_MR12[3][13];
            io_msg_block.VrefCSR3Nib12 = iv_msg_block_vars.iv_MR12[3][14];
            io_msg_block.VrefCSR3Nib13 = iv_msg_block_vars.iv_MR12[3][15];
            io_msg_block.VrefCSR3Nib14 = iv_msg_block_vars.iv_MR12[3][16];
            io_msg_block.VrefCSR3Nib15 = iv_msg_block_vars.iv_MR12[3][17];
            io_msg_block.VrefCSR3Nib16 = iv_msg_block_vars.iv_MR12[3][8];
            io_msg_block.VrefCSR3Nib17 = iv_msg_block_vars.iv_MR12[3][9];
            io_msg_block.VrefCSR3Nib18 = iv_msg_block_vars.iv_MR12[3][18];
            io_msg_block.VrefCSR3Nib19 = iv_msg_block_vars.iv_MR12[3][19];

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameters VrefCAR[RANK]Nib[DRAM]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_VrefCA(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Note the swizzle from DRAM indexing to Synopsys indexing
            io_msg_block.VrefCAR0Nib0 = iv_msg_block_vars.iv_MR11[0][0];
            io_msg_block.VrefCAR0Nib1 = iv_msg_block_vars.iv_MR11[0][1];
            io_msg_block.VrefCAR0Nib2 = iv_msg_block_vars.iv_MR11[0][2];
            io_msg_block.VrefCAR0Nib3 = iv_msg_block_vars.iv_MR11[0][3];
            io_msg_block.VrefCAR0Nib4 = iv_msg_block_vars.iv_MR11[0][4];
            io_msg_block.VrefCAR0Nib5 = iv_msg_block_vars.iv_MR11[0][5];
            io_msg_block.VrefCAR0Nib6 = iv_msg_block_vars.iv_MR11[0][6];
            io_msg_block.VrefCAR0Nib7 = iv_msg_block_vars.iv_MR11[0][7];
            io_msg_block.VrefCAR0Nib8 = iv_msg_block_vars.iv_MR11[0][10];
            io_msg_block.VrefCAR0Nib9 = iv_msg_block_vars.iv_MR11[0][11];
            io_msg_block.VrefCAR0Nib10 = iv_msg_block_vars.iv_MR11[0][12];
            io_msg_block.VrefCAR0Nib11 = iv_msg_block_vars.iv_MR11[0][13];
            io_msg_block.VrefCAR0Nib12 = iv_msg_block_vars.iv_MR11[0][14];
            io_msg_block.VrefCAR0Nib13 = iv_msg_block_vars.iv_MR11[0][15];
            io_msg_block.VrefCAR0Nib14 = iv_msg_block_vars.iv_MR11[0][16];
            io_msg_block.VrefCAR0Nib15 = iv_msg_block_vars.iv_MR11[0][17];
            io_msg_block.VrefCAR0Nib16 = iv_msg_block_vars.iv_MR11[0][8];
            io_msg_block.VrefCAR0Nib17 = iv_msg_block_vars.iv_MR11[0][9];
            io_msg_block.VrefCAR0Nib18 = iv_msg_block_vars.iv_MR11[0][18];
            io_msg_block.VrefCAR0Nib19 = iv_msg_block_vars.iv_MR11[0][19];

            io_msg_block.VrefCAR1Nib0 = iv_msg_block_vars.iv_MR11[1][0];
            io_msg_block.VrefCAR1Nib1 = iv_msg_block_vars.iv_MR11[1][1];
            io_msg_block.VrefCAR1Nib2 = iv_msg_block_vars.iv_MR11[1][2];
            io_msg_block.VrefCAR1Nib3 = iv_msg_block_vars.iv_MR11[1][3];
            io_msg_block.VrefCAR1Nib4 = iv_msg_block_vars.iv_MR11[1][4];
            io_msg_block.VrefCAR1Nib5 = iv_msg_block_vars.iv_MR11[1][5];
            io_msg_block.VrefCAR1Nib6 = iv_msg_block_vars.iv_MR11[1][6];
            io_msg_block.VrefCAR1Nib7 = iv_msg_block_vars.iv_MR11[1][7];
            io_msg_block.VrefCAR1Nib8 = iv_msg_block_vars.iv_MR11[1][10];
            io_msg_block.VrefCAR1Nib9 = iv_msg_block_vars.iv_MR11[1][11];
            io_msg_block.VrefCAR1Nib10 = iv_msg_block_vars.iv_MR11[1][12];
            io_msg_block.VrefCAR1Nib11 = iv_msg_block_vars.iv_MR11[1][13];
            io_msg_block.VrefCAR1Nib12 = iv_msg_block_vars.iv_MR11[1][14];
            io_msg_block.VrefCAR1Nib13 = iv_msg_block_vars.iv_MR11[1][15];
            io_msg_block.VrefCAR1Nib14 = iv_msg_block_vars.iv_MR11[1][16];
            io_msg_block.VrefCAR1Nib15 = iv_msg_block_vars.iv_MR11[1][17];
            io_msg_block.VrefCAR1Nib16 = iv_msg_block_vars.iv_MR11[1][8];
            io_msg_block.VrefCAR1Nib17 = iv_msg_block_vars.iv_MR11[1][9];
            io_msg_block.VrefCAR1Nib18 = iv_msg_block_vars.iv_MR11[1][18];
            io_msg_block.VrefCAR1Nib19 = iv_msg_block_vars.iv_MR11[1][19];

            io_msg_block.VrefCAR2Nib0 = iv_msg_block_vars.iv_MR11[2][0];
            io_msg_block.VrefCAR2Nib1 = iv_msg_block_vars.iv_MR11[2][1];
            io_msg_block.VrefCAR2Nib2 = iv_msg_block_vars.iv_MR11[2][2];
            io_msg_block.VrefCAR2Nib3 = iv_msg_block_vars.iv_MR11[2][3];
            io_msg_block.VrefCAR2Nib4 = iv_msg_block_vars.iv_MR11[2][4];
            io_msg_block.VrefCAR2Nib5 = iv_msg_block_vars.iv_MR11[2][5];
            io_msg_block.VrefCAR2Nib6 = iv_msg_block_vars.iv_MR11[2][6];
            io_msg_block.VrefCAR2Nib7 = iv_msg_block_vars.iv_MR11[2][7];
            io_msg_block.VrefCAR2Nib8 = iv_msg_block_vars.iv_MR11[2][10];
            io_msg_block.VrefCAR2Nib9 = iv_msg_block_vars.iv_MR11[2][11];
            io_msg_block.VrefCAR2Nib10 = iv_msg_block_vars.iv_MR11[2][12];
            io_msg_block.VrefCAR2Nib11 = iv_msg_block_vars.iv_MR11[2][13];
            io_msg_block.VrefCAR2Nib12 = iv_msg_block_vars.iv_MR11[2][14];
            io_msg_block.VrefCAR2Nib13 = iv_msg_block_vars.iv_MR11[2][15];
            io_msg_block.VrefCAR2Nib14 = iv_msg_block_vars.iv_MR11[2][16];
            io_msg_block.VrefCAR2Nib15 = iv_msg_block_vars.iv_MR11[2][17];
            io_msg_block.VrefCAR2Nib16 = iv_msg_block_vars.iv_MR11[2][8];
            io_msg_block.VrefCAR2Nib17 = iv_msg_block_vars.iv_MR11[2][9];
            io_msg_block.VrefCAR2Nib18 = iv_msg_block_vars.iv_MR11[2][18];
            io_msg_block.VrefCAR2Nib19 = iv_msg_block_vars.iv_MR11[2][19];

            io_msg_block.VrefCAR3Nib0 = iv_msg_block_vars.iv_MR11[3][0];
            io_msg_block.VrefCAR3Nib1 = iv_msg_block_vars.iv_MR11[3][1];
            io_msg_block.VrefCAR3Nib2 = iv_msg_block_vars.iv_MR11[3][2];
            io_msg_block.VrefCAR3Nib3 = iv_msg_block_vars.iv_MR11[3][3];
            io_msg_block.VrefCAR3Nib4 = iv_msg_block_vars.iv_MR11[3][4];
            io_msg_block.VrefCAR3Nib5 = iv_msg_block_vars.iv_MR11[3][5];
            io_msg_block.VrefCAR3Nib6 = iv_msg_block_vars.iv_MR11[3][6];
            io_msg_block.VrefCAR3Nib7 = iv_msg_block_vars.iv_MR11[3][7];
            io_msg_block.VrefCAR3Nib8 = iv_msg_block_vars.iv_MR11[3][10];
            io_msg_block.VrefCAR3Nib9 = iv_msg_block_vars.iv_MR11[3][11];
            io_msg_block.VrefCAR3Nib10 = iv_msg_block_vars.iv_MR11[3][12];
            io_msg_block.VrefCAR3Nib11 = iv_msg_block_vars.iv_MR11[3][13];
            io_msg_block.VrefCAR3Nib12 = iv_msg_block_vars.iv_MR11[3][14];
            io_msg_block.VrefCAR3Nib13 = iv_msg_block_vars.iv_MR11[3][15];
            io_msg_block.VrefCAR3Nib14 = iv_msg_block_vars.iv_MR11[3][16];
            io_msg_block.VrefCAR3Nib15 = iv_msg_block_vars.iv_MR11[3][17];
            io_msg_block.VrefCAR3Nib16 = iv_msg_block_vars.iv_MR11[3][8];
            io_msg_block.VrefCAR3Nib17 = iv_msg_block_vars.iv_MR11[3][9];
            io_msg_block.VrefCAR3Nib18 = iv_msg_block_vars.iv_MR11[3][18];
            io_msg_block.VrefCAR3Nib19 = iv_msg_block_vars.iv_MR11[3][19];

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameters DisabledDB[BYTE]LaneR[RANK]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        ///
        fapi2::ReturnCode setup_DisabledDB(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            fapi2::buffer<uint32_t> l_nibble_enables = iv_msg_block_vars.iv_nibbles_enables[0];
            uint8_t l_byte_disables[10] = {};
            FAPI_TRY(nibble_enable_db_disable(l_nibble_enables, l_byte_disables));

            // SPD to PHY nibble swizzle is implemented in the getBits indexing
            io_msg_block.DisabledDB0LaneR0 = l_byte_disables[0];
            io_msg_block.DisabledDB0LaneR1 = l_byte_disables[0];
            io_msg_block.DisabledDB0LaneR2 = l_byte_disables[0];
            io_msg_block.DisabledDB0LaneR3 = l_byte_disables[0];

            io_msg_block.DisabledDB1LaneR0 = l_byte_disables[1];
            io_msg_block.DisabledDB1LaneR1 = l_byte_disables[1];
            io_msg_block.DisabledDB1LaneR2 = l_byte_disables[1];
            io_msg_block.DisabledDB1LaneR3 = l_byte_disables[1];

            io_msg_block.DisabledDB2LaneR0 = l_byte_disables[2];
            io_msg_block.DisabledDB2LaneR1 = l_byte_disables[2];
            io_msg_block.DisabledDB2LaneR2 = l_byte_disables[2];
            io_msg_block.DisabledDB2LaneR3 = l_byte_disables[2];

            io_msg_block.DisabledDB3LaneR0 = l_byte_disables[3];
            io_msg_block.DisabledDB3LaneR1 = l_byte_disables[3];
            io_msg_block.DisabledDB3LaneR2 = l_byte_disables[3];
            io_msg_block.DisabledDB3LaneR3 = l_byte_disables[3];

            io_msg_block.DisabledDB4LaneR0 = l_byte_disables[4];
            io_msg_block.DisabledDB4LaneR1 = l_byte_disables[4];
            io_msg_block.DisabledDB4LaneR2 = l_byte_disables[4];
            io_msg_block.DisabledDB4LaneR3 = l_byte_disables[4];

            io_msg_block.DisabledDB5LaneR0 = l_byte_disables[5];
            io_msg_block.DisabledDB5LaneR1 = l_byte_disables[5];
            io_msg_block.DisabledDB5LaneR2 = l_byte_disables[5];
            io_msg_block.DisabledDB5LaneR3 = l_byte_disables[5];

            io_msg_block.DisabledDB6LaneR0 = l_byte_disables[6];
            io_msg_block.DisabledDB6LaneR1 = l_byte_disables[6];
            io_msg_block.DisabledDB6LaneR2 = l_byte_disables[6];
            io_msg_block.DisabledDB6LaneR3 = l_byte_disables[6];

            io_msg_block.DisabledDB7LaneR0 = l_byte_disables[7];
            io_msg_block.DisabledDB7LaneR1 = l_byte_disables[7];
            io_msg_block.DisabledDB7LaneR2 = l_byte_disables[7];
            io_msg_block.DisabledDB7LaneR3 = l_byte_disables[7];

            io_msg_block.DisabledDB8LaneR0 = l_byte_disables[8];
            io_msg_block.DisabledDB8LaneR1 = l_byte_disables[8];
            io_msg_block.DisabledDB8LaneR2 = l_byte_disables[8];
            io_msg_block.DisabledDB8LaneR3 = l_byte_disables[8];

            io_msg_block.DisabledDB9LaneR0 = l_byte_disables[9];
            io_msg_block.DisabledDB9LaneR1 = l_byte_disables[9];
            io_msg_block.DisabledDB9LaneR2 = l_byte_disables[9];
            io_msg_block.DisabledDB9LaneR3 = l_byte_disables[9];

        fapi_try_exit:
            return fapi2::current_err;
        }

        ///
        /// @brief msg_block_params structure setup for Vref_Sweep parameters
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        /// @note these are new in the M18 software
        ///
        fapi2::ReturnCode setup_vref_sweeps(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            io_msg_block.VrefCS_Sweep_Min = iv_msg_block_vars.iv_VrefCS_Sweep_Min;
            io_msg_block.VrefCS_Sweep_Max = iv_msg_block_vars.iv_VrefCS_Sweep_Max;
            io_msg_block.VrefCA_Sweep_Min = iv_msg_block_vars.iv_VrefCA_Sweep_Min;
            io_msg_block.VrefCA_Sweep_Max = iv_msg_block_vars.iv_VrefCA_Sweep_Max;

            return fapi2::FAPI2_RC_SUCCESS;
        }

        ///
        /// @brief msg_block_params structure setup for parameters MR32R[RANK]Nib[DRAM]
        /// @param[in,out] io_msg_block the PMU_SMB_DDR5U_1D_t struct
        /// @return FAPI2_RC_SUCCESS iff okay
        /// @note these are new in the M18 software
        ///
        fapi2::ReturnCode setup_MR32_per_dram(PMU_SMB_DDR5U_1D_t& io_msg_block) const
        {
            // Note the swizzle from DRAM indexing to Synopsys indexing
            io_msg_block.MR32R0Nib0 = iv_msg_block_vars.iv_MR32_per_dram[0][0];
            io_msg_block.MR32R0Nib1 = iv_msg_block_vars.iv_MR32_per_dram[0][1];
            io_msg_block.MR32R0Nib2 = iv_msg_block_vars.iv_MR32_per_dram[0][2];
            io_msg_block.MR32R0Nib3 = iv_msg_block_vars.iv_MR32_per_dram[0][3];
            io_msg_block.MR32R0Nib4 = iv_msg_block_vars.iv_MR32_per_dram[0][4];
            io_msg_block.MR32R0Nib5 = iv_msg_block_vars.iv_MR32_per_dram[0][5];
            io_msg_block.MR32R0Nib6 = iv_msg_block_vars.iv_MR32_per_dram[0][6];
            io_msg_block.MR32R0Nib7 = iv_msg_block_vars.iv_MR32_per_dram[0][7];
            io_msg_block.MR32R0Nib8 = iv_msg_block_vars.iv_MR32_per_dram[0][10];
            io_msg_block.MR32R0Nib9 = iv_msg_block_vars.iv_MR32_per_dram[0][11];
            io_msg_block.MR32R0Nib10 = iv_msg_block_vars.iv_MR32_per_dram[0][12];
            io_msg_block.MR32R0Nib11 = iv_msg_block_vars.iv_MR32_per_dram[0][13];
            io_msg_block.MR32R0Nib12 = iv_msg_block_vars.iv_MR32_per_dram[0][14];
            io_msg_block.MR32R0Nib13 = iv_msg_block_vars.iv_MR32_per_dram[0][15];
            io_msg_block.MR32R0Nib14 = iv_msg_block_vars.iv_MR32_per_dram[0][16];
            io_msg_block.MR32R0Nib15 = iv_msg_block_vars.iv_MR32_per_dram[0][17];
            io_msg_block.MR32R0Nib16 = iv_msg_block_vars.iv_MR32_per_dram[0][8];
            io_msg_block.MR32R0Nib17 = iv_msg_block_vars.iv_MR32_per_dram[0][9];
            io_msg_block.MR32R0Nib18 = iv_msg_block_vars.iv_MR32_per_dram[0][18];
            io_msg_block.MR32R0Nib19 = iv_msg_block_vars.iv_MR32_per_dram[0][19];

            io_msg_block.MR32R1Nib0 = iv_msg_block_vars.iv_MR32_per_dram[1][0];
            io_msg_block.MR32R1Nib1 = iv_msg_block_vars.iv_MR32_per_dram[1][1];
            io_msg_block.MR32R1Nib2 = iv_msg_block_vars.iv_MR32_per_dram[1][2];
            io_msg_block.MR32R1Nib3 = iv_msg_block_vars.iv_MR32_per_dram[1][3];
            io_msg_block.MR32R1Nib4 = iv_msg_block_vars.iv_MR32_per_dram[1][4];
            io_msg_block.MR32R1Nib5 = iv_msg_block_vars.iv_MR32_per_dram[1][5];
            io_msg_block.MR32R1Nib6 = iv_msg_block_vars.iv_MR32_per_dram[1][6];
            io_msg_block.MR32R1Nib7 = iv_msg_block_vars.iv_MR32_per_dram[1][7];
            io_msg_block.MR32R1Nib8 = iv_msg_block_vars.iv_MR32_per_dram[1][10];
            io_msg_block.MR32R1Nib9 = iv_msg_block_vars.iv_MR32_per_dram[1][11];
            io_msg_block.MR32R1Nib10 = iv_msg_block_vars.iv_MR32_per_dram[1][12];
            io_msg_block.MR32R1Nib11 = iv_msg_block_vars.iv_MR32_per_dram[1][13];
            io_msg_block.MR32R1Nib12 = iv_msg_block_vars.iv_MR32_per_dram[1][14];
            io_msg_block.MR32R1Nib13 = iv_msg_block_vars.iv_MR32_per_dram[1][15];
            io_msg_block.MR32R1Nib14 = iv_msg_block_vars.iv_MR32_per_dram[1][16];
            io_msg_block.MR32R1Nib15 = iv_msg_block_vars.iv_MR32_per_dram[1][17];
            io_msg_block.MR32R1Nib16 = iv_msg_block_vars.iv_MR32_per_dram[1][8];
            io_msg_block.MR32R1Nib17 = iv_msg_block_vars.iv_MR32_per_dram[1][9];
            io_msg_block.MR32R1Nib18 = iv_msg_block_vars.iv_MR32_per_dram[1][18];
            io_msg_block.MR32R1Nib19 = iv_msg_block_vars.iv_MR32_per_dram[1][19];

            io_msg_block.MR32R2Nib0 = iv_msg_block_vars.iv_MR32_per_dram[2][0];
            io_msg_block.MR32R2Nib1 = iv_msg_block_vars.iv_MR32_per_dram[2][1];
            io_msg_block.MR32R2Nib2 = iv_msg_block_vars.iv_MR32_per_dram[2][2];
            io_msg_block.MR32R2Nib3 = iv_msg_block_vars.iv_MR32_per_dram[2][3];
            io_msg_block.MR32R2Nib4 = iv_msg_block_vars.iv_MR32_per_dram[2][4];
            io_msg_block.MR32R2Nib5 = iv_msg_block_vars.iv_MR32_per_dram[2][5];
            io_msg_block.MR32R2Nib6 = iv_msg_block_vars.iv_MR32_per_dram[2][6];
            io_msg_block.MR32R2Nib7 = iv_msg_block_vars.iv_MR32_per_dram[2][7];
            io_msg_block.MR32R2Nib8 = iv_msg_block_vars.iv_MR32_per_dram[2][10];
            io_msg_block.MR32R2Nib9 = iv_msg_block_vars.iv_MR32_per_dram[2][11];
            io_msg_block.MR32R2Nib10 = iv_msg_block_vars.iv_MR32_per_dram[2][12];
            io_msg_block.MR32R2Nib11 = iv_msg_block_vars.iv_MR32_per_dram[2][13];
            io_msg_block.MR32R2Nib12 = iv_msg_block_vars.iv_MR32_per_dram[2][14];
            io_msg_block.MR32R2Nib13 = iv_msg_block_vars.iv_MR32_per_dram[2][15];
            io_msg_block.MR32R2Nib14 = iv_msg_block_vars.iv_MR32_per_dram[2][16];
            io_msg_block.MR32R2Nib15 = iv_msg_block_vars.iv_MR32_per_dram[2][17];
            io_msg_block.MR32R2Nib16 = iv_msg_block_vars.iv_MR32_per_dram[2][8];
            io_msg_block.MR32R2Nib17 = iv_msg_block_vars.iv_MR32_per_dram[2][9];
            io_msg_block.MR32R2Nib18 = iv_msg_block_vars.iv_MR32_per_dram[2][18];
            io_msg_block.MR32R2Nib19 = iv_msg_block_vars.iv_MR32_per_dram[2][19];

            io_msg_block.MR32R3Nib0 = iv_msg_block_vars.iv_MR32_per_dram[3][0];
            io_msg_block.MR32R3Nib1 = iv_msg_block_vars.iv_MR32_per_dram[3][1];
            io_msg_block.MR32R3Nib2 = iv_msg_block_vars.iv_MR32_per_dram[3][2];
            io_msg_block.MR32R3Nib3 = iv_msg_block_vars.iv_MR32_per_dram[3][3];
            io_msg_block.MR32R3Nib4 = iv_msg_block_vars.iv_MR32_per_dram[3][4];
            io_msg_block.MR32R3Nib5 = iv_msg_block_vars.iv_MR32_per_dram[3][5];
            io_msg_block.MR32R3Nib6 = iv_msg_block_vars.iv_MR32_per_dram[3][6];
            io_msg_block.MR32R3Nib7 = iv_msg_block_vars.iv_MR32_per_dram[3][7];
            io_msg_block.MR32R3Nib8 = iv_msg_block_vars.iv_MR32_per_dram[3][10];
            io_msg_block.MR32R3Nib9 = iv_msg_block_vars.iv_MR32_per_dram[3][11];
            io_msg_block.MR32R3Nib10 = iv_msg_block_vars.iv_MR32_per_dram[3][12];
            io_msg_block.MR32R3Nib11 = iv_msg_block_vars.iv_MR32_per_dram[3][13];
            io_msg_block.MR32R3Nib12 = iv_msg_block_vars.iv_MR32_per_dram[3][14];
            io_msg_block.MR32R3Nib13 = iv_msg_block_vars.iv_MR32_per_dram[3][15];
            io_msg_block.MR32R3Nib14 = iv_msg_block_vars.iv_MR32_per_dram[3][16];
            io_msg_block.MR32R3Nib15 = iv_msg_block_vars.iv_MR32_per_dram[3][17];
            io_msg_block.MR32R3Nib16 = iv_msg_block_vars.iv_MR32_per_dram[3][8];
            io_msg_block.MR32R3Nib17 = iv_msg_block_vars.iv_MR32_per_dram[3][9];
            io_msg_block.MR32R3Nib18 = iv_msg_block_vars.iv_MR32_per_dram[3][18];
            io_msg_block.MR32R3Nib19 = iv_msg_block_vars.iv_MR32_per_dram[3][19];

            return fapi2::FAPI2_RC_SUCCESS;
        }

};

///
/// @class rcw_id
/// @brief Contains information for RCW's as processed from the SMBus messages
///
struct rcw_id
{
    // Note: the comments show the Synopsys mappings
    // The IBM data starts at bit 32 and increases from there
    // So a Synopsys mapping of 31:28 will be an IBM mapping of 32:35
    enum bit_mappings
    {
        CHANNEL_ID     = 32, // Synopsys 31:28
        CHANNEL_ID_LEN = 4,
        DIMM_ID        = 36, // Synopsys 27:24
        DIMM_ID_LEN    = 4,
        RCW_ID         = 40, // Synopsys 23:16
        RCW_ID_LEN     = 8,
        RCW_PAGE       = 48, // Synopsys 15: 8
        RCW_PAGE_LEN   = 8,
        RCW_VAL        = 56, // Synopsys  7: 0
        RCW_VAL_LEN    = 8,
    };

    rcw_id() = delete;

    ///
    /// @brief Reads in and processes the SMBus formatted message
    ///
    rcw_id(const fapi2::buffer<uint64_t>& i_mail) :
        iv_channel_id(0),
        iv_dimm_id(0),
        iv_rcw_id(0),
        iv_rcw_page(0),
        iv_rcw_val(0)
    {
        i_mail.extractToRight<CHANNEL_ID, CHANNEL_ID_LEN>(iv_channel_id)
        .extractToRight<DIMM_ID, DIMM_ID_LEN>(iv_dimm_id)
        .extractToRight<RCW_ID, RCW_ID_LEN>(iv_rcw_id)
        .extractToRight<RCW_PAGE, RCW_PAGE_LEN>(iv_rcw_page)
        .extractToRight<RCW_VAL, RCW_VAL_LEN>(iv_rcw_val);
    }

    ///
    /// @brief rcw_id default destructor
    ///
    ~rcw_id() = default;

    uint8_t iv_channel_id = 0;
    uint8_t iv_dimm_id = 0;
    uint8_t iv_rcw_id = 0;
    uint8_t iv_rcw_page = 0;
    uint8_t iv_rcw_val = 0;
};

///
/// @brief Configures the DRAM training message block using attributes
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_sim value of ATTR_IS_SIMULATION
/// @param[out] o_struct the message block
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode configure_dram_train_message_block(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        const uint8_t i_sim,
        PMU_SMB_DDR5U_1D_t& o_struct);

///
/// @brief Loads binary into registers
/// @param[in] i_target the target on which to operate
/// @param[in] i_is_first_load value noting if this is the first load of the given memory array
/// @param[in] i_start_addr start address of  imem/dmem binary to be read through istream
/// @param[in] i_data_start data pointer  of imem/dmem
/// @param[in] i_mem_size size of the dmem/imem istream to be trasferred per loop
/// @param[in] i_mem_total_size total size of the dmem/imem istream
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode load_mem_bin_data(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
                                    const uint8_t i_is_first_load,
                                    const uint32_t i_start_addr,
                                    const uint8_t* const i_data_start,
                                    const uint32_t i_mem_size,
                                    const uint32_t i_mem_total_size);

///
///
/// @brief Initializes the protocol for mailbox interaction
/// @param[in] i_target the target on which to operate
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode init_mailbox_protocol(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target);

///
/// @brief Get the message passed through the mailbox protocol
/// @param[in] i_target the target on which to operate
/// @param[in] i_mode 16 bit or 32 bit to read major message or streaming & SMBus messages
/// @param[in] i_loop_count poll count for reading UCT_PROT_SHADOW.
/// @param[out] o_mail message read from the mailbox protocol.
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode get_mail (const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                            const uint8_t i_mode,
                            const uint64_t i_loop_count,
                            fapi2::buffer<uint64_t>& o_mail);

///
/// @brief Poll for mail to be available
/// @param[in] i_target the target on which to operate
/// @param[in] i_mailbox_poll_count poll count for reading UCT_PROT_SHADOW.
/// note: mode is set in the calling function. mail is returned based on that.
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode poll_for_message_available (const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        const uint64_t i_mailbox_poll_count);

///
/// @brief reads the message after it is available
/// @param[in] i_target the target on which to operate
/// @param[in] i_mode 16 bit or 32 bit to read major message or streaming & SMBus messages
/// @param[out] o_mail message read from the mailbox protocol.
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode read_message(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                               const uint8_t i_mode,
                               fapi2::buffer<uint64_t>& o_mail);

//
/// @brief Acknowledges that mail is received
/// @param[in] i_target the target on which to operate
/// @param[in] i_mailbox_poll_count poll count for reading UCT_PROT_SHADOW.
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode acknowledge_mail (const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                    const uint64_t i_mailbox_poll_count);


///
/// @brief Polls the mail until completion message is received
/// @param[in] i_target the target on which to operate
/// @param[in] i_training_poll_count poll count for getting mail.
/// @param[out] o_status final mail message from training, PASS/FAIL status if it completed
/// @param[out] o_log_data hwp_data_ostream of streaming log
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode poll_for_completion(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                      const uint64_t i_training_poll_count,
                                      uint64_t& o_status,
                                      fapi2::hwp_data_ostream& o_log_data );

///
/// @brief Checks the completion condition for training and decodes respective message
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_mail mail content to check for completion
/// @param[out] o_log_data hwp_data_ostream of streaming log
/// @param[out] o_loop_end flags that completion was detected, ending polling loop and skipping delay.
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode check_for_completion_and_decode(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        const fapi2::buffer<uint64_t>& i_mail,
        fapi2::hwp_data_ostream& o_log_data,
        bool& o_loop_end);

// Not needed for PPE as this is only being used for initial bringup/simulation which will not be running PPE
#ifndef __PPE__
///
/// @brief Configures the DRAM training message block using sim environment hardcoded values
/// @param[in] i_target the memory port on which to operate
/// @param[out] o_struct the message block
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode configure_dram_train_message_block_hardcodes(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>&
        i_target,
        PMU_SMB_DDR5U_1D_t& o_struct);
#endif

///
/// @brief Configures the msg block on to snps phy
/// @param[in] i_target the target on which to operate
/// @param[in,out] io_msg_block the message block to configure and load
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode configure_dram_train_message_block(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>&
        i_target,
        PMU_SMB_DDR5U_1D_t& io_msg_block);

///
/// @brief Configure and load the msg block on to snps phy
/// @param[in] i_target the target on which to operate
/// @param[in,out] io_msg_block the message block to configure and load
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode configure_and_load_dram_train_message_block(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>&
        i_target,
        PMU_SMB_DDR5U_1D_t& io_msg_block);

// The defines should be removed once GENERICI2C target is added to SBE
#if (!defined(__HOSTBOOT_MODULE) && !defined(__PPE__))
///
/// @brief Gets the RCD target that is needed for the i2c command
/// @param[in] i_target ocmb chip target
/// @param[out] o_rc return code of either fapi2::FAPI2_RC_SUCCESS or FAIL
/// @return RCD target or empty target
///
fapi2::Target<fapi2::TARGET_TYPE_GENERICI2CRESPONDER> get_rcd_target(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>&
        i_target, fapi2::ReturnCode& o_rc);

///
/// @brief Helper function to put together the data sent to i2c command
/// @param[in] i_rcw_info rcw info that need to be sent to i2c
/// @param[out] o_rcw_puti2c_data vector to put the i2c data
/// @return none
///
void assemble_rcw_i2c_data(const rcw_id& i_rcw_info, std::vector<uint8_t>& o_rcw_puti2c_data);
#endif
///
/// @brief Processes a streaming message from the mailbox protocol
/// @param[in] i_target the target on which to operate
/// @param[out] o_log_data hwp_data_ostream of streaming log
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode process_streaming_message(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        fapi2::hwp_data_ostream& o_log_data);

///
/// @brief Processes an SMBus message request (aka runs an RCW via i2c)
/// @param[in] i_target the target on which to operate
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
/// @note This function only handles the message interface for right now
/// TODO:ZEN:MST-1541 Add DDR5 RCW writes using i2c when SMBus message is received
///
fapi2::ReturnCode process_smbus_message(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target);

///
/// @brief Starts the firmware draminit training
/// @param[in] i_target the target on which to operate
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
/// @note Assumes that the firmware binaries and data structures are loaded appropriately
///
fapi2::ReturnCode start_training(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target);

///
/// @brief Stops the ARC processor
/// @param[in] i_target the target on which to operate
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode stall_arc_processor(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target);

///
/// @brief Cleans up from the firmware draminit training
/// @param[in] i_target the target on which to operate
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
/// @note puts the processor into a stall state
///
fapi2::ReturnCode cleanup_training(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target);

///
/// @brief constants for mailbox interaction
///
enum mailbox_consts
{
    // Initialization of protocol
    PROTOCOL_INIT = 1,

    // Responses received as major message
    SUCCESSFUL_COMPLETION = 0x07,
    FAILED_COMPLETION = 0xFF,
    STREAMING_MSG = 0x08,
    SMBUS_MSG = 0x50,
    SMBUS_SYNC = 0x51,

    // Stage completion Major messaging
    END_OF_INITILIAZATION = 0x00,
    END_OF_FINE_WRITE_LEVELING = 0x01,
    END_OF_READ_ENABLE_TRAINING = 0x02,
    END_OF_RD_DLY_CNTR_OPT = 0x03,
    END_OF_WR_DLY_CNTR_OPT = 0x04,
    END_OF_2D_RD_DLY_V_CNTR_OPT = 0x05,
    END_OF_2D_WR_DLY_V_CNTR_OPT = 0x06,
    END_OF_MAX_RD_LAT_TRAINING = 0x09,
    END_OF_RD_DQ_DSKEW_TRAINING = 0x0A,
    TRAINING_STAGE_RESERVED = 0x0B,
    END_OF_CS_CA_TRAINING = 0x0D,
    END_OF_RCD_QCS_QCA_TRAINING = 0x1D,
    END_OF_LRDIMM_MREP_TRAINING = 0x20,
    END_OF_LRDIMM_DWL_TRAINING = 0x21,
    END_OF_LRDIMM_MRD_TRAINING = 0x22,
    END_OF_LRDIMM_MWD_TRAINING = 0x23,
    GEN_WRT_NOISE_SYN = 0xA0,
    END_OF_MPR_RD_DLY_CNTR_OPT = 0xFD,
    END_OF_WR_LVL_COARSE_DLY = 0xFE,

    // Mode for reading major message vs streaming msg/SMBus msg
    MAJOR_MSG_MODE = 16,
    STREAMING_SMBUS_MSG_MODE = 32,

    // Register data for different messages
    MESSAGE_AVAILABLE = 0,
    RECEPTION_ACK = 0,
    ACK_MESSAGE = 1,
};

///
/// @brief Calculates the end addr of IMEM/DMEM image
/// @param[in] i_start_addr starting address of the image
/// @param[in] i_size size that needs to transferred at a time
/// @return uint32_t calculated end address
///
uint32_t calculate_image_end_addr(const uint32_t i_start_addr, const uint32_t i_size);

/// @brief Assembles a single registers worth of data from the buffer
/// @param[in] i_mem_size size of the dmem/imem istream to be transferred per loop
/// @param[in,out] io_bytes_copied the number of bytes copied
/// @param[in] i_current_byte the pointer to the current byte
/// @param[in,out] io_data the data for this register address
/// @return The updated pointer to the current byte
///
const uint8_t* assemble_mem_bin_data_reg(const uint32_t i_mem_size,
        uint32_t& io_bytes_copied,
        const uint8_t* const i_current_byte,
        fapi2::buffer<uint64_t>& io_data);

///
/// @brief Helper function to ody_load_dmem()
/// @param[in] i_target the ocmb chip target
/// @param[in] i_dmem_data dmem data image
/// @param[in] i_dmem_size size that needs to transferred at a time
/// @param[in] i_dmem_offset address offset of this chunk within the dmem image(in bytes)
/// @return FAPI2_RC_SUCCESS iff ok
///
fapi2::ReturnCode ody_load_dmem_helper(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
                                       const uint8_t* const i_dmem_data,
                                       const uint32_t i_dmem_size,
                                       const uint32_t i_dmem_offset);

///
/// @brief Helper function to ody_load_imem()
/// @param[in] i_target the ocmb chip target
/// @param[in] i_imem_data imem data image
/// @param[in] i_imem_size size that needs to transferred at a time
/// @param[in] i_imem_offset address offset of this chunk within the imem image(in bytes)
/// @return FAPI2_RC_SUCCESS iff ok
///
fapi2::ReturnCode ody_load_imem_helper(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target,
                                       const uint8_t* const i_imem_data,
                                       const uint32_t i_imem_size,
                                       const uint32_t i_imem_offset);
///
/// @brief Conducts an endian swap if needed on this message block address
/// @param[in] i_address the current address to load
/// @param[in] i_end_it the ending iterator of this array
/// @param[in,out] io_no_swap_it the current iterator to check for the address
/// @param[in,out] io_data the register data to update if needed
///
void endian_swap_msg_block_data(const uint64_t i_address, const uint32_t* const i_end_it,
                                const uint32_t*& io_no_swap_it, fapi2::buffer<uint64_t>& io_data);

///
/// @brief Loads the message block into the DMEM
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_struct the message block
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
/// @note Only loads the "input" fields
/// @note The guts of this function is auto-generated using gen_dmem_func.py
///       located in the ekb-lab/ody/mem/tools
///
fapi2::ReturnCode load_msg_block(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                 const _PMU_SMB_DDR5_1D_t& i_struct);

///
/// @brief Reads the message block from the DMEM
/// @param[in] i_target the memory port on which to operate
/// @param[in,out] io_struct the message block
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
/// @note Only loads the "output" fields
/// @note The guts of this function is auto-generated using gen_dmem_func.py
///       located in the ekb-lab/ody/mem/tools
///
fapi2::ReturnCode read_msg_block(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                 _PMU_SMB_DDR5_1D_t& io_struct);

///
/// @brief Sets the mode register attributes based upon the outputted data from draminit
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_msg_blk message block structure
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode set_mr_attributes(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                    const _PMU_SMB_DDR5_1D_t& i_msg_block);

///
/// @brief Sets the generic attributes based upon the outputted data from draminit
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_msg_blk message block structure
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode set_generic_attributes(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        const _PMU_SMB_DDR5_1D_t& i_msg_block);

///
/// @brief Sets the attributes based upon the outputted data from draminit
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_msg_blk message block structure
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode set_attributes(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                 const _PMU_SMB_DDR5_1D_t& i_msg_block);

/// @brief Prints the fields from the message block structure
/// @param[in] i_target the target on which to operate
/// @param[in] i_msg_blk message block structure
/// @return None
///
void display_msg_block(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                       const _PMU_SMB_DDR5_1D_t& i_msg_block);

///
/// @brief Checks the FW revision in the message block
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_is_sim true if this is a simulation run
/// @param[in] i_is_simics attribute value
/// @param[in] i_msg_block_response the message block
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode check_fw_revision(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                    const uint8_t i_is_sim,
                                    const uint8_t i_is_simics,
                                    const _PMU_SMB_DDR5_1D_t& i_msg_block_response);

///
/// @brief Checks the training status from mail and message block
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_status the final mail status from training
/// @param[in] i_msg_block_response the message block
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode check_training_result(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                        const uint64_t i_status,
                                        const _PMU_SMB_DDR5_1D_t& i_msg_block_response);

///
/// @brief Extracts the bad bits out of a structure for comparison purposes for the draminit recovery algorithm
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_bad_bits the bad bits to insert into the message block
/// @param[in,out] io_struct message block to update
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode update_struct_for_bad_bits(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        const uint8_t (&i_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT],
        PMU_SMB_DDR5U_1D_t& io_struct);

///
/// @brief Handles any address errors found in the prior run
/// @param[in] i_rank_info the rank info class under test
/// @param[in] i_dram the DRAM under test
/// @param[in] i_nibble_enables the nibbles enabled for this port
/// @param[in,out] io_status the status of the last training run
/// @param[in,out] io_start_bad_bits the starting bad bits before this training run - MC byte and PHY rank format
/// @param[in,out] io_struct the draminit message block
/// @param[in,out] io_bad_dram_on_rank
/// @param[out] o_log_data the ostream object containing streaming messages
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode handle_address_errors_internal(const mss::rank::info<mss::mc_type::ODYSSEY>& i_rank_info,
        const uint8_t i_dram,
        const fapi2::buffer<uint32_t>& i_nibble_enables,
        uint64_t& io_status,
        uint8_t (&io_start_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT],
        PMU_SMB_DDR5U_1D_t& io_struct,
        uint8_t& io_bad_dram_on_rank,
        fapi2::hwp_data_ostream& o_log_data);

///
/// @brief Handles any address errors found in the prior run
/// @param[in] i_target the memory port on which to operate
/// @param[in,out] io_status the status of the last training run
/// @param[in,out] io_start_bad_bits the starting bad bits before this training run - MC byte and PHY rank format
/// @param[in,out] io_struct the draminit message block
/// @param[in,out] io_is_first_addr_run true if this is the first address recovery run
/// @param[out] o_log_data the ostream object containing streaming messages
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode handle_address_errors(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                        uint64_t& io_status,
                                        uint8_t (&io_start_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT],
                                        PMU_SMB_DDR5U_1D_t& io_struct,
                                        bool& io_is_first_addr_run,
                                        fapi2::hwp_data_ostream& o_log_data);

///
/// @brief Handles any DQ errors found in the prior run
/// @param[in] i_target the memory port on which to operate
/// @param[in,out] io_status the status of the last training run
/// @param[in,out] io_start_bad_bits the starting bad bits before this training run - MC byte and PHY rank format
/// @param[in,out] io_struct the draminit message block
/// @param[out] o_log_data the ostream object containing streaming messages
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode handle_dq_errors(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                   uint64_t& io_status,
                                   uint8_t (&io_start_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT],
                                   PMU_SMB_DDR5U_1D_t& io_struct,
                                   fapi2::hwp_data_ostream& o_log_data);

///
/// @brief Displays the disable bits
/// @param[in] i_rank_info the rank information
/// @param[in] i_bad_bits the bad bits structure - bytes in the MC perspective. Bits and ranks in the PHY perspective
///
void display_disable_bits(const mss::rank::info<mss::mc_type::ODYSSEY>& i_rank_info,
                          const uint8_t (&i_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT]);

///
/// @brief Extracts the bad bits out of a structure for comparison purposes for the draminit recovery algorithm
/// @param[in] i_struct the draminit message block structure
/// @param[out] o_bad_bits the bad bits structure - bytes in the MC perspective. Bits and ranks in the PHY perspective
///
void extract_disable_bits(const PMU_SMB_DDR5U_1D_t& i_struct,
                          uint8_t (&o_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT]);

///
/// @brief Returns true if this run could contain address fails
/// @param[in] i_status the status from training
/// @param[in] i_struct the draminit message block structure
/// @return true if there is a potential address fail
///
inline bool has_address_fails(const uint8_t i_status, const PMU_SMB_DDR5U_1D_t& i_struct)
{
    constexpr uint8_t MSG_BLOCK_TRAIN_PASS = 0x00;
    return (i_status != SUCCESSFUL_COMPLETION) || (i_struct.CsTestFail != MSG_BLOCK_TRAIN_PASS);
}

///
/// @brief Returns true if this message block contains new bad bits
/// @param[in] i_start_bad_bits the starting bad bits
/// @param[in] i_struct the structure containing the current bad bits
/// @return true if the bad bits are not the same between the starting bad bits and bad bits in this structure
///
inline bool has_new_bad_bits(const uint8_t (&i_start_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT],
                             const PMU_SMB_DDR5U_1D_t& i_struct)
{
    uint8_t l_current_bad_bits[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT];
    extract_disable_bits(i_struct, l_current_bad_bits);

    return memcmp(l_current_bad_bits, i_start_bad_bits, sizeof i_start_bad_bits) != MEMCMP_EQUAL;
}


///
/// @brief Returns true if this message block contains new bad bits
/// @param[in] i_status the status from training
/// @param[in] i_start_bad_bits the starting bad bits
/// @param[in] i_struct the structure containing the current bad bits
/// @param[in] i_loop_num the current loop number
/// @param[in] i_max_loop_num the maximum loop number if i_loop_num is less than or equal to this, we can continue to loop
/// @return true if the recovery loop needs to run
///
inline bool is_recovery_loop_needed(const uint8_t i_status,
                                    const uint8_t (&i_start_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT],
                                    const PMU_SMB_DDR5U_1D_t& i_struct,
                                    const uint64_t i_loop_num,
                                    const uint64_t i_max_loop_num)
{
    return (mss::ody::phy::has_address_fails(i_status, i_struct) ||
            mss::ody::phy::has_new_bad_bits(i_start_bad_bits, i_struct)) &&
           i_loop_num <= i_max_loop_num;
}

///
/// @brief Checks if the DQ errors have exceeded the potential number of repairs
/// @param[in] i_target the memory port on which to operate
/// @param[in] i_status the status of the draminit run
/// @param[in] i_struct the draminit message block
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode check_for_dq_repairs_exceeded(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        const uint64_t i_status,
        const PMU_SMB_DDR5U_1D_t& i_struct);

///
/// @brief Runs training and processes some of the results
/// @param[in] i_target the memory port on which to operate
/// @param[in,out] io_status the status of the last training run
/// @param[in,out] io_start_bad_bits the starting bad bits before this training run - MC byte and PHY rank format
/// @param[in,out] io_struct the draminit message block
/// @param[out] o_log_data the ostream object containing streaming messages
/// @param[in] i_update_bad_bits true if io_start_bad_bits should be updated prior to this run - defaults to TRUE
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode run_training_helper(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
                                      uint64_t& io_status,
                                      uint8_t (&io_start_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT],
                                      PMU_SMB_DDR5U_1D_t& io_struct,
                                      fapi2::hwp_data_ostream& o_log_data,
                                      const bool i_update_bad_bits = true);

///
/// @brief Attempts to recover from any errors found during draminit - will not run if no errors occured
/// @param[in] i_target the memory port on which to operate
/// @param[in,out] io_status the status of the last training run
/// @param[in,out] io_start_bad_bits the starting bad bits before this training run - MC byte and PHY rank format
/// @param[in,out] io_struct the draminit message block
/// @param[out] o_log_data the ostream object containing streaming messages
/// @return fapi2::FAPI2_RC_SUCCESS iff successful
///
fapi2::ReturnCode handle_draminit_recovery(const fapi2::Target<fapi2::TARGET_TYPE_MEM_PORT>& i_target,
        uint64_t& io_status,
        uint8_t (&io_start_bad_bits)[BAD_BITS_RANKS][BAD_DQ_BYTE_COUNT],
        PMU_SMB_DDR5U_1D_t& io_struct,
        fapi2::hwp_data_ostream& o_log_data);

///
/// @brief Checks verbosity of draminit debug logs
/// @param[in] i_target the memory port on which to operate
/// @return fapi2::FAPI2_RC_SUCCESS iff verbosity is no higher than COURSE_DEBUG on both
///
fapi2::ReturnCode check_draminit_verbosity(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target);

///
/// @brief Returns max size of Synopsys training log
/// @param[in] i_port_verbosity Memory port verbosity
/// @return uint32_t of buffer size in B
///
uint32_t getBufferSizeFromVerboseAttr(const uint8_t i_port_verbosity);

} // namespace phy
} // namespace ody
} // namespace mss
#endif

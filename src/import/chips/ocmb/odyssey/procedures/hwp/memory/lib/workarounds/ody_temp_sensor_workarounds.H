/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/ocmb/odyssey/procedures/hwp/memory/lib/workarounds/ody_temp_sensor_workarounds.H $ */
/*                                                                        */
/* OpenPOWER HostBoot Project                                             */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2024                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// EKB-Mirror-To: hostboot

///
/// @file ody_temp_sensor_workarounds.H
/// @brief Workarounds for 4U temp sensor usage based on MRW attr
///
// *HWP HWP Owner: Sneha Kadam <sneha.kadam1@ibm.com>
// *HWP HWP Backup: Louis Stermole <stermole@us.ibm.com>
// *HWP Team: Memory
// *HWP Level: 3
// *HWP Consumed by: FSP:HB

#ifndef _ODY_TEMP_SENSOR_WORKAROUNDS_H_
#define _ODY_TEMP_SENSOR_WORKAROUNDS_H_

#include <fapi2.H>

namespace mss
{
namespace ody
{
namespace workarounds
{

///
/// @brief Changes temp sensor usage depending on MRW attr and height of DIMM
/// @param[in] i_target ocmb target on which to operate
/// @return fapi2::ReturnCode FAPI2_RC_SUCCESS iff success
/// @note 4U DDIMMs would use MEMCTRL, MC_EXT, and MC_DRAM sensor types
/// (where MC_EXT is really PMIC, and MC_DRAM is really DIMM).
/// Helper function to unit test this functionality
///
fapi2::ReturnCode change_temp_sensor_usage_helper(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target);

///
/// @brief Changes temp sensor usage depending on MRW attr and height of DIMM
/// @param[in] i_target ocmb target on which to operate
/// @return fapi2::ReturnCode FAPI2_RC_SUCCESS iff success
/// @note 4U DDIMMs would use MEMCTRL, MC_EXT, and MC_DRAM sensor types
/// (where MC_EXT is really PMIC, and MC_DRAM is really DIMM)
///
fapi2::ReturnCode change_temp_sensor_usage(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target);

///
/// @brief Disables DIMM Thermal sensor that are not configured to use
/// @param[in] i_target ocmb target on which to operate
/// @return fapi2::ReturnCode FAPI2_RC_SUCCESS iff success
///
fapi2::ReturnCode disable_unused_temp_sensor(const fapi2::Target<fapi2::TARGET_TYPE_OCMB_CHIP>& i_target);

} // workarounds
} // ody
} // mss

#endif

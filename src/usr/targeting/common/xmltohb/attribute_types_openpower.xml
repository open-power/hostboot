<!-- IBM_PROLOG_BEGIN_TAG                                                   -->
<!-- This is an automatically generated prolog.                             -->
<!--                                                                        -->
<!-- $Source: src/usr/targeting/common/xmltohb/attribute_types_openpower.xml $ -->
<!--                                                                        -->
<!-- OpenPOWER HostBoot Project                                             -->
<!--                                                                        -->
<!-- Contributors Listed Below - COPYRIGHT 2016,2024                        -->
<!-- [+] International Business Machines Corp.                              -->
<!--                                                                        -->
<!--                                                                        -->
<!-- Licensed under the Apache License, Version 2.0 (the "License");        -->
<!-- you may not use this file except in compliance with the License.       -->
<!-- You may obtain a copy of the License at                                -->
<!--                                                                        -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                         -->
<!--                                                                        -->
<!-- Unless required by applicable law or agreed to in writing, software    -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,      -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        -->
<!-- implied. See the License for the specific language governing           -->
<!-- permissions and limitations under the License.                         -->
<!--                                                                        -->
<!-- IBM_PROLOG_END_TAG                                                     -->
<!-- =====================================================================
     Contains the definition of attributes that are only available on
     openpower systems.  This file is only compiled when
     CONFIG_XML_INCLUDE_OPENPOWER is set to true and is always false on
     FSP based systems.
     =====================================================================
-->
<attributes>
  <attribute>
    <id>ADC_CHANNEL_FUNC_IDS</id>
    <description>ADC Channel function id. 16 channels.</description>
    <simpleType>
      <uint8_t/>
      <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>ADC_CHANNEL_GAINS</id>
    <description>ADC channel gain * 1000. 16 channels.</description>
    <simpleType>
      <uint32_t/>
      <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>ADC_CHANNEL_GNDS</id>
    <description>ADC Channel ground. 16 channels.</description>
    <simpleType>
      <uint8_t/>
      <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>ADC_CHANNEL_OFFSETS</id>
    <description>ADC channel offset * 1000. 16 channels</description>
    <simpleType>
      <uint32_t/>
      <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>ADC_CHANNEL_SENSOR_NUMBERS</id>
    <description>ADC Channel IPMI sensor numbers. 16 channels.</description>
    <simpleType>
      <uint32_t/>
      <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>APSS_GPIO_PORT_MODES</id>
    <description>APSS GPIO PORT MODES</description>
    <simpleType>
      <uint8_t/>
      <array>2</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>APSS_GPIO_PORT_PINS</id>
    <description>APSS GPIO PORT PINS
        Port0 pin 0-7
        Port1 pin 8-15
    </description>
    <simpleType>
      <uint8_t/>
      <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>BMC_HW_CHIP_TYPE</id>
    <description>The type of hardware of the BMC</description>
    <simpleType>
      <string>
        <default>ast2500</default>
        <sizeInclNull>32</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>BMC_MANUFACTURER</id>
    <description>The manufacturer of the BMC</description>
    <simpleType>
      <string>
        <default>ibm</default>
        <sizeInclNull>32</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>BMC_MAX_ERROR_LOG_SIZE</id>
    <description>max size of error log that can be sent to BMC</description>
    <simpleType>
      <uint32_t>
        <default>15360</default>
      </uint32_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>BMC_SW_TYPE</id>
    <description>The software type of the BMC</description>
    <simpleType>
      <string>
        <default>openbmc</default>
        <sizeInclNull>32</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>BOOT_PROGRESS_STATE</id>
    <description>
      The PLDM boot progress state of the ongoing IPL.
      Supported states:
        COMPLETED = 2 (HBRT state)
        MEM_INITIALIZATION = 3
        SEC_PROC_INITIALIZATION = 5
        BASE_BOARD_INITIALIZATION = 22
        PRIMARY_PROC_INITIALIZATION = 26
    </description>
    <simpleType>
      <uint16_t>
        <!-- See pldm_state_set_boot_progress_state_values enumeration,
             default to PRIMARY_PROC_INITIALIZATION -->
        <default>26</default>
      </uint16_t>
    </simpleType>
    <persistency>volatile</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <description>
        Used to map a bus# and rail# to a location code for VRM callouts.
        Mapping will be an array of structs encoded as an integer array.
        Each proc will have at most 4 structs because there are at most 4
        VRMs defined in the MRW and each VRM is controlled by a unique
        bus/rail combination.

        The struct is defined in hb_fru.C as bus_rail_loc_map and will
        look like:
        uint8_t bus#
        uint8_t rail#
        char location[50]
    </description>
    <id>BUS_RAIL_LOCATION_MAP</id>
    <persistency>volatile</persistency>
    <readable/>
    <simpleType>
      <array>208</array>
      <uint8_t/>
    </simpleType>
    <no_export/>
  </attribute>

  <attribute>
    <id>CALCULATED_MAX_SYS_POWER_EXCLUDING_GPUS</id>
    <description>
        HTMGT calculates the total non-GPU maximum power in W when the
        CPUs are at max frequency and memory at max power (least throttled)
        and then adds MISC_SYSTEM_COMPONENTS_MAX_POWER_WATTS
    </description>
    <simpleType>
      <uint16_t>
        <default>0x0000</default>
      </uint16_t>
    </simpleType>
    <persistency>volatile</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>CALCULATED_PROC_MEMORY_POWER_DROP</id>
    <description>
        HTMGT calculates the total processor/memory power drop in W when the
        CPUs are at min frequency and memory at min power (most throttled).
        This is the how much CALCULATED_MAX_SYS_POWER_EXCLUDING_GPUS
        can be reduced by.
    </description>
    <simpleType>
      <uint16_t>
        <default>0x0000</default>
      </uint16_t>
    </simpleType>
    <persistency>volatile</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <complexType>
      <description>
        Structure which describes the "Entity Identification Information" data
        type defined by the "Platform Level Data Model (PLDM) for Platform
        Monitoring and Control" specification (a.k.a. DSP0248) published by the
        DMTF.  WARNING: All fields are little endian.  Gives the entity
        identification information for the chassis.
      </description>
      <field>
        <default>0x0000</default>
        <description>
          Combination of the P/L bit and the Entity ID value. The P/L bit is a
          bit indicating whether the entity is a physical (0b0) or logical (0b1)
          entity.  The Entity ID is a 15-bit value from DSP0249 that identifies
          the general type of entity.
        </description>
        <name>entityType</name>
        <type>uint16_t</type>
      </field>
      <field>
        <default>0x0000</default>
        <description>
          16-bit number that differentiates among instances of entities that
          have the same Entity Type and Container ID values.
        </description>
        <name>entityInstanceNumber</name>
        <type>uint16_t</type>
      </field>
      <field>
        <default>0x0000</default>
        <description>
          A 16-bit number that identifies the containing entity that the Entity
          Instance Number is defined relative to.  If this value is 0x0000, the
          containing entity is considered to be the overall system.
        </description>
        <name>containerId</name>
        <type>uint16_t</type>
      </field>
    </complexType>
    <description>
      Stores "Entity Identification Information" for a given entity, as defined
      in the "Platform Level Data Model (PLDM) for Platform Monitoring and
      Control" specification (a.k.a. DSP0248) published by the DMTF.  A value of
      0x000000000000 is assumed not to be valid.  Hostboot populates this
      attribute on platforms that support PLDM after determining the final PLDM
      Entity Identification Information for various FRUs.  HDAT consumes this
      attribute when building the SLCA on said platforms.
    </description>
    <id>CHASSIS_PLDM_ENTITY_ID_INFO</id>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <complexType>
      <description>
        Matches PLDM_ENTITY_ID field descriptions.
        WARNING: All fields are little endian.
      </description>
      <field>
        <default>0x0000</default>
        <description>
         See PLDM_ENTITY_ID for description of field
        </description>
        <name>entityType</name>
        <type>uint16_t</type>
      </field>
      <field>
        <default>0x0000</default>
        <description>
          See PLDM_ENTITY_ID for description of field
        </description>
        <name>entityInstanceNumber</name>
        <type>uint16_t</type>
      </field>
      <field>
        <default>0x0000</default>
        <description>
          See PLDM_ENTITY_ID for description of field
        </description>
        <name>containerId</name>
        <type>uint16_t</type>
      </field>
    </complexType>
    <description>
      Stores "Entity Identification Information" for a connector (socket/dimm_slot)
      that this target uses, as defined in the "Platform Level Data Model (PLDM)
      for Platform Monitoring and Control" specification (a.k.a. DSP0248) published
      by the DMTF.  A value of 0x000000000000 is assumed not to be valid.  Hostboot
      populates this attribute on platforms that support PLDM after determining
      the final PLDM Entity Identification Information for various FRUs.
      HDAT consumes this attribute when building the SLCA on said platforms.
    </description>
    <id>CONNECTOR_PLDM_ENTITY_ID_INFO</id>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>CORE_WEIGHT_TENTHS</id>
    <description>
        Weight factor (1 = 0.1) for each core DTS to calculate a core
        temperature and eventually processor temperatures that is used
        for DVFS and fan control.
    </description>
    <simpleType>
      <uint8_t>
        <default>8</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>CUMULATIVE_PMCOMPLEX_RESET_COUNT</id>
    <description>
        Number of PM Complex resets since the system was booted.
        Value will only be cleared at power on.
    </description>
    <simpleType>
      <uint8_t/>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>CURRENT_MIN_POWER_CAP_WATTS</id>
    <description>
      System minimum power cap in output watts.
    </description>
    <simpleType>
      <uint16_t>
        <default>0</default>
      </uint16_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>CURRENT_N_BULK_POWER_LIMIT_WATTS</id>
    <description>
        System maximum power cap in output watts when system is oversubscribed.
        This value must guarantee WOF base.
    </description>
    <simpleType>
      <uint16_t>
        <default>0</default>
      </uint16_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>CURRENT_N_PLUS_ONE_BULK_POWER_LIMIT_WATTS</id>
    <description>
        System maximum power cap in output watts when system has redundant power supplies
        (not in oversubscription)  This value must guarantee WOF base.
    </description>
    <simpleType>
      <uint16_t>
        <default>0</default>
      </uint16_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>CURRENT_SBE_HRESET_STATUS</id>
    <description>
      The state of the ongoing HRESET operation, if any.
    </description>
    <simpleType>
      <uint16_t>
        <!-- SBE_HRESET_STATUS enumeration, value NOT_READY -->
        <default>1</default>
      </uint16_t>
    </simpleType>
    <persistency>volatile</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>DDR5_DIMM_ERROR_TEMP_DEG_C</id>
    <description>
        DDR5 DIMM Temperature in degrees C that a DIMM overtemp error will be
        logged calling out the DIMM
    </description>
    <simpleType>
      <uint8_t>
        <default>84</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_DIMM_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new DDR5 DIMM
        temperature before memory throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_DIMM_THROTTLE_TEMP_DEG_C</id>
    <description>
        DDR5 DIMM Temperature to invoke memory throttling in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>69</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MC_DRAM_ERROR_TEMP_DEG_C</id>
    <description>
        DDR5 External MC and DRAM temperature where an error will be generated
        in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>99</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MC_DRAM_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new temperature
        for the sensor covering both DDR5 external MC and DRAM before memory
        throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MC_DRAM_THROTTLE_TEMP_DEG_C</id>
    <description>
        DDR5 External MC and DRAM temperature threshold where throttling will
        occur in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>89</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MC_EXT_ERROR_TEMP_DEG_C</id>
    <description>
        DDR5 External MC temperature where an error will be generated
        in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>99</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MC_EXT_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new DDR5 external MC
        temperature before memory throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MC_EXT_THROTTLE_TEMP_DEG_C</id>
    <description>
        DDR5 External MC temperature threshold where throttling will
        occur in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>89</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MEMCTRL_ERROR_TEMP_DEG_C</id>
    <description>
        DDR5 Memory controller temperature where an error will occur
        in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>99</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MEMCTRL_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new DDR5 MC temperature
        before memory throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_MEMCTRL_THROTTLE_TEMP_DEG_C</id>
    <description>
         DDR5 Memory controller temperature threshold
         where throttling will occur in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>89</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_PMIC_ERROR_TEMP_DEG_C</id>
    <description>
        DDR5 PMIC temperature where an error will be generated
        in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>95</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_PMIC_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new DDR5 PMIC
        temperature before memory throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DDR5_PMIC_THROTTLE_TEMP_DEG_C</id>
    <description>
        DDR5 PMIC temperature threshold where throttling will
        occur in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>85</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DEALLOCATED</id>
    <description>Flag to indicate whether the target is removed
      from service by PHYP. PHYP notifies HBRT after removing a target
      from service and HBRT sets this flag to indicate that. While displaying
      target state to users through BMC, deallocated targets will be shown as
      non-functional.  A PLDM FRU functional state changed event will be sent
      when a target is changed to deallocated and that target will be marked
      as non-functional in its state sensor status.
      </description>
    <simpleType>
      <uint8_t>
        <default>0</default>
      </uint8_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>DIMM_ERROR_TEMP_DEG_C</id>
    <description>
        DIMM Temperature in degrees C that a DIMM overtemp error will be logged
        calling out the DIMM
    </description>
    <simpleType>
      <uint8_t>
        <default>84</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DIMM_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new DIMM temperature
        before memory throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>DIMM_THROTTLE_TEMP_DEG_C</id>
    <description>
        DIMM Temperature to invoke memory throttling in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>69</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <enumerationType>
    <id>ENTITY_ID</id>
    <description>Enumeration indicating the IPMI entity ID, these values are
        defined in the IPMI specification.  These values will be used in place
        of target type when events are sent to the BMC.</description>
    <enumerator>
      <name>NA</name>
      <value>0</value>
    </enumerator>
    <enumerator>
      <name>OTHER</name>
      <value>0x01</value>
    </enumerator>
    <enumerator>
      <name>PROCESSOR</name>
      <value>0x03</value>
    </enumerator>
    <enumerator>
      <name>SYSTEM_BOARD</name>
      <value>0x07</value>
    </enumerator>
    <enumerator>
      <name>POWER_MGMT</name>
      <value>0x15</value>
    </enumerator>
    <enumerator>
      <name>CHASSIS</name>
      <value>0x17</value>
    </enumerator>
    <enumerator>
      <name>MEMORY_DEVICE</name>
      <value>0x20</value>
    </enumerator>
    <enumerator>
      <name>SYS_MGMT_SOFTWARE</name>
      <value>0x21</value>
    </enumerator>
    <enumerator>
      <name>BIOS</name>
      <value>0x22</value>
    </enumerator>
    <enumerator>
      <name>OS</name>
      <value>0x23</value>
    </enumerator>
    <enumerator>
      <name>CORE</name>
      <value>0xD0</value>
    </enumerator>
    <enumerator>
      <name>MEMBUF</name>
      <value>0xD1</value>
    </enumerator>
    <enumerator>
      <name>OCC</name>
      <value>0xD2</value>
    </enumerator>
    <enumerator>
      <name>REF_CLOCK</name>
      <value>0xD4</value>
    </enumerator>
    <enumerator>
      <name>PCI_CLOCK</name>
      <value>0xD5</value>
    </enumerator>
    <enumerator>
      <name>TOD_CLOCK</name>
      <value>0xD6</value>
    </enumerator>
    <enumerator>
      <name>APSS</name>
      <value>0xD7</value>
    </enumerator>
    <enumerator>
      <name>GPU_CORE</name>
      <value>0xD8</value>
    </enumerator>
    <enumerator>
      <name>GPU_MEMORY</name>
      <value>0xD9</value>
    </enumerator>
  </enumerationType>

  <attribute>
    <id>FRU_PATH</id>
    <description>
      A comma-separated list of location codes to be called out when
      this target is implicated in an error. The format of each
      callout is "X:Y", where X is a letter 'H', 'M' or 'L'
      representing "high", "medium", and "low" respectively, and Y is
      a relative location code.
    </description>
    <simpleType>
      <string>
        <default/>
        <sizeInclNull>128</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>FSI_CALLOUTS</id>
    <description>
      See FRU_PATH for description.
    </description>
    <simpleType>
      <string>
        <default/>
        <sizeInclNull>128</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>GPIO_INFO</id>
    <description>Information needed to address GPIO device</description>
    <complexType>
      <description>Structure to define the addessing for an I2C
                     slave device.</description>
      <field>
        <name>i2cMasterPath</name>
        <description>Entity path to the chip that contains the I2C
                         master</description>
        <type>EntityPath</type>
        <default>physical:sys-0</default>
      </field>
      <field>
        <name>port</name>
        <description>Port from the I2C Master device. This is a 6-bit
                         value.</description>
        <type>uint8_t</type>
        <default>0</default>
      </field>
      <field>
        <name>devAddr</name>
        <description>Device address on the I2C bus. This is a 7-bit value,
                         but then shifted 1 bit left.</description>
        <type>uint8_t</type>
        <default>0</default>
      </field>
      <field>
        <name>engine</name>
        <description>I2C master engine. This is a 2-bit
                         value.</description>
        <type>uint8_t</type>
        <default>0</default>
      </field>
      <field>
        <name>vddrPin</name>
        <description>
                Logical GPIO pin number used to enabled/disable VDDR
            </description>
        <type>uint8_t</type>
        <default>0</default>
      </field>
      <!-- i2c Mux Bus Selector Definition -->
      <field>
        <default>0xFF</default>
        <description>Determines which of the N selectable buses the mux
                     will connect to. OxFF indicates no mux present
                     or N/A.</description>
        <name>i2cMuxBusSelector</name>
        <type>uint8_t</type>
      </field>
      <!-- i2c Mux Path Definition -->
      <field>
        <!-- NOTE: physical:sys-0 implies that there is no mux in
                   the bus path for this part.                     -->
        <default>physical:sys-0</default>
        <description>Entity path to the I2C mux for this device.</description>
        <name>i2cMuxPath</name>
        <type>EntityPath</type>
      </field>
    </complexType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>GPU_SENSORS</id>
    <description>Attribute to hold 3 possible GPU sensors.
    Includes sensor types, ids, and OBUS_CFG bits
    </description>
    <simpleType>
      <uint16_t/>
      <array>3,7</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <no_export/>
  </attribute>

  <enumerationType>
    <id>GPU_SENSOR_ARRAY</id>
    <description>
        Enumeration defining the offsets into the GPU_SENSORS array.
    </description>
    <enumerator>
      <name>FUNC_OFFSET</name>
      <value>0x00</value>
    </enumerator>
    <enumerator>
      <name>FUNC_ID_OFFSET</name>
      <value>0x01</value>
    </enumerator>
    <enumerator>
      <name>TEMP_OFFSET</name>
      <value>0x02</value>
    </enumerator>
    <enumerator>
      <name>TEMP_ID_OFFSET</name>
      <value>0x03</value>
    </enumerator>
    <enumerator>
      <name>MEM_TEMP_OFFSET</name>
      <value>0x04</value>
    </enumerator>
    <enumerator>
      <name>MEM_TEMP_ID_OFFSET</name>
      <value>0x05</value>
    </enumerator>
    <enumerator>
      <name>OBUS_CFG_OFFSET</name>
      <value>0x06</value>
    </enumerator>
  </enumerationType>

  <attribute>
    <id>HDAT_I2C_ADDR</id>
    <description>
        This attribute holds the values of the I2C address from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
      <uint8_t/>
      <array>192</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HDAT_I2C_BUS_FREQ</id>
    <description>
        This attribute holds the values of the I2C bus frequency in Hz from
        the i2c device connections as defined in the MRW.  It is parsed
        into a struct in i2c.C
    </description>
    <simpleType>
      <uint32_t/>
      <array>192</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HDAT_I2C_DEVICE_LABEL</id>
    <description>
        This attribute holds the string descriptions of the I2C devices from
        the i2c device connections as defined in the MRW.  It is parsed into
        a struct in i2c.C
    </description>
    <simpleType>
      <string>
        <sizeInclNull>64</sizeInclNull>
      </string>
      <array>192</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HDAT_I2C_DEVICE_PURPOSE</id>
    <description>
        This attribute holds the values of the I2C device purpose from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
      <uint8_t/>
      <array>192</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HDAT_I2C_DEVICE_TYPE</id>
    <description>
        This attribute holds the values of the I2C device type from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
      <uint8_t/>
      <array>192</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HDAT_I2C_ELEMENTS</id>
    <description>
        This attribute holds the number of elements that were found under this
        particular target, and how many devices are stored in the arrays.
    </description>
    <simpleType>
      <uint8_t>
        <default>0</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HDAT_I2C_ENGINE</id>
    <description>
        This attribute holds the values of the I2C Engine from the i2c device
        connections as defined in the MRW.  It is parsed into a struct in i2c.C
    </description>
    <simpleType>
      <uint8_t/>
      <array>192</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HDAT_I2C_MASTER_PORT</id>
    <description>
        This attribute holds the values of the I2C Master Port from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
      <uint8_t/>
      <array>192</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HDAT_I2C_SLAVE_PORT</id>
    <description>
        This attribute holds the values of the I2C slave port from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
      <uint8_t/>
      <array>192</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>HTMGT_INTERNAL_FLAGS</id>
    <description>HTMGT internal flags
    </description>
    <simpleType>
      <uint32_t>
        <default>0x00000000</default>
      </uint32_t>
    </simpleType>
    <persistency>volatile</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>HTMGT_PMCOMPLEX_RESET_COUNT_TIMER</id>
    <description>
       Timer value used to periodically clear the PM Complex reset
       counters.  Used internally by HTMGT.
    </description>
    <simpleType>
      <uint64_t/>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>HTMGT_SAFEMODE</id>
    <description>1 = in safemode. 0 = in normal mode.</description>
    <simpleType>
      <uint8_t/>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <hbOnly/>
  </attribute>

  <attribute>
    <id>HTMGT_SAVED_POWER_LIMIT</id>
    <description>User power limit information from the BMC to be used if
        communication with the BMC is lost after system is powered on.
        Used internally by HTMGT.
    </description>
    <simpleType>
      <uint32_t/>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>HYP_INHIBIT_RUNTIME_BMC_RESET</id>
    <description>
      When set to 1, signal the hypervisor to inhibit BMC
      resets/reloads at runtime, for debugging purposes. When set to
      0, resets/reloads will be permitted.
    </description>
    <simpleType>
      <uint8_t>
        <default>0</default>
      </uint8_t>
    </simpleType>
    <persistency>volatile</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>I2C_CALLOUTS</id>
    <description>
      See FRU_PATH for a description.
    </description>
    <simpleType>
      <string>
        <default/>
        <sizeInclNull>128</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>IGNORE_OVERSUB_ERRORS</id>
    <description>
        Set to 0x01 to indicate that oversubscription errors from the OCC should be ignored.
    </description>
    <simpleType>
      <uint8_t>
        <default>0x00</default>
      </uint8_t>
    </simpleType>
    <persistency>volatile</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>INDEX_BULK_POWER</id>
    <description>
      Power Supply Config from BMC information to search and index into
      INDEX_POWER_LIMIT_CONFIG.
    </description>
    <simpleType>
      <uint32_t>
        <default>0</default>
      </uint32_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>INDEX_MIN_POWER_CAP_WATTS</id>
    <description>
        Array of system minimum power cap in output watts from MRW when system config in
        INDEX_POWER_LIMIT_CONFIG matches.
    </description>
    <simpleType>
      <uint16_t>
        <default>0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</default>
      </uint16_t>
      <array>24</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>INDEX_N_BULK_POWER_LIMIT_WATTS</id>
    <description>
          Array of system maximum power caps in output watts from MRW when system config in
          INDEX_POWER_LIMIT_CONFIG matches, and system is oversubscribed.
    </description>
    <simpleType>
      <uint16_t>
        <default>0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</default>
      </uint16_t>
      <array>24</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>INDEX_N_PLUS_ONE_BULK_POWER_LIMIT_WATTS</id>
    <description>
        Array of system maximum power cap in output watts from MRW when system config in
        INDEX_POWER_LIMIT_CONFIG matches, and system has redundant power supplies
        (not oversubscribed).
    </description>
    <simpleType>
      <uint16_t>
        <default>0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</default>
      </uint16_t>
      <array>24</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>INDEX_POWER_LIMIT_CONFIG</id>
    <description>
        Array of PS Configs that need special N, N+1 bulk power limits.  This index from this
        array must match the index for needed power limits in INDEX_N_BULK_POWER_LIMIT_WATTS and
        INDEX_N_PLUS_ONE_BULK_POWER_LIMIT_WATTS.
            Power Supply Config Format:
            Byte 0,1 : CCIN   Not_Used(0000), CCIN, Any(FFFF)
            Byte 2   : Type   Not_Used(00), 110(01),  220(02)
            Byte 3   : #_PS   Not_Used(00), Number of PS should be installed.
    </description>
    <simpleType>
      <uint32_t>
        <default>0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</default>
      </uint32_t>
      <array>24</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>IPMI_INSTANCE</id>
    <description>Holds the IPMI instance number for this entity.</description>
    <simpleType>
      <uint32_t/>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <!-- IPMI Sensor numbers are defined in the IPMI spec as 8 bit values. However
in the hostboot code they will be defined as a uint16_t to allow us to add
additonal information. An example relates to error logs returned by the OCC,
we might want to pass the Entity ID in the upper byte of the sensor ID, this
would allow hostboot to search only the target type identifed by the Entity
ID for the sensor number returned with the elog. -->
  <!-- attribute to hold 16 pairs of sensor type, sensor number values -->
  <attribute>
    <id>IPMI_MAX_BUFFER_SIZE</id>
    <description>max buffer size to use for ipmi messages</description>
    <simpleType>
      <uint32_t/>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <hbOnly/>
  </attribute>

  <attribute>
    <id>IPMI_SENSORS</id>
    <description>Attribute to hold 16 pairs of sensor name, sensor number
        pairs. A sensor name consists of one byte of general sensor type
        and one byte of sub-type</description>
    <simpleType>
      <uint16_t/>
      <array>16,2</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>IS_MPIPL_SUPPORTED</id>
    <description>
        Specifies if the mpipl is supported on this platform
        0 : No , 1 : Yes
    </description>
    <simpleType>
      <uint8_t>
        <default>0</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>L3_WEIGHT_TENTHS</id>
    <description>
        Weight factor (1 = 0.1) for each L3 DTS to calculate a core
        temperature. A value of 0 means not to include L3 DTS in core
        temperature.
    </description>
    <simpleType>
      <uint8_t>
        <default>1</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>LAST_PROGRESS_CODE</id>
    <description>
        Last progress code
        Structure includes nodeId, rolling count and isteps
        Full structure is defined in progressSrc.H
        Used in word4 of SRC
    </description>
    <simpleType>
      <uint32_t>
        <default>0</default>
      </uint32_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <writeable/>
    <readable/>
    <no_export/>
  </attribute>

  <attribute>
    <description>
        Used to map location code to part number, serial number, and ccin.
        Mapping will be just an array of unsigned bytes. Location code value
        will take 50 bytes, part number will take 7 bytes, serial number will
        take 12 bytes, and ccin will take 4 bytes for a total of 73 bytes per
        location code mapping. There is a maximum of 2 VRM location codes per
        PROC so we will store a total of 146 bytes for this attribute. The
        struct is defined in hb_fru.C as loc_pn_sn_ccin_map
    </description>
    <id>LOCATION_PN_SN_CCIN_MAP</id>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <simpleType>
      <array>146</array>
      <uint8_t/>
    </simpleType>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>MAX_VDD_CURRENT_READING</id>
    <description>
       Maximum theoretical Vdd current reading in 10mA units.
       Used when VDD_CURRENT_OVERFLOW_WORKAROUND_ENABLE is set.
    </description>
    <simpleType>
      <uint16_t>
        <default>0x0000</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MC_DRAM_ERROR_TEMP_DEG_C</id>
    <description>
        External MC and DRAM temperature where an error will be generated
        in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>99</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MC_DRAM_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new temperature
        for the sensor covering both external MC and DRAM before memory
        throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MC_DRAM_THROTTLE_TEMP_DEG_C</id>
    <description>
        External MC and DRAM temperature threshold where throttling will
        occur in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>89</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MC_EXT_ERROR_TEMP_DEG_C</id>
    <description>
        External MC temperature where an error will be generated
        in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>99</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MC_EXT_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new external MC
        temperature before memory throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MC_EXT_THROTTLE_TEMP_DEG_C</id>
    <description>
        External MC temperature threshold where throttling will
        occur in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>89</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MEMCTRL_ERROR_TEMP_DEG_C</id>
    <description>
        Memory controller temperature where an error will occur
        in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>99</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MEMCTRL_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new MC temperature
        before memory throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MEMCTRL_THROTTLE_TEMP_DEG_C</id>
    <description>
         Memory controller temperature threshold
         where throttling will occur in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>89</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MIN_MEM_UTILIZATION_THROTTLING</id>
    <description>
        The lowest utilization allowed that the OCC could throttle memory
        due to a memory over temp condition. (percent from 0-100)
    </description>
    <simpleType>
      <uint8_t>
        <default>25</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MIN_POWER_CAP_WATTS</id>
    <description>
        Lowest output power in watts that a user may set, and the OCC can
        guarantee to hold via processor DVFS under all conditions.
        Aka Hard minimum power cap.
    </description>
    <simpleType>
      <uint16_t>
        <default>2700</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MISC_SYSTEM_COMPONENTS_MAX_POWER_WATTS</id>
    <description>
        Power used by components other than CPU, memory,
        or GPUs in Watts
    </description>
    <simpleType>
      <uint16_t/>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MRW_SAFEMODE_MEM_THROTTLE_NUMERATOR_PER_CHIP</id>
    <description>
        Machine Readable Workbook safe mode throttle value for
        numerator cfg_nm_n_per_chip
    </description>
    <simpleType>
      <uint32_t/>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>MSS_UTIL_N_PER_MBA</id>
    <description>
        cfg_nm_n_per_mba throttle N value that was calculated from
        MSS_DATABUS_UTIL_PER_MBA
    </description>
    <simpleType>
      <uint32_t/>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>NO_APSS_PROC_POWER_VCS_VIO_WATTS</id>
    <description>
        A constant power (in watts) that the OCC is to add onto Vdd and Vdn
        power to represent any processor part that is not measured(i.e.Vcs,Vio)
        This is used by the OCC to calculate a total processor socket power.
    </description>
    <simpleType>
      <uint16_t>
        <default>0</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>NUM_PLDM_STATE_QUERY_RECORDS</id>
    <description>
      The number of records currently populated in PLDM_STATE_QUERY_RECORDS.
    </description>
    <simpleType>
      <uint32_t>
        <default>0</default>
      </uint32_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>N_BULK_POWER_LIMIT_WATTS</id>
    <description>
        System maximum power cap in output watts from MRW when system is oversubscribed.
    </description>
    <simpleType>
      <uint16_t>
        <default>2880</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>N_MAX_MEM_POWER_WATTS</id>
    <description>
        The amount of N Bulk Power to allocate to memory, this value will
        be used to calculate memory throttles to cap memory to this power.
        This value must be the left over power from N Bulk Power after
        allocating power for fixed resources and processor power to guarantee
        WOF base.  NOTE:  This value is first reduced by Regulator Efficiency
        Factor before running the procedure to account for regulator loss.
    </description>
    <simpleType>
      <uint16_t>
        <default>1885</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>N_PLUS_ONE_BULK_POWER_LIMIT_WATTS</id>
    <description>
        System maximum power cap in output watts from MRW when system has redundant
        power supplies (not oversubscribed).
    </description>
    <simpleType>
      <uint16_t>
        <default>3584</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>N_PLUS_ONE_MAX_MEM_POWER_WATTS</id>
    <description>
        The amount of N+1 Bulk Power to allocate to memory, this value will be
        used to calculate memory throttles to cap memory to this power.  This
        value must be the left over power from N+1 Bulk Power after allocating
        power for fixed resources and processor power to guarantee WOF base.
        NOTE:  This value is first reduced by Regulator Efficiency Factor
        before running the procedure to account for regulator loss before
        running the HW procedure.
    </description>
    <simpleType>
      <uint16_t>
        <default>1885</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>N_PLUS_ONE_MEM_POWER</id>
    <description>
        Maximum memory power in centiWatts when not in
        oversubscription.
        Values populated during istep 18.
    </description>
    <simpleType>
      <uint32_t>
        <default>0,0</default>
      </uint32_t>
      <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>N_PLUS_ONE_N_PER_PORT</id>
    <description>
        Static per port numerator setting when not in
        oversubscription.  Calculated based on memory
        power with redundant power.
        Values populated during istep 18.
    </description>
    <simpleType>
      <uint16_t>
        <default>0,0</default>
      </uint16_t>
      <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>N_PLUS_ONE_N_PER_SLOT</id>
    <description>
        Static per slot numerator setting when not in
        oversubscription.  Calculated based on memory
        power with redundant power.
        Values populated during istep 18.
    </description>
    <simpleType>
      <uint16_t>
        <default>0,0</default>
      </uint16_t>
      <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>OCC_CONTROL_DATA</id>
    <description>OCC operational data
    </description>
    <simpleType>
      <uint8_t/>
      <array>256</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>OPAL_MODEL</id>
    <description>
        Specifies the compatible model name for Opal to key off of.
        This is sourced from the MRW and should be of the format
        'vendor,model', e.g. 'tyan,palmetto'.
    </description>
    <simpleType>
      <string>
        <default>ibm,miscopenpower</default>
        <sizeInclNull>32</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>OP_TRACE_LITE</id>
    <description>
        Enable Trace lite on openpower.
    </description>
    <simpleType>
      <uint8_t>
        <default/>
      </uint8_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <hbOnly/>
  </attribute>

  <attribute>
    <id>OT_MEM_POWER</id>
    <description>
        Maximum memory power in centiWatts with throttle
        set to minimum.
        Values populated during istep 18.
    </description>
    <simpleType>
      <uint32_t>
        <default>0,0</default>
      </uint32_t>
      <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>OT_MIN_N_PER_SLOT</id>
    <description>
        Lowest per slot numerator ever allowed when OCC is
        throttling due to OT.
        Values populated during istep 18.
    </description>
    <simpleType>
      <uint16_t>
        <default>0,0</default>
      </uint16_t>
      <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>OVERSUB_MEM_POWER</id>
    <description>
        Maximum memory power in centiWatts when in
        oversubscription.
        Values populated during istep 18.
    </description>
    <simpleType>
      <uint32_t>
        <default>0,0</default>
      </uint32_t>
      <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>OVERSUB_N_PER_PORT</id>
    <description>
        Static per port numerator setting when in
        oversubscription.
        Values populated during istep 18.
    </description>
    <simpleType>
      <uint16_t>
        <default>0,0</default>
      </uint16_t>
      <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>OVERSUB_N_PER_SLOT</id>
    <description>
        Static per slot numerator setting when in
        oversubscription.
        Values populated during istep 18.
    </description>
    <simpleType>
      <uint16_t>
        <default>0,0</default>
      </uint16_t>
      <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>PLDM_BIOS_ERROR_INFORMATIONAL</id>
    <description>
        0 = set BIOS attribute lookup error to PREDICTIVE
        1 = set BIOS attribute lookup error to INFORMATIONAL
        Default to 1 to allow new attributes to be added
        without a BMC attribute code dependency.
    </description>
    <simpleType>
      <uint8_t>
        <default>0x01</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>PLDM_BMC_PDR_COUNT</id>
    <description>
        Count of PDRs sent to Hostboot from BMC.
        The BMC sends Hostboot its own PDRs as well as the PDRs
        that Hostboot sent to the BMC in the first place.
    </description>
    <simpleType>
      <uint32_t/>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>PLDM_CONNECTOR_PDRS_ENABLED</id>
    <description>
        Socket and dimm_slot connector pdrs are needed to report uninstalled
        slots which are used to help identify where to plug in new parts.
        This support connectors encompass DIMM slots and processor sockets.
        This support is disabled by default until fully supported by all components.
    </description>
    <simpleType>
      <uint8_t>
        <default>1</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <no_export/>
  </attribute>

  <attribute>
    <complexType>
      <description>
        Structure which describes the "Entity Identification Information" data
        type defined by the "Platform Level Data Model (PLDM) for Platform
        Monitoring and Control" specification (a.k.a. DSP0248) published by the
        DMTF.  WARNING: All fields are little endian.
      </description>
      <field>
        <default>0x0000</default>
        <description>
          Combination of the P/L bit and the Entity ID value. The P/L bit is a
          bit indicating whether the entity is a physical (0b0) or logical (0b1)
          entity.  The Entity ID is a 15-bit value from DSP0249 that identifies
          the general type of entity.
        </description>
        <name>entityType</name>
        <type>uint16_t</type>
      </field>
      <field>
        <default>0x0000</default>
        <description>
          16-bit number that differentiates among instances of entities that
          have the same Entity Type and Container ID values.
        </description>
        <name>entityInstanceNumber</name>
        <type>uint16_t</type>
      </field>
      <field>
        <default>0x0000</default>
        <description>
          A 16-bit number that identifies the containing entity that the Entity
          Instance Number is defined relative to.  If this value is 0x0000, the
          containing entity is considered to be the overall system.
        </description>
        <name>containerId</name>
        <type>uint16_t</type>
      </field>
    </complexType>
    <description>
      Stores "Entity Identification Information" for a given entity, as defined
      in the "Platform Level Data Model (PLDM) for Platform Monitoring and
      Control" specification (a.k.a. DSP0248) published by the DMTF.  A value of
      0x000000000000 is assumed not to be valid.  Hostboot populates this
      attribute on platforms that support PLDM after determining the final PLDM
      Entity Identification Information for various FRUs.  HDAT consumes this
      attribute when building the SLCA on said platforms.
    </description>
    <id>PLDM_ENTITY_ID_INFO</id>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>PLDM_HB_PDR_COUNT</id>
    <description>
        Count of Hostboot PDRs sent to BMC
    </description>
    <simpleType>
      <uint32_t/>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>PLDM_STATE_QUERY_RECORDS</id>
    <description>
        Information about the currently registered PLDM sensors and
        effecters. This attribute is an array of structures of type
        pldm_state_query_record_t.
    </description>
    <simpleType>
      <uint8_t>
        <default>0</default>
      </uint8_t>
      <array>12288</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>PMIC_ERROR_TEMP_DEG_C</id>
    <description>
        PMIC temperature where an error will be generated
        in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>95</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PMIC_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new PMIC
        temperature before memory throttling will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>30</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PMIC_THROTTLE_TEMP_DEG_C</id>
    <description>
        PMIC temperature threshold where throttling will
        occur in degrees C
    </description>
    <simpleType>
      <uint8_t>
        <default>85</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PROC_DVFS_TEMP_DELTA_C</id>
    <description>
        Per Chip.  Degrees C to change (+/-) the processor chip VPD DVFS
        temperature to invoke DVFS (clip max Pstate).   Default is 0
        (no change to VPD limit)
        NOTE:  If we fail to read DVFS limit from VPD system will go to safe mode.
    </description>
    <simpleType>
      <int8_t>
        <default>0</default>
      </int8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PROC_ERROR_TEMP_DELTA_C</id>
    <description>
        Per Chip.  Degrees C to change (+/-) the processor chip VPD DVFS temperature
        that a processor chip over temperature error will be logged calling out
        the processor.
    </description>
    <simpleType>
      <int8_t>
        <default>0x0a</default>
      </int8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PROC_IO_DVFS_TEMP_DELTA_C</id>
    <description>
        Per Chip.  Degrees C to change (+/-) the processor IO chip VPD DVFS
        temperature to invoke DVFS (clip max Pstate).   Default is 0
        (no change to VPD limit)
    </description>
    <simpleType>
      <int8_t>
        <default>0x0</default>
      </int8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PROC_IO_ERROR_TEMP_DELTA_C</id>
    <description>
        Per Chip.  Degrees C to change (+/-) the processor IO chip VPD DVFS temperature
        that an over temperature error will be logged calling out
        the processor.
    </description>
    <simpleType>
      <int8_t>
        <default>0x0a</default>
      </int8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PROC_IO_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new processor IO
        temperature before DVFS (if supported) will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>5</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PROC_MHZ_PER_WATT</id>
    <description>
        Frequency (in MHz) for 1 Watt of processor power change.  Used by the
        power capping algorithm to determine how much to change the frequency
        based on power available.
        This is used in populating CALCULATED_MAX_SYS_POWER_EXCLUDING_GPUS
    </description>
    <simpleType>
      <uint16_t>
        <default>28</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PROC_READ_TIMEOUT_SEC</id>
    <description>
        Maximum time in seconds allowed without having a new processor
        temperature before DVFS will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>5</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>PROC_SOCKET_POWER_WATTS</id>
    <description>
        The maximum power a single procesor socket can support (in watts)
        This is used to populate CALCULATED_MAX_SYS_POWER_EXCLUDING_GPUS
    </description>
    <simpleType>
      <uint16_t>
        <default>250</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>QUAD_WEIGHT_TENTHS</id>
    <description>
        Weight factor (1 = 0.1) for each quad (racetrack) DTS to calculate
        a core temperature.  A value of 0 means not to include racetrack DTS
        in core temperature.
    </description>
    <simpleType>
      <uint8_t>
        <default>1</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>REGULATOR_EFFICIENCY_FACTOR</id>
    <description>
        Percentage to lower N+1 Maximum Memory Power and N Maximum Memory Power
        to account for regulator loss prior to calling procedure to calculate
        memory throttles.
        NOTE: The procedure calculating memory throttles do not account for regulator loss.
    </description>
    <simpleType>
      <uint8_t>
        <default>83</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>REPORT_THROTTLE_BELOW_NOMINAL</id>
    <description>
         Indicates if OCC should wait to report DVFS due to power/thermal until
         max frequency has been lowered below nominal.
         Default OCC will report DVFS when max frequency is lowered below turbo.
         DVFS is reported in poll response extended status bits and in OPAL
         shared memory throttle status byte.
         1 = OCC report throttling only when max freq. lowered below nominal
         0 = OCC report throttling when max freq. lowered below turbo
    </description>
    <simpleType>
      <uint8_t>
        <default>0</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <enumerationType>
    <id>SBE_HRESET_STATUS</id>
    <description>
        Enumeration defining the states of an SBE HRESET
        operation. These values correspond to the values of the
        PLDM_OEM_IBM_SBE_HRESET_STATE PLDM state set.
    </description>
    <enumerator>
      <name>UNKNOWN</name>
      <value>0</value>
    </enumerator>
    <enumerator>
      <name>NOT_READY</name>
      <value>1</value>
    </enumerator>
    <enumerator>
      <name>READY</name>
      <value>2</value>
    </enumerator>
    <enumerator>
      <name>FAILED</name>
      <value>3</value>
    </enumerator>
  </enumerationType>

  <enumerationType>
    <id>SENSOR_TYPE</id>
    <description>Enumeration indicating the IPMI sensor type, these values
        are defined in the IPMI specification. These values will be used when
    sending sensor reading events to the BMC.</description>
    <enumerator>
      <name>NA</name>
      <value>0</value>
    </enumerator>
    <enumerator>
      <name>TEMPERATURE</name>
      <value>0x01</value>
    </enumerator>
    <enumerator>
      <name>PROCESSOR</name>
      <value>0x07</value>
    </enumerator>
    <enumerator>
      <name>POWER_UNIT</name>
      <value>0x09</value>
    </enumerator>
    <enumerator>
      <name>MEMORY</name>
      <value>0x0c</value>
    </enumerator>
    <enumerator>
      <name>SYS_FW_PROGRESS</name>
      <value>0x0F</value>
    </enumerator>
    <enumerator>
      <name>SYS_EVENT</name>
      <value>0x12</value>
    </enumerator>
    <enumerator>
      <name>ADDIN_CARD</name>
      <value>0x17</value>
    </enumerator>
    <enumerator>
      <name>OS_BOOT</name>
      <value>0x1F</value>
    </enumerator>
    <enumerator>
      <name>APCI_POWER_STATE</name>
      <value>0x22</value>
    </enumerator>
    <enumerator>
      <name>FREQ</name>
      <value>0xC1</value>
    </enumerator>
    <enumerator>
      <name>POWER</name>
      <value>0xC2</value>
    </enumerator>
    <enumerator>
      <name>BOOT_COUNT</name>
      <value>0xC3</value>
    </enumerator>
    <enumerator>
      <name>PCI_LINK_PRES</name>
      <value>0xC4</value>
    </enumerator>
    <enumerator>
      <name>PWR_LIMIT_ACTIVE</name>
      <value>0xC4</value>
    </enumerator>
    <enumerator>
      <name>FAULT</name>
      <value>0xC7</value>
    </enumerator>
  </enumerationType>

  <attribute>
    <id>SOFT_MIN_POWER_CAP_WATTS</id>
    <description>
        Minimum soft power cap, this is the lowest output power in watts that a
        user may set.  A power cap set below the hard minimum
        (MIN_POWER_CAP_WATTS) is called a soft power cap and is not
        guaranteed under all conditions.
    </description>
    <simpleType>
      <uint16_t>
        <default>500</default>
      </uint16_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>SPI_MVPD_BACKUP_INFO_CALLOUTS</id>
    <description>
      See FRU_PATH for description.
    </description>
    <simpleType>
      <string>
        <default/>
        <sizeInclNull>128</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>SPI_MVPD_PRIMARY_INFO_CALLOUTS</id>
    <description>
      See FRU_PATH for description.
    </description>
    <simpleType>
      <string>
        <default/>
        <sizeInclNull>128</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>SPI_SBE_BOOT_CODE_BACKUP_INFO_CALLOUTS</id>
    <description>
      See FRU_PATH for description.
    </description>
    <simpleType>
      <string>
        <default/>
        <sizeInclNull>128</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>SPI_SBE_BOOT_CODE_PRIMARY_INFO_CALLOUTS</id>
    <description>
      See FRU_PATH for description.
    </description>
    <simpleType>
      <string>
        <default/>
        <sizeInclNull>128</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>SPI_TPM_INFO_CALLOUTS</id>
    <description>
      See FRU_PATH for description.
    </description>
    <simpleType>
      <string>
        <default/>
        <sizeInclNull>128</sizeInclNull>
      </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <complexType>
      <description>
        Structure which describes the "Entity Identification Information" data
        type defined by the "Platform Level Data Model (PLDM) for Platform
        Monitoring and Control" specification (a.k.a. DSP0248) published by the
        DMTF.  WARNING: All fields are little endian.  Gives the entity
        identification information for the system.
      </description>
      <field>
        <default>0x0000</default>
        <description>
          Combination of the P/L bit and the Entity ID value. The P/L bit is a
          bit indicating whether the entity is a physical (0b0) or logical (0b1)
          entity.  The Entity ID is a 15-bit value from DSP0249 that identifies
          the general type of entity.
        </description>
        <name>entityType</name>
        <type>uint16_t</type>
      </field>
      <field>
        <default>0x0000</default>
        <description>
          16-bit number that differentiates among instances of entities that
          have the same Entity Type and Container ID values.
        </description>
        <name>entityInstanceNumber</name>
        <type>uint16_t</type>
      </field>
      <field>
        <default>0x0000</default>
        <description>
          A 16-bit number that identifies the containing entity that the Entity
          Instance Number is defined relative to.  If this value is 0x0000, the
          containing entity is considered to be the overall system.
        </description>
        <name>containerId</name>
        <type>uint16_t</type>
      </field>
    </complexType>
    <description>
      Stores "Entity Identification Information" for a given entity, as defined
      in the "Platform Level Data Model (PLDM) for Platform Monitoring and
      Control" specification (a.k.a. DSP0248) published by the DMTF.  A value of
      0x000000000000 is assumed not to be valid.  Hostboot populates this
      attribute on platforms that support PLDM after determining the final PLDM
      Entity Identification Information for various FRUs.  HDAT consumes this
      attribute when building the SLCA on said platforms.
    </description>
    <id>SYSTEM_PLDM_ENTITY_ID_INFO</id>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>SYS_CLK_NE_TERMINATION_SITE_PREVENT_SYNC</id>
    <description>
        This attribute is defined with a mapping to ATTR_SYS_CLK_NE_TERMINATION_SITE to
        prevent Hostboot from seeing ATTR_SYS_CLK_NE_TERMINATION_SITE when we loop through
        all attributes during DEVTREE sync.
    </description>
    <simpleType>
      <uint8_t>
        <default>0</default>
      </uint8_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <no_export/>
    <writeable/>
    <readable/>
    <hwpfToHbAttrMap>
      <id>ATTR_SYS_CLK_NE_TERMINATION_SITE</id>
      <macro>DIRECT</macro>
    </hwpfToHbAttrMap>
  </attribute>

  <attribute>
    <id>SYS_CLOCK_DECONFIG_STATE</id>
    <description>
      The state of the system clocks. This attribute is set by
      Hostboot and read by the BMC on reconfig loops so that it can
      tell which clocks are functional. See the enumeration
      SYS_CLOCK_DECONFIG_STATE for the possible values of this
      attribute.
    </description>
    <simpleType>
      <enumeration>
        <id>SYS_CLOCK_DECONFIG_STATE</id>
        <default>NO_DECONFIG</default>
      </enumeration>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
    <no_export/>
  </attribute>

  <enumerationType>
    <id>SYS_CLOCK_DECONFIG_STATE</id>
    <description>The functional state of the system oscillators.</description>
    <enumerator>
      <name>NO_DECONFIG</name>
      <value>0</value>
    </enumerator>
    <enumerator>
      <name>A_DECONFIG</name>
      <value>1</value>
    </enumerator>
    <enumerator>
      <name>B_DECONFIG</name>
      <value>2</value>
    </enumerator>
    <enumerator>
      <name>ALL_DECONFIG</name>
      <value>3</value>
    </enumerator>
  </enumerationType>

  <attribute>
    <id>SYS_CLOCK_DECONFIG_STATE_INITIAL</id>
    <description>
      The state of the system clocks. This attribute is set by
      Hostboot and read by Hostboot. This attribute is set once at the
      beginning of the IPL to the value of
      ATTR_SYS_CLOCK_DECONFIG_STATE and not modified again. See the
      SYS_CLOCK_DECONFIG_STATE for more information. This attribute
      exists so that multiple "unknown" clock callouts are idempotent.
    </description>
    <simpleType>
      <enumeration>
        <id>SYS_CLOCK_DECONFIG_STATE</id>
        <default>NO_DECONFIG</default>
      </enumeration>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
  </attribute>

  <attribute>
    <id>SYS_CLOCK_INTEGRATED_SPARES</id>
    <description>
      Whether the system has redundant clocks that can be configured
      as integrated spares (1 means yes, 0 means no).
    </description>
    <simpleType>
      <uint8_t/>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>VDD_CURRENT_OVERFLOW_WORKAROUND_ENABLE</id>
    <description>
        Used to enable Vdd current overflow worakaround.
        To enable this attribute should be set to 1 and
        MAX_VDD_CURRENT_READING must be populated.
        Set to 0 to disable.
    </description>
    <simpleType>
      <uint8_t>
        <default>0x00</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <no_export/>
  </attribute>

  <attribute>
    <id>VRM_VDD_DVFS_TEMP_DEG_C</id>
    <description>
        VRM Vdd Temperature in degrees C to invoke DVFS (clip max Pstate)
    </description>
    <simpleType>
      <uint8_t>
        <default>85</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>VRM_VDD_ERROR_TEMP_DEG_C</id>
    <description>
        VRM Vdd Temperature in degrees C that an overtemp error will be logged
    </description>
    <simpleType>
      <uint8_t>
        <default>95</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

  <attribute>
    <id>VRM_VDD_READ_TIMEOUT_SEC</id>
    <description>
         Maximum time in seconds allowed without having a new VRM Vdd
         temperature before DVFS will occur
    </description>
    <simpleType>
      <uint8_t>
        <default>5</default>
      </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
  </attribute>

</attributes>

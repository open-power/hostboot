# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/isteps/plugins/ebmc/hbfwPlatHwpErrParserFFDC.py $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2024
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG
# The content of this file, hbfwPlatHwpErrParserFFDC.py, is automatically
# generated by src/usr/fapi2/platCreateHwpErrParser.pl and output to
# obj/genfiles/plugins/hbfwPlatHwpErrParserFFDC.py.

# At this time, the generated file must be manually copied from the
# obj/genfiles/plugins directory to the src/usr/isteps/plugins/ebmc directory and
# then manually checked in to be picked up by the Hostboot build.

# To pull the parser change into a BMC image, update the commit pointer in the
# openbmc project's meta-openpower/recipes-phosphor/logging/hostboot-pel-parsers_git.bb
# file to reference the Hostboot commit with the change.

# Last generated: Thu Apr 25 16:32:30 2024 GMT

import json
from udparsers.helpers.errludP_Helpers import memConcat, hexDump, intConcat

def hbfwParseHwpFfdc(ver, data):
    CFAM_DATA_LEN = 4;
    SCOM_DATA_LEN = 8;
    POS_LEN = 4;

    d = dict()
    i = 0

    # The first 4 bytes is the FFDC ID
    ffdcId, i=intConcat(data, i, i+4)

    if ffdcId == 0x0015e063:
        d["HwpReturnCode"]="RC_P10_RNG_INIT_SELF_TEST_FAILED_ERR"
        d["FFDC"]="SELF_TEST_HARD_FAIL_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00329564:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_VENDOR_IDS"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00401c0f:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="QME_BCECSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0042e612:
        d["Register FFDC"]="MIB_EXTERNAL_SCOMMABLE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_MIB_XISIB",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_MIB_XIMEM",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_MIB_XISGB",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_MIB_XIICAC",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x004631e3:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE6"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x005afccc:
        d["HwpReturnCode"]="RC_ODY_CCS_HUNG_TRYING_TO_STOP"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00661d49:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00690586:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x006c135e:
        d["HwpReturnCode"]="RC_EXP_SPI_FLASH_AUTH_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00905529:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET2"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0095c887:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_MEMORY_CONFIG_UNSUPPORTED"
        d["FFDC"]="PLANAR_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0095dc68:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_POLL_THRESHOLD_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x009d9caa:
        d["HwpReturnCode"]="RC_P10_VAS_QUIESCE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00bcda2b:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_CHIPLET_ID_ERR"
        d["FFDC"]="UNIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00d9677e:
        d["HwpReturnCode"]="RC_XIPC_EMPTY_IMAGE_SECTION"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00e1b6d6:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00e46072:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_BUSY"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00e6674a:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_SIZE_MIX"
        d["FFDC"]="SMALLER_DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00e808f8:
        d["HwpReturnCode"]="RC_MSS_MAINT_BAD_SPARE_INDEX"
        d["FFDC"]="SPARE0_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00ebd332:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x00f7958d:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0100c47f:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_EN_TX_DQ_PREAMBLE_PATTERN_U1"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01159a54:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_HEIGHT_MIX"
        d["FFDC"]="SMALLER_DIMM_HEIGHT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0116b1c8:
        d["HwpReturnCode"]="RC_OCMB_IS_NOT_EXPLORER"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01232118:
        d["HwpReturnCode"]="RC_I2C_STATUS_ERROR"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x012f8768:
        d["HwpReturnCode"]="RC_P10_L3ERR_LINE_DELETE_REG_BUSY"
        d["FFDC"]="PRD_PURGE_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01316c21:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT4_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x013b53b1:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET0"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x013e0ae0:
        d["HwpReturnCode"]="RC_EXP_MCBIST_UNKNOWN_FAILURE"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x015b1bb9:
        d["HwpReturnCode"]="RC_P10_L3ERR_RD_CMD_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_6_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x016c0c32:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x016df377:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01702b92:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP4_BUF_SIZE"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01877ee6:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NO_GROUP_ALLOWED"
        d["FFDC"]="MSS_INTERLEAVE_ENABLE_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x019ab129:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERROR"
        d["FFDC"]="CLOCK_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01a366c8:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01aa2dcc:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01b0d02a:
        d["HwpReturnCode"]="RC_ODY_PPR_RESOURCE_UNAVAILABLE"
        d["FFDC"]="BANK_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01d20e40:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_START_NOMAINT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01dc6ec6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x01f7736f:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR35_RTT_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x020ba32d:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x021a3724:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x021bca1e:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_WRITE_OFFSET"
        d["FFDC"]="WRITE_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0235b546:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_ARY_FAILED"
        d["FFDC"]="MC_QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x023622c1:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RECORD_SPACE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x02418742:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_CALCULATION_ERR"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x02481f04:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0248f381:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR13_BAD_TCCD_L"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0265ad81:
        d["HwpReturnCode"]="RC_OTP_UNCORR_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x026d5403:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="CHIP_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x027359c1:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_FIELD_VALUE"
        d["FFDC"]="STRAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x02749597:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x02beba5d:
        d["HwpReturnCode"]="RC_PM_PGPE_SAFE_MODE_FAILS"
        d["FFDC"]="GPE2XIRAMDBG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x02c4e5a3:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_NO_RX_IDENTIFIED_ERR"
        d["FFDC"]="IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x02d10eea:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="RX1_LANE_CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x02dd1398:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="FREQUENCY_MAPPED_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x031ce3e1:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_CORE_NOT_DUMPABLE"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x033ee596:
        d["HwpReturnCode"]="RC_INVALID_BUCKET_ID"
        d["FFDC"]="BUCKET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0341c365:
        d["HwpReturnCode"]="RC_ODY_INVALID_ATX_OVERRIDE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x035bbe0b:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_FAIL"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x035da5aa:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR_2"
        d["FFDC"]="BAR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x036b67aa:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="ACTUAL_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x036ef023:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0384c2f5:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03857b40:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0399af62:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x039e41dc:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR_BAD_DRAM"
        d["FFDC"]="MR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03a3b94c:
        d["HwpReturnCode"]="RC_EXPLORER_ACTIVE_ERROR_LOG"
        d["FFDC"]="UNIT_FFDC_EXP_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03a87efe:
        d["HwpReturnCode"]="RC_PM_AVSBUS_SLAVE_BAD_CRC_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03a9a28d:
        d["HwpReturnCode"]="RC_MSS_FAILED_DATA_INTEGRITY_CHECK"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03af5f57:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_NFIR_NOT_CLEARED"
        d["FFDC"]="NFIR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03bc530f:
        d["HwpReturnCode"]="RC_P10_L3ERR_RD_CMD_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_7_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03c66ea9:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_DS_A"
        d["FFDC"]="DS_TEMPLATES_0147"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03cd90d9:
        d["HwpReturnCode"]="RC_P10_PHB_HV_UTILS_INVALID_ARGS"
        d["FFDC"]="PHB_HV_MAX_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03d190f6:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_OFFSET_UNSUPPORTED"
        d["FFDC"]="END_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03e1f9a0:
        d["HwpReturnCode"]="RC_PGPE_INIT_TIMEOUT"
        d["FFDC"]="PGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03f08ae0:
        d["HwpReturnCode"]="RC_ATOMIC_LOCK_OWNER_ID_INVALID"
        d["FFDC"]="EXPECTED_LOCK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x03f7801d:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="IDLE_UTILIZATION_DIMM_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04044427:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04055d9e:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STOP_FAIL"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0412a213:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="FEATURE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x043b7091:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET1"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x044b807d:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INVALID_IMAGE_SIZE"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x044c99f5:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_TARGET_STATE_ERR"
        d["FFDC"]="ASSOCIATED_EQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04582517:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_NO_PAU"
        d["FFDC"]="PAU_GOOD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x045bfe39:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="DATA1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0472a334:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="IO_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04737690:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RECORD_SPACE"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04799029:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04826e0d:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT3_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04911098:
        d["HwpReturnCode"]="RC_MSS_VOLT_WRONG_NUMBER_OF_VOLTAGES"
        d["FFDC"]="SUPPLIED_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04b398f0:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04b39957:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP1_BUF_SIZE"
        d["FFDC"]="TEMP1_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04f0611e:
        d["HwpReturnCode"]="RC_POZ_I2C_FAILED_TO_LOCK_ENGINE_TIMEOUT_ERROR"
        d["FFDC"]="RETRYCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x04f85936:
        d["HwpReturnCode"]="RC_SPPE_RUNNING"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x05097f72:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_UNDERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0549db57:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x054abbc7:
        d["HwpReturnCode"]="RC_ECL2_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x054fc19a:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x055413e6:
        d["Register FFDC"]="I2C_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::OTPC_M_STATUS_REGISTER",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x0558eb69:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY"
        d["FFDC"]="OSCSEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x057403c0:
        d["HwpReturnCode"]="RC_PM_QME_FIRINIT_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x057bc1f8:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="REF_CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0580fc0f:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_LPC_BAR_ATTR_ERR"
        d["FFDC"]="BAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x058beed5:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x05b62a0e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA26"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x05be5c29:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="BAD_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x05bfb64f:
        d["HwpReturnCode"]="RC_XGPE_PBA_INIT_FAILED"
        d["FFDC"]="MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x05d36cf3:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP"
        d["FFDC"]="MIRROR_POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x05f55453:
        d["HwpReturnCode"]="RC_QME_HALT_TIMEOUT"
        d["FFDC"]="PPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x05fceb54:
        d["Register FFDC"]="OTPROM_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::OTPC_M_STATUS_REGISTER",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x06280235:
        d["HwpReturnCode"]="RC_NO_MALF_PM_RESET"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0633ff3a:
        d["HwpReturnCode"]="RC_BAD_PROC_TARGET"
        d["FFDC"]="INPUT_BUF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06517bda:
        d["HwpReturnCode"]="RC_OTP_PIB_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06621d42:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EX_CONFIG"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06652bf0:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_DLL_LOCK_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x066dae8b:
        d["HwpReturnCode"]="RC_BAD_PROC_TARGET"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0678cc73:
        d["HwpReturnCode"]="RC_POZ_I2C_FAILED_TO_LOCK_ENGINE_TIMEOUT_ERROR"
        d["FFDC"]="DEVICEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06a0a6f0:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_TARGET_ADDRESS"
        d["FFDC"]="TARGET_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06b233bf:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06bc6837:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06c3bb29:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_NOT_ENOUGH_PAUS"
        d["FFDC"]="IOHS_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06dee701:
        d["HwpReturnCode"]="RC_PM_AVSBUS_MASTER_BAD_CRC_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06eb8009:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_UNDERFLOW"
        d["FFDC"]="CF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06f157d5:
        d["HwpReturnCode"]="RC_EXP_FLASH_COMMAND_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06f588ef:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLOFF_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x06fc1538:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT20_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x070172c4:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="N_MODE_PMIC0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x07060ebc:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x07109e01:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="BANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0710fa97:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="SCOMREG_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0737a9fc:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="QME_HCODE_BLOCK_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x074c3a0d:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0776651f:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x077faba3:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_PASSED_IN"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x079dfd8a:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="MODULE_HEIGHT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x07c55568:
        d["HwpReturnCode"]="RC_QME_START_HALTED"
        d["FFDC"]="XSR_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x07c56932:
        d["HwpReturnCode"]="RC_P10_INVALID_OCC_ACCESS_MODE_ERROR"
        d["FFDC"]="OCC_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x07e7d4e7:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="GROUP_IDS_IN_SYSTEM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x07ed9311:
        d["HwpReturnCode"]="RC_BAD_HOMER_PTR"
        d["FFDC"]="HOMER_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0801ea95:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="START_BAD_BITS_R1_BYTE4_7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x08271fc9:
        d["HwpReturnCode"]="RC_EXP_INBAND_BE_DATA_RANGE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x084fff6a:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0871dddc:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_HEADER_ERR"
        d["FFDC"]="HEADER_B1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0877cfeb:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x08847a1e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x08982b5b:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_TIMEOUT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x08a29c42:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="VDM_LARGE_SMALL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x08b52514:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x08b9c6af:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_LPC_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x08c0a61e:
        d["HwpReturnCode"]="RC_PGPE_RESET_TIMEOUT"
        d["FFDC"]="PGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0903cd98:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="TOPOSCOMS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09119fa3:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="EXPECTED_SM_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0918ae15:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="REF_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x091afc32:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_PRE_CONDITION_ERR"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x091e488f:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_INVALID_SMP9_CONFIG_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09242486:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0926b797:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09274f08:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_IOHS_NOT_SMP"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x092a523b:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VRT_DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x093447bd:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_CHIPLET_ID_ERR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x093b4991:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x093c0e63:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR51_BAD_WR_CRC_THRESHOLD"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09547183:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="EXP_BAR_ADDR_RANGECHECK_HIGH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0978f83b:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0995a3b4:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_RX_LANE_BUSY_TIMEOUT_ERROR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x099f51cc:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_POS_ERR"
        d["FFDC"]="IOLINK_A_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09afe0b3:
        d["Register FFDC"]="ODY_CBS_STATUS_REGS_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_CS_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_TR_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_EL_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_ENVSTAT_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_TR_HIST_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_EL_HIST_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SB_CS_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SB_MSG_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_STAT_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x09c2aa2a:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="READ_CLK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09de4107:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_POLL_FAILED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09e3310b:
        d["HwpReturnCode"]="RC_MSS_INVALID_CW_ENCODING"
        d["FFDC"]="CW_DATA_LEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09e7ae41:
        d["HwpReturnCode"]="RC_SET_ATOMIC_LOCK_FAIL"
        d["FFDC"]="CTRL_ATOMIC_LOCK_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09eea2c2:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="UNSUPPORTED_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x09ff778e:
        d["HwpReturnCode"]="RC_ODY_IO_LOAD_PPE_IMG_ERROR"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a013379:
        d["HwpReturnCode"]="RC_MSS_MRW_SAFEMODE_UTIL_THROTTLE_NOT_SUPPORTED"
        d["FFDC"]="MRW_SAFEMODE_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a045809:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="TOPOSCOMS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a0941d3:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="MODE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a15e68f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA19"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a1d5bf6:
        d["Register FFDC"]="OCCGPE0_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPETSEL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEMACR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXISGBU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXISGBL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIICACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIICACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIDCACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIDCACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x0a2da9cf:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_DLX_CONFIG_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a4f3edb:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="START_BAD_BITS_R1_BYTE0_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a53cf75:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a5bcdc5:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a5d7c1e:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_ODD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a909253:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_TIMEOUT"
        d["FFDC"]="HTM_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0a9ad2a3:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_DOWNSTREAM_EDPL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0aa8dfd6:
        d["HwpReturnCode"]="RC_PSTATE_PB_SAFE_FREQ_GT_PS0_FREQ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ab2e64c:
        d["HwpReturnCode"]="RC_EXPAND_RING_UTIL_INVALID_PARAMETERS"
        d["FFDC"]="OUT_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0aba7adf:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="MIRROR_BASE_ADDRS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ac344a0:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ac605c4:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ade8f58:
        d["Register FFDC"]="CBS_STATUS_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_CS_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_TR_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_EL_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_ENVSTAT_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_TR_HIST_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_EL_HIST_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SB_CS_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SB_MSG_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_STAT_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x0aea71ba:
        d["HwpReturnCode"]="RC_SBE_SPI_INVALID_PORT_MULTIPLEX_SET"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0b09e0b9:
        d["HwpReturnCode"]="RC_PSTATE_PB_VRT_HEADER_DATA_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0b0b39ee:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_INVALID_BUS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0b2e062c:
        d["Register FFDC"]="REG_FFDC_ADU_STATUS_REGISTER"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_STATUS_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_CMD_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_DATA_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_OPTION_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_ALTD_ADDR_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_FORCE_ECC_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x0b47fb11:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR0_BAD_BURST_LENGTH"
        d["FFDC"]="MAX_BURST_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0b5874e4:
        d["Register FFDC"]="ODY_OSC_SWITCH_SENSE_REG_SCOM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SNS1LTH_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x0b68c8c6:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0b7d5d2c:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERR"
        d["FFDC"]="RCS_CLOCK_TEST_IN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0bb2e76e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLOFF_NT_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0bb6279a:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_INVALID_BUS"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0bc9d40e:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0be2eabe:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_DBYTENUMBER"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0be3ebc3:
        d["HwpReturnCode"]="RC_POZ_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0be41c2d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA29"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0be70161:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0be9ee4e:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0bf47a3f:
        d["HwpReturnCode"]="RC_P10_SBE_INSTRUCT_START_MASTER_CORE_ECO_MODE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c00d3fb:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="AVSCTRL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c05d16e:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_WRITE_NO_DOORBELL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c0b444e:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INCORRECT_PATTERN_LENGTH"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c0e432b:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_TABLE_ERROR"
        d["FFDC"]="STEPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c0f6d45:
        d["HwpReturnCode"]="RC_KVREF_CAL_NOT_DONE_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c327845:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c331138:
        d["HwpReturnCode"]="RC_P10_REVERT_SBE_MCS_SETUP_SELECTED_MC_NOT_FOUND"
        d["FFDC"]="ATTR_PROC_SBE_MCS_SETUP_SELECTED_MC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c592cf4:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="HW_IMAGE_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0c5f00d0:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="ERR1_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0cbd8644:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLOFF_NT_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0cca6c27:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0cd38223:
        d["HwpReturnCode"]="RC_POZ_SPPE_NOT_READY_ERR"
        d["FFDC"]="BOOT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0cec5a3a:
        d["Register FFDC"]="CHECK_MASTER_STOP15_FFDC_REGS_EC"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::QME_SSH_SRC",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::QME_SCSR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x0cec9122:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_NOT_RUNNING"
        d["FFDC"]="TOD_FSM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0cee9cd7:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ceed9c3:
        d["HwpReturnCode"]="RC_KVREF_CAL_NOT_DONE_ERR"
        d["FFDC"]="PERV_TP_KVREF_AND_VMEAS_MODE_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0cf17d5f:
        d["HwpReturnCode"]="RC_COLLECT_EXPLORER_ERROR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0cfd14a8:
        d["HwpReturnCode"]="RC_P10_OCMB_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0d07ce94:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="BANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0d12bf2a:
        d["HwpReturnCode"]="RC_P10_PHB_HV_UTILS_INVALID_ARGS"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0d347ccc:
        d["HwpReturnCode"]="RC_MSS_SPD_TIMING_FAIL"
        d["FFDC"]="LOWER_BOUND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0d4904ba:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_MEM_ADDR_RANGE_OUT_OF_BOUNDS"
        d["FFDC"]="START_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0d583874:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LANE_INV_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0d738c02:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0d87a697:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_IOHS_TARGET_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0d9a3b2e:
        d["HwpReturnCode"]="RC_PM_SUSPEND_XGPE_FAILS"
        d["FFDC"]="GPE3XIDBGPRO"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0db7d302:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_CORE_NOT_FOUND"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0de0d9ea:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR12_BAD_VREFCS"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0defd9fd:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_NO_RX_IDENTIFIED_ERR"
        d["FFDC"]="DL_RX_LANE_CONTROL_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e1ff1f0:
        d["HwpReturnCode"]="RC_EXPECTED_STOP_LEVEL_NOT_REACHED"
        d["FFDC"]="EXPECTED_STOP_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e2894e0:
        d["HwpReturnCode"]="RC_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e502887:
        d["HwpReturnCode"]="RC_INVALID_RING_CHIPLET_SECTION"
        d["FFDC"]="RING_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e50a8ac:
        d["HwpReturnCode"]="RC_QME_META_COREQ_PROTECT_FAIL"
        d["FFDC"]="HCD_BUILD_ATTR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e538a18:
        d["HwpReturnCode"]="RC_OTP_TIMEOUT"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e698ef0:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_COMPUTED_ZERO_TCK_STD"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e79dac4:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="ATTR_ACTIVE_CORES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e7a8afc:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e7ea407:
        d["HwpReturnCode"]="RC_OTP_PIB_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e842835:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e8f7d82:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e935e3e:
        d["HwpReturnCode"]="RC_PMIC_DELAY_OUT_OF_RANGE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0e996f89:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_OVERFLOW"
        d["FFDC"]="ERROR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ea515e0:
        d["HwpReturnCode"]="RC_INVALID_PMIC_DT_DDR5_TARGET_CONFIG"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0eb598d9:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_BAD_STATE"
        d["FFDC"]="HTM_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ecb691d:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="DEVICEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ef74777:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR_3"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f091509:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f125f9a:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_TRAINING_TIMEOUT_FAIL"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f1dcc41:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_CCM_NOT_SUPPORTED_ERR"
        d["FFDC"]="TL_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f239f8c:
        d["HwpReturnCode"]="RC_INSUFFICIENT_DATA_IN_BUFFER"
        d["FFDC"]="ACTSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f27300e:
        d["HwpReturnCode"]="RC_MSS_EXP_POLL_ABORT_FW_STATUS_BUSY"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f35cd65:
        d["HwpReturnCode"]="RC_P10_WAIT_FOR_DMA_CHANNELS_TO_DRAIN_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f4df46e:
        d["HwpReturnCode"]="RC_HTM_SETUP_PROC_BAR_SIZE"
        d["FFDC"]="PROC_BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f4e17c4:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="SPD_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0f4f92d5:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_OVERFLOW"
        d["FFDC"]="PDW_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0fb0d22a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0fc25cf6:
        d["HwpReturnCode"]="RC_INVALID_SPI_ENGINE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0fd5e509:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0fe9bac9:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="REF_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ff489a0:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT_EQ"
        d["FFDC"]="CLK_CTRL_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x0ffff488:
        d["HwpReturnCode"]="RC_UNEXPECTED_ATTR_FORMAT_VER"
        d["FFDC"]="HEADER_MAJOR_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1011fdca:
        d["HwpReturnCode"]="RC_P10_PHB_HV_UTILS_INVALID_ARGS"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x101da393:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1040a385:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_OVERFLOW"
        d["FFDC"]="ATTR_ADJ_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1049e8dc:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x104fd349:
        d["HwpReturnCode"]="RC_EXP_RESPONSE_WRONG_REQID"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10650edc:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_UNDERFLOW"
        d["FFDC"]="ATTR_ADJ_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1072798c:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1084c898:
        d["HwpReturnCode"]="RC_POZ_I2C_WAIT_FOR_CMD_COMP_TIMEOUT_ERROR"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x109674b8:
        d["HwpReturnCode"]="RC_INVALID_MDS_MEDIA_CNTL_TARGET_CONFIG"
        d["FFDC"]="EXPECTED_CONTROLLERS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10a6cd14:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FAILURE_MSG_BLOCK"
        d["FFDC"]="ACTUAL_CSTESTFAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10b45636:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10b7c4dc:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_REVISION"
        d["FFDC"]="FUNCTION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10c06241:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_INVALID_ARRAY"
        d["FFDC"]="TRACE_ARRAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10c0b966:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR34_RTT_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10cd0b6f:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR12_BAD_VREFCS"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10f2f92f:
        d["HwpReturnCode"]="RC_I2C_PMIC_INVALID_READ_SIZE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x10f383a2:
        d["HwpReturnCode"]="RC_MSS_INVALID_TIMING_VALUE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x111faf94:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_FIR_FOUND"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1136e1c3:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x113a5a26:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11414143:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_UNDERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11517e65:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x115fd3f5:
        d["HwpReturnCode"]="RC_ACTAG_PASID_CONFIG_INVALID"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11620f48:
        d["HwpReturnCode"]="RC_QME_HALT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1181b13f:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x118c2838:
        d["HwpReturnCode"]="RC_QMEC_FUNC_CALL_ARGUMENT_ERROR"
        d["FFDC"]="INPUT_QME_RINGS_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x118c2b51:
        d["HwpReturnCode"]="RC_EXP_DRAM_INDEX_OUT_OF_BOUNDS"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11919817:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_FIELD_VALUE"
        d["FFDC"]="STRAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11974914:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x119e9b0b:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="BANK_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11a4f558:
        d["HwpReturnCode"]="RC_MSS_EXP_POLL_ABORT_FW_STATUS_BUSY"
        d["FFDC"]="HOST_DL0_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11bdc728:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="VDM_SMALL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11c35622:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET2"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11ce5224:
        d["HwpReturnCode"]="RC_INVALID_BUCKET_ID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x11da5329:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x120d152d:
        d["HwpReturnCode"]="RC_PM_PGPE_SAFE_MODE_FAILS"
        d["FFDC"]="GPE2XISRR0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1239144b:
        d["HwpReturnCode"]="RC_ODY_OUT_OF_BOUNDS_DBYTE_PASSED_TO_SWIZZLE"
        d["FFDC"]="MAX_DBYTE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x125fe0dd:
        d["Register FFDC"]="OCCGPE1_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPETSEL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEMACR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXISGBU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXISGBL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIICACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIICACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIDCACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIDCACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x126cc629:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_INVALID_DDR5_DRAM_WR_PREAMBLE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x12873aad:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="EC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x128aad5c:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STOP_FAIL"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x12aa4af0:
        d["HwpReturnCode"]="RC_XGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x12ab4faa:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_3DS_HEIGHT"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x12b9e7cd:
        d["HwpReturnCode"]="RC_INVALID_PMIC_DT_DDR5_TARGET_CONFIG"
        d["FFDC"]="NUM_DT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x12c0279a:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x12c095d3:
        d["HwpReturnCode"]="RC_P10_HW540133_CBM1_WA_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x12e3e9f5:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_DS_A"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1303f908:
        d["HwpReturnCode"]="RC_P10_IOHS_INIT_TIMEOUT_ERROR"
        d["FFDC"]="HALF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1311eff2:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_ODD_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1324260c:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x132b7d0e:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x132c9e60:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="VDM_NORMAL_LARGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x132d3c71:
        d["HwpReturnCode"]="RC_ODY_DTS_READ_DATA_TIMEOUT"
        d["FFDC"]="TARGET_MC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13311d75:
        d["Register FFDC"]="PM_FIR_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIRMASK_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIRACT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIRACT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x133abca4:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1342fbbd:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x134402f3:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET2"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1361a2bd:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_INVALID_ACCESS_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x136891a4:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x136b5e62:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1374b058:
        d["HwpReturnCode"]="RC_MSS_FFE_CURSOR_OVERFLOW"
        d["FFDC"]="PRE_CURSOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x139d846d:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_NUM_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13aa4421:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_DLX_CONFIG_FAIL"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13ac0beb:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_REVISION_FOR_MODULE_SPECIFC"
        d["FFDC"]="DRAM_GENERATION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13bd0421:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13bffb91:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_FABRIC_BROADCAST_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13d03cab:
        d["HwpReturnCode"]="RC_MSS_EMPTY_VECTOR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13dbeefc:
        d["HwpReturnCode"]="RC_ODY_INVALID_VERBOSITY_CONFIG"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13f5bc6b:
        d["HwpReturnCode"]="RC_XIPC_INVALID_MVPD_RINGCLASS"
        d["FFDC"]="RING_CLASS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x13fdd918:
        d["HwpReturnCode"]="RC_INVALID_TOR_VERSION"
        d["FFDC"]="TOR_VER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1401bbf5:
        d["HwpReturnCode"]="RC_PM_PBA_BCUE_STOP_TIMEOUT"
        d["FFDC"]="POLLVALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x14188b45:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="MRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x141e5326:
        d["HwpReturnCode"]="RC_QME_START_HALTED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x14514eeb:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="EXT_CMD_REQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x14661e0a:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EQ_CONFIG"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1486cea9:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x14ab065d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x14af090f:
        d["HwpReturnCode"]="RC_EXP_FLASH_COMMAND_ERR"
        d["FFDC"]="MCHP_STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x14b91420:
        d["Register FFDC"]="PSS_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_CR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_CR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_CR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_STAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_CMD",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RESET",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_WDATA",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA5",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA6",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_ADC_RDATA7",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_100NS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_CR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_CR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_CR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_STAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_CMD",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_WDATA",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_P2S_RDATA",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x14bd7bce:
        d["HwpReturnCode"]="RC_XIPC_BAD_PG_XLATE"
        d["FFDC"]="PG_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x14fbe96b:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_OUT_OF_RANGE"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1505b41b:
        d["HwpReturnCode"]="RC_P10_RAM_INVALID_REG_TYPE_ACCESS_ERR"
        d["FFDC"]="REG_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x150aeaa2:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="TFMR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x150b693b:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_UNDERFLOW"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x150e339a:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x150fd1f0:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LANE_INV_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x15105714:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLON_RD_ATTR_VALUE"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1511edc8:
        d["HwpReturnCode"]="RC_PM_SUSPEND_XGPE_FAILS"
        d["FFDC"]="OCCFLG3_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x153113e4:
        d["HwpReturnCode"]="RC_XIPC_CODE_BUG"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1569a8d6:
        d["HwpReturnCode"]="RC_QME_START_HALTED"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1574d5da:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET2"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x157d20e4:
        d["HwpReturnCode"]="RC_PM_QME_BAR_SIZE_INVALID"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x157d6e06:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="MSS_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x158acb07:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FW_MISMATCH"
        d["FFDC"]="EXPECTED_FW_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x15900c85:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_IOLINK_TARGET_MATCH_ERR"
        d["FFDC"]="PARENT_IOHS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x159eddb7:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x15ac074a:
        d["HwpReturnCode"]="RC_P10_SMP_WRAP_UNSUPPORTED_BROADCAST_MODE"
        d["FFDC"]="BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x15b4ead8:
        d["HwpReturnCode"]="RC_QME_FAILED_TO_ENTER_QUIESCE_MODE"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x15c84280:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="SP_WKUP_REG_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x15cb81ec:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x15e9c189:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_BROADCAST_MODE_ERR"
        d["FFDC"]="BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x164c7a5d:
        d["HwpReturnCode"]="RC_LPC_ACCESS_TIMEOUT"
        d["FFDC"]="COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1653ce44:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT_MC"
        d["FFDC"]="ENTITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x16593c7a:
        d["HwpReturnCode"]="RC_BCE_BUF_SMALLER_FOR_NON_HCODE_SECTION"
        d["FFDC"]="QME_HCODE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x16596c29:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ_GT_PSTATE0_FREQ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x165ef621:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_INVALID_CMD"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x16714fca:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERR"
        d["FFDC"]="CLOCK_B_OK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1673cd32:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_INVALID_NUM_RANKS"
        d["FFDC"]="NUM_RANKS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1680704c:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="NUM_LOOPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x16b76a7b:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x16bc7de2:
        d["HwpReturnCode"]="RC_PMIC_RANGE_CONVERSION_OVERFLOW"
        d["FFDC"]="RANGE_0_VOLT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x16c8aa50:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET0"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x16f57189:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x16f92327:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_SCOM_PATH"
        d["FFDC"]="POLL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x170168a6:
        d["HwpReturnCode"]="RC_INVALID_RING_SECTION"
        d["FFDC"]="SECTION_NAME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17018e82:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_UNDERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x172648a8:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDDATA1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1734b62c:
        d["HwpReturnCode"]="RC_MSS_INVALID_REFRESH_RATE_REQUEST"
        d["FFDC"]="REFRESH_RATE_REQUEST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x173ab723:
        d["HwpReturnCode"]="RC_P10_REVERT_SBE_MCS_SETUP_SELECTED_MC_NOT_FOUND"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17415ad9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_CONSISTENCY_ERR"
        d["FFDC"]="A_AGGREGATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1741c54e:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_INVALID_CONFIGURATION"
        d["FFDC"]="POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x174859ae:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNKNOWN_ERROR"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17641c08:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_NOT_RUNNING"
        d["FFDC"]="COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17856b84:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="BANK_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17875a5d:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x179084e7:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="CPLT_CONF1_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17938eea:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET8"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17948e29:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_CI"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1795656e:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x179c0f1a:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17b46a5c:
        d["HwpReturnCode"]="RC_POZ_IO_TX_TDR_ERROR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17bfe4ad:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_VENDOR_IDS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17dd8372:
        d["HwpReturnCode"]="RC_EXP_RESPONSE_WRONG_REQID"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x17e3a087:
        d["HwpReturnCode"]="RC_POZ_I2C_WAIT_FOR_CMD_COMP_TIMEOUT_ERROR"
        d["FFDC"]="TIMEOUTCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1808ed1c:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_SL_FAILED"
        d["FFDC"]="CLK_STAT_SL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18153244:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERR"
        d["FFDC"]="READ_SNS1LTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1822f4bd:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_MISSING_FLAG"
        d["FFDC"]="COMMAND_FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x183aa960:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1865a658:
        d["HwpReturnCode"]="RC_ODY_TOO_MANY_RANKS_FOR_SUBTEST_SUPPORT"
        d["FFDC"]="MAX_RANK_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18779e59:
        d["HwpReturnCode"]="RC_TARGET_ENTRY_MAGIC_WORD_MISMATCH"
        d["FFDC"]="ACTUAL_MAGICWORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18a41b93:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="BIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18a7d1a4:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="RANK3_BADDQ0_63"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18a94309:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="QME_HCODE_BLOCK_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18b1e478:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_SCOM_PATH"
        d["FFDC"]="SB_CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18b8a453:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="INPUT_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18c282b4:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP1_BUF"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x18e68a11:
        d["HwpReturnCode"]="RC_I2C_PMIC_INVALID_READ_SIZE"
        d["FFDC"]="SIZE_REQUESTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x190a0cf7:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET0"
        d["FFDC"]="TARGET_TEMP_SENSOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x191cacbd:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_COMPARE_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="SUBTEST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1929b8d2:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR"
        d["FFDC"]="REMOTE_FBC_ID1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x193a747e:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="IS_3DS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x195e231f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT22_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1962baa0:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="CORE_SSHSRC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x197de076:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1986f7a4:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY_TX"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x198a4dee:
        d["HwpReturnCode"]="RC_MSS_CHANNEL_MIRROR_SETTINGS_MISMATCH_RANK1"
        d["FFDC"]="VALUE_CHA_CS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x19a2c784:
        d["HwpReturnCode"]="RC_P10_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="RINGMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x19b86d49:
        d["HwpReturnCode"]="RC_MSS_OUTPUT_OVERFLOW_CALC_UTIL"
        d["FFDC"]="MULTIPLIER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x19d1c5e4:
        d["HwpReturnCode"]="RC_POZ_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x19e28d2a:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="BANK_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x19ed7362:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_FAILED"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x19ee0b31:
        d["HwpReturnCode"]="RC_MSS_MDS_I2C_WRONG_RSP_SIZE"
        d["FFDC"]="RESPONSE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x19ee96a9:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="MC_FREQ2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1a06338e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA28"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1a265941:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1a267009:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_FAILED"
        d["FFDC"]="EQ_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1a28e928:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_HEADER_ERR"
        d["FFDC"]="HEADER_B0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1a2e8fe3:
        d["HwpReturnCode"]="RC_PGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1a521711:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_HEIGHT_MIX"
        d["FFDC"]="SMALLER_DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ab5eeb6:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="CMP_HASH_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ac1eeb9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_PAU_FREQ_ERR"
        d["FFDC"]="PAU_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ad45eaf:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY_TX"
        d["FFDC"]="TX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ad51086:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="RING_BUF1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1aecf201:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_SIZE_ERROR"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1af55dbe:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_UNSUPPORTED_SPLIT"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1b04f522:
        d["HwpReturnCode"]="RC_P10_VAS_QUIESCE_TIMEOUT"
        d["FFDC"]="NORTHDATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1b0ae27d:
        d["Register FFDC"]="REG_FFDC_ODY_CCS_FAILURE"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_CCS_MODEQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_CCS_STATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_CCS_CNTLQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBMCATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_00",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_01",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_02",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_03",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_04",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_05",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_06",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_07",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_08",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_09",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_10",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_11",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_12",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_13",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_14",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_15",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_16",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_17",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_18",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_19",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_20",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_21",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_22",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_23",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_24",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_25",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_26",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_27",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_29",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR0_31",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_00",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_01",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_02",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_03",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_04",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_05",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_06",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_07",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_08",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_09",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_10",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_11",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_12",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_13",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_14",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_15",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_16",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_17",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_18",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_19",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_20",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_21",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_22",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_23",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_24",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_25",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_26",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_27",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_29",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_CCS_INST_ARR1_31",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x1b0ff06a:
        d["HwpReturnCode"]="RC_P10_OTL_NOT_IN_RESET"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1b1fb493:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_CONFIGURATION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1b22b4cb:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="ACTIVE_CORES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1b762558:
        d["HwpReturnCode"]="RC_XIPC_SKELETON_GEN_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1b8e6289:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1b9a5eb4:
        d["HwpReturnCode"]="RC_AUTO_WAKEUP_VECTOR_CREATION_FAILED"
        d["FFDC"]="STOP_API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1bc4b648:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNSUPPORTED_MODE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1bc7dc52:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_CONFIG_MODE_ERR"
        d["FFDC"]="IOHS_CONFIG_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1bde98a9:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1bf65acf:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET8"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1bf6dd74:
        d["HwpReturnCode"]="RC_PM_SET_HOMER_BAR_NOT_4MB_ALIGNED"
        d["FFDC"]="MEM_BAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1c0895ec:
        d["HwpReturnCode"]="RC_MSS_INVALID_REFRESH_RATE_REQUEST"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1c112192:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR4_BAD_MIN_REFRESH_RATE"
        d["FFDC"]="MIN_REFRESH_RATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1c2626e3:
        d["HwpReturnCode"]="RC_L3_PURGE_DONE_TIMEOUT"
        d["FFDC"]="PM_PURGE_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1c3606fa:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_PG_ERR"
        d["FFDC"]="EQ_PG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1c4f0a56:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA17"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1c7606fc:
        d["HwpReturnCode"]="RC_POZ_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1c803825:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_MAGIC"
        d["FFDC"]="REF_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1c9641df:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ca143f7:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INCORRECT_PATTERN_LENGTH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1cb3ef7a:
        d["HwpReturnCode"]="RC_MSS_EXP_CATASTROPHIC_DRAMINIT_TRAINING_FAIL"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1cc404fc:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1cccfa45:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR5_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_VPP_OPERABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1cd90622:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="NOMINAL_TDP_IDC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ce284dd:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_HOMER_SCOM_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1cf14499:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE_DDR5"
        d["FFDC"]="N_MODE_PMIC2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d15b454:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_OVERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d15e5eb:
        d["HwpReturnCode"]="RC_NCU_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d217888:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d2cec8d:
        d["HwpReturnCode"]="RC_POWERBUS_PURGE_DONE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d440d2c:
        d["HwpReturnCode"]="RC_EXP_UNKNOWN_REVISION"
        d["FFDC"]="REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d6fa623:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_SIZE_ERROR"
        d["FFDC"]="ACT_VEC_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d816374:
        d["HwpReturnCode"]="RC_MSS_INVALID_PORT_INDEX_PASSED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d989bac:
        d["HwpReturnCode"]="RC_XIPC_MVPD_MK_KEYWORD_VERSION_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1d9c33a6:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R08_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1daa6c49:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR"
        d["FFDC"]="TOD_ERROR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1dc4e7ba:
        d["HwpReturnCode"]="RC_HW_IMAGE_INVALID_SIZE"
        d["FFDC"]="MAX_HW_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1dcd2cc7:
        d["HwpReturnCode"]="RC_INST_STORE_INTR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1dce2cf1:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="OPERATION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1dd86d03:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_INVALID_ARGS_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1de13e54:
        d["HwpReturnCode"]="RC_POZ_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1deadd01:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_TM_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1deb7090:
        d["HwpReturnCode"]="RC_PMIC_NON_REDUNDANT_FAIL"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1df3add4:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="BIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e069929:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e1704c7:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e22f563:
        d["HwpReturnCode"]="RC_P10_DL_PGRESET_STUCK"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e23833e:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL_DDR5_2U"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e25791f:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="GEN_HASH_7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e3931a4:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_ALREADY_AT_BOUNDARY"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e5b9e94:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR8_RD_PREAMBLE_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e6532f5:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_WRITE_PREAMBLE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e662f5f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_ODD_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e75ad3c:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="HOST_DL0_EDPL_MAX_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e8f8187:
        d["HwpReturnCode"]="RC_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e947d6d:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="ERROR_LANE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1e94ed78:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ebd9a83:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="REQ_MEMORY_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ec3e98e:
        d["HwpReturnCode"]="RC_MSS_INVALID_DRAM_GEN"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ed47845:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ee09ac7:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR11_BAD_VREFCA"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1eee139e:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="CMD_SCOPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1eee81eb:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="BANK_GROUP_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1ef75175:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET8"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1efa679f:
        d["HwpReturnCode"]="RC_IO_EXT_CMD_POLL_FAILED"
        d["FFDC"]="DONE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1efd8e6c:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_MAGIC"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f15c94c:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_PG_ERR"
        d["FFDC"]="MMA_PG_BIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f208b0d:
        d["HwpReturnCode"]="RC_P10_PBI_MASTER_MACHINES_IDLE_TIMEOUT"
        d["FFDC"]="NX_DMA_SU_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f29167d:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_PBCQ_CQ_NOT_IDLE"
        d["FFDC"]="PHB_RESET_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f353565:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f3bdcf7:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="MASTER_CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f49eb9a:
        d["HwpReturnCode"]="RC_ERROR_UNSUPPORTED_BY_SBE"
        d["FFDC"]="INVALID_ERRVAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f4f8536:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f558f31:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLOFF_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f56154d:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f59e39e:
        d["HwpReturnCode"]="RC_ATOMIC_LOCK_OWNER_ID_INVALID"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f5f2ac5:
        d["HwpReturnCode"]="RC_PM_OCC_FIRINIT_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f6ae114:
        d["HwpReturnCode"]="RC_P10_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="RETURN_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f75649d:
        d["HwpReturnCode"]="RC_POZ_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1f902b6f:
        d["HwpReturnCode"]="RC_POZ_I2C_FIFO_TIMEOUT_ERROR"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1fc3d0de:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_OUT_OF_RANGE"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1fcf07a9:
        d["HwpReturnCode"]="RC_XGPE_INIT_TIMEOUT"
        d["FFDC"]="XGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1fd421ca:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ_GT_PSTATE0_FREQ"
        d["FFDC"]="SYSTEM_PSTATE0_FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1fdd6813:
        d["HwpReturnCode"]="RC_INVALID_RING_IMAGE"
        d["FFDC"]="VERSION_REQUIRED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x1fe0a41f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2016fc45:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="POWERSAVE_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x20505f93:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_INVALID_MCD_GROUP_SIZE_ERR"
        d["FFDC"]="MCD_RANGE_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x205600bd:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2066a2ab:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA13"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x206ec732:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDLEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2074b830:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="DD_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2075a778:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x208f213a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SIZE_MAPPING_ERROR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x209677a3:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR10_BAD_VREFDQ"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x20a50eff:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x20c0a1be:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x20c46659:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_US_B"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x20cdf902:
        d["HwpReturnCode"]="RC_QMEC_CODE_BUG"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x20db5dcd:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_POLL_THRESHOLD_ERR"
        d["FFDC"]="OPCODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x20fdb8ba:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_DLL_LOCK_FAIL"
        d["FFDC"]="EXT_ERR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x210407c2:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERROR"
        d["FFDC"]="READ_SNS1LTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x211626c9:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR4_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_ENDURANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x21319641:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR_1"
        d["FFDC"]="POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2133bc77:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR5_DRV_IMP_ATTR_VALUE"
        d["FFDC"]="IS_PULL_UP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x21482ec0:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="NEEDED_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2158e590:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_MC_FREQ_LOOKUP_ERR"
        d["FFDC"]="FREQ_MC_MHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x21644d85:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET2"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2164df23:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLON_NT_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x217fcd1e:
        d["HwpReturnCode"]="RC_SET_ATOMIC_LOCK_BUSY"
        d["FFDC"]="CTRL_ATOMIC_LOCK_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2191301f:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR34_RTT_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2199ae72:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INVALID_ADDRESS_PAIR_INDEX"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x21b676f8:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x21e5b988:
        d["HwpReturnCode"]="RC_RCS_CLOCK_ERR"
        d["FFDC"]="CLOCK_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x220f4656:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RANK"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x222f8094:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="ATTR_ACTIVE_CORES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x224c1f66:
        d["HwpReturnCode"]="RC_L3_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="L3_CLK_SYNC_DROP_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2267e3c9:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x228e74ae:
        d["HwpReturnCode"]="RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x22b3e255:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ENCODE_ERROR"
        d["FFDC"]="ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x22c05212:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="QSCR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x22c6370c:
        d["HwpReturnCode"]="RC_P10_RNG_INIT_CONDITIONER_STARTUP_TEST_FAILED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x22cca8a6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x22e247c0:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="IMAGE_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x22f9aba9:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23168307:
        d["HwpReturnCode"]="RC_KVREF_CAL_NOT_DONE_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2319bf7f:
        d["HwpReturnCode"]="RC_MSS_CALC_PORT_POWER_EXCEEDS_MAX"
        d["FFDC"]="CALCULATED_PORT_POWER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23321449:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_XSCOM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23528ab5:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="GEN_HASH_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2365f18d:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x239aa1e8:
        d["HwpReturnCode"]="RC_MSS_INVALID_SYMBOL_TO_DQ"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23a31339:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR6_WR_RECOVERY_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23a46535:
        d["HwpReturnCode"]="RC_XIPC_BAD_PG_XLATE"
        d["FFDC"]="IMG_PG_ENTRIES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23a5c214:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="IDLE_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23ad4a58:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23bd03fa:
        d["HwpReturnCode"]="RC_ODY_OUT_OF_BOUNDS_DBYTE_PASSED_TO_SWIZZLE"
        d["FFDC"]="DBYTE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23c25f00:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_LINK_TRAIN_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23cac3f7:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_ERR"
        d["FFDC"]="SHIFTED_A_ERR_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23d4f78f:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_ACTION_POLL_THRESHOLD_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23dd9902:
        d["HwpReturnCode"]="RC_MIXED_TP_CHIPLET_BIST_REQUESTED"
        d["FFDC"]="CHIPLETS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23e7ac16:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23ebf3d0:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_HEADER_ERR"
        d["FFDC"]="HEADER_B4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23edaf68:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_TARGET_STATE_ERR"
        d["FFDC"]="CORE_FUNCTIONAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23ee3dc5:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23ef3812:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LCO_MODE_SETUP_ATTR_ERR"
        d["FFDC"]="LCO_MODE_SETUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23f10618:
        d["HwpReturnCode"]="RC_ODY_MCBIST_DATA_FAIL"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x23f8c579:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x24141561:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2434738b:
        d["HwpReturnCode"]="RC_PM_PGPE_SAFE_MODE_FAILS"
        d["FFDC"]="GPE2XIDBGPRO"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x244a4543:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="IS_VDM_ENABLED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x246e15f0:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x247f9ea3:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2493d5aa:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x24b1d4e2:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR_BAD_STRAP_VALUE"
        d["FFDC"]="MR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x24ccfa3c:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x24d04eb9:
        d["HwpReturnCode"]="RC_EXP_MNFG_SPI_FLASH_CE"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x24e53bff:
        d["HwpReturnCode"]="RC_DONE_HALT_NOT_SET"
        d["FFDC"]="POLL_DELAY_SIM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x24fc6d63:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x24ff353d:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_IC_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x250e2874:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET2"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x251f91be:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="CURR_REGION_SIZE_LEFT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2523d75b:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_HOMER_SCOM_ERROR"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x25263566:
        d["HwpReturnCode"]="RC_MSS_PORT_DOES_NOT_SUPPORT_MAJORITY_FREQ"
        d["FFDC"]="FREQUENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2530acf1:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x25509234:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_MIXED_MDS_PLUG_ERROR"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x25568128:
        d["HwpReturnCode"]="RC_POZ_I2C_FAILED_TO_LOCK_ENGINE_TIMEOUT_ERROR"
        d["FFDC"]="ATOMICLOCKREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x256162f3:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_PLANAR_DRAM_WIDTH"
        d["FFDC"]="DRAM_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x25644658:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_ATTR_VALUE"
        d["FFDC"]="STRAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x256c9f0f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x256eb43a:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_NOTSTOPPING"
        d["FFDC"]="C_RAS_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x257730ff:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x258aa5f5:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_SPACE_OVERFILL"
        d["FFDC"]="END_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x25a5f663:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="SELECTED_DESKEW_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x25b84637:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x25d44dcb:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_TOO_LARGE"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x260a3d4c:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_NO_PAU"
        d["FFDC"]="IOHS_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2611d9f2:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT29_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2633fa3d:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_IC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x263fdeaf:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_HEIGHT_MIX"
        d["FFDC"]="LARGER_DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2644db59:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK_PASSED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26566288:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2682ea15:
        d["HwpReturnCode"]="RC_ODY_SPPE_ATTR_SETUP_INVALID_TARGET"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x268845b2:
        d["HwpReturnCode"]="RC_INVALID_SBE_FFDC_PACKET"
        d["FFDC"]="INVALID_ERRVAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x268d46f9:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_ACCESS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26a05932:
        d["Register FFDC"]="REG_FFDC_P10_IO_QUIESCE_LANE_TL_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_FP01_CFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_FP23_CFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_MISC_CFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_FM0123_ERR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_PR0123_ERR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x26a3d94a:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="ERROR_THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26a5fd9c:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26dd3e75:
        d["HwpReturnCode"]="RC_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="BITS_DECODED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26e353a1:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNKNOWN_ERROR"
        d["FFDC"]="PROCEDURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26eb74d0:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="VDM_SMALL_NORMAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26f311ef:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_IOHS_NOT_SMP"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26fc8c77:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT24_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x26ffb0ae:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="GROUP_IDS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2706cce7:
        d["HwpReturnCode"]="RC_P10_HW540133_CCALCOMP_TIMEOUT"
        d["FFDC"]="UNCALIBRATED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2719438d:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x271c3777:
        d["HwpReturnCode"]="RC_P10_HW540133_WORKAROUND_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x271c8cda:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x27382a12:
        d["HwpReturnCode"]="RC_INVALID_2U_PMIC_TARGET_CONFIG"
        d["FFDC"]="EXPECTED_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2751e897:
        d["HwpReturnCode"]="RC_INVALID_PMIC_DT_DDR5_TARGET_CONFIG"
        d["FFDC"]="NUM_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x275433f2:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NON_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="ADDRESS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x275cf314:
        d["HwpReturnCode"]="RC_P10_NCU_ENABLE_DARN_RNG_DISABLED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x277282ad:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="CUST_QME_RINGS_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x27efc971:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_CONFIGURATION"
        d["FFDC"]="NUMDBYTE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x280dab5d:
        d["HwpReturnCode"]="RC_PGPE_INIT_TIMEOUT"
        d["FFDC"]="PGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x282e6c35:
        d["HwpReturnCode"]="RC_BAD_POUNDW_VPD_READ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28369ed1:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28425dd2:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x284df40e:
        d["HwpReturnCode"]="RC_PM_MALF_NO_DEAD_CORES"
        d["FFDC"]="OCC_FLAG2_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x284f24e8:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="REM_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x286758dd:
        d["HwpReturnCode"]="RC_MSS_MAINT_SYMBOL_NOT_FOUND"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28737e2f:
        d["HwpReturnCode"]="RC_MSS_MAINT_INVALID_SYMBOL"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x287788c9:
        d["HwpReturnCode"]="RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28789e57:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="REM_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2889f127:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_BUSY"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28bd4ee2:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28bd710d:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_TFCSR_ERROR_CHECK_FAILED"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28bfa709:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR5_DRV_IMP_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28dbb9ff:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28dc33f4:
        d["HwpReturnCode"]="RC_P10_PUTRING_OPCG_DONE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28e58471:
        d["HwpReturnCode"]="RC_MSS_SPD_TIMING_FAIL"
        d["FFDC"]="FAILED_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28ee85e5:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="ERROR_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x28f8aac5:
        d["HwpReturnCode"]="RC_DONE_HALT_NOT_SET"
        d["FFDC"]="POLL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2904eea0:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="IS_CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2942098e:
        d["HwpReturnCode"]="RC_MSS_PORT_DOES_NOT_SUPPORT_MAJORITY_FREQ"
        d["FFDC"]="FREQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x294466fe:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x29687e82:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_WRONG_BOOT_STAGE"
        d["FFDC"]="BOOT_STAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x29799835:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_CORE_FREQ_RATIO_ERR"
        d["FFDC"]="FREQ_CORE_CEILING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x297eed00:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="ADDR_ONLY_OPER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x299b7557:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x29a45121:
        d["HwpReturnCode"]="RC_MSS_LOOKUP_FAILED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x29b0baa2:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x29b9fdc3:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="CMN_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x29d3c53e:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ECO_CHIP_CONTAINED_CONFIG_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x29e4d167:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_ALREADY_AT_BOUNDARY"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x29f75e2c:
        d["HwpReturnCode"]="RC_QME_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a1d5ffb:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_IOLINK_SEARCH_ERR"
        d["FFDC"]="EVEN_NOT_ODD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a203508:
        d["HwpReturnCode"]="RC_P10_SBE_ATTR_SETUP_NMMU1_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a2aeee0:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a340f39:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a38f0dd:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a3ee2f0:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a56eeb6:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="FLAG_CHECK_HOST_PASS_THROUGH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a60521a:
        d["HwpReturnCode"]="RC_SELF_SAVE_INIT_FAILED"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a6077a4:
        d["HwpReturnCode"]="RC_P10_L3ERR_EXTRACT_SYNDROME_NOT_FOUND"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a6143b8:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR112_BAD_DFE_GAIN_BIAS"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a68a17f:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a8cf9fb:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_FLAG"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2a9e0259:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_PBCQ_CQ_NOT_IDLE"
        d["FFDC"]="CQ_STAT_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ab8dfdb:
        d["HwpReturnCode"]="RC_PM_PGPE_SAFE_MODE_FAILS"
        d["FFDC"]="GPE2XIRAMEDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2abc1e04:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_NFIR_NOT_CLEARED"
        d["FFDC"]="NFIR_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2abdc97f:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="GEN_HASH_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ad6951c:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NON_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="DATA1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ae2a239:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b0a349c:
        d["HwpReturnCode"]="RC_MSS_DIVIDE_BY_ZERO"
        d["FFDC"]="DIVIDEND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b19c595:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR14_BAD_ECS_CID"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b1c8a02:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b24e83e:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_NULL_POINTER"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b26bd00:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_SPACE_OVERFILL"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b389678:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_NOT_RUNNING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b40a34e:
        d["HwpReturnCode"]="RC_POWERBUS_PURGE_DONE_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b44c10d:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_SCOM_PATH"
        d["FFDC"]="SB_MSG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b53c906:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="SRANK_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b6246e2:
        d["HwpReturnCode"]="RC_BCEBAR0_TOPOLOGY_INIT_ERROR"
        d["FFDC"]="BCE0_BAR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b692045:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_NO_IOHS_MATCH_ERR"
        d["FFDC"]="LINK_CNFG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b6b0c31:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_TARGET_STATE_ERR"
        d["FFDC"]="ASSOCIATED_PERV_FUNCTIONAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b7b149e:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ_GT_PSTATE0_FREQ"
        d["FFDC"]="FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2b936eeb:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_FLAG"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2bc32fa1:
        d["HwpReturnCode"]="RC_POZ_I2C_WAIT_FOR_CMD_COMP_TIMEOUT_ERROR"
        d["FFDC"]="DEVICEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2bf1e91f:
        d["HwpReturnCode"]="RC_ODY_IO_LOAD_PPE_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2bf534cf:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="VPD_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2bf6fab1:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_DDR5_NOT_SUPPORTED"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2bf7df84:
        d["HwpReturnCode"]="RC_PGPE_INIT_HALT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2bfdb70f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_EVN_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2c07b864:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2c2ee9c3:
        d["HwpReturnCode"]="RC_INVALID_GI2C_DDR5_TARGET_CONFIG"
        d["FFDC"]="EXPECTED_GI2CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2c38d89d:
        d["HwpReturnCode"]="RC_INVALID_GI2C_DDR5_TARGET_CONFIG"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2c4608af:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="REM_FBC_GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2c75fd16:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2c945e5f:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_L3_TABLE_ERROR"
        d["FFDC"]="L3_STEPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2c95a46e:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_SIZE_ERROR"
        d["FFDC"]="COMMAND_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ca4ab94:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_SAVE_ERROR"
        d["FFDC"]="TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2caab0ea:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R0A_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2cb239b1:
        d["HwpReturnCode"]="RC_P10_HW540133_FLB_WA_ERR"
        d["FFDC"]="LOCK_ERR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2cbf0ff2:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="N_MODE_PMIC1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ce82617:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT2_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2cfa468d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_MFG_ID"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2cfb12c8:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_CALC_NCK"
        d["FFDC"]="TIMING_PS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d063cd9:
        d["HwpReturnCode"]="RC_LPC_OPB_ERROR"
        d["FFDC"]="FFDC_TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d0e3f5e:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT6_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d1b5a4a:
        d["HwpReturnCode"]="RC_P10_PUT_REG_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d1bc037:
        d["HwpReturnCode"]="RC_XIPC_INVALID_SYSPHASE_PARM"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d1e23cb:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d49aa23:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d5906ac:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d5f0ce0:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="REM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d655941:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_GROUP_ADD_INTERNAL_ERR"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d6737b1:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="XRAM_IMAGE_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d6a997e:
        d["HwpReturnCode"]="RC_MSS_LOOKUP_FAILED"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d6b8499:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_CLOCK_ATTRIBUTES"
        d["FFDC"]="IOHS_CLOCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2d80e93e:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT12_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2dabf4e9:
        d["HwpReturnCode"]="RC_ODY_INVALID_VERBOSITY_CONFIG"
        d["FFDC"]="PORT0_VERBOSITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2dbb3daf:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="MCHP_STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2dbe3c5e:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="TCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2dcebca3:
        d["HwpReturnCode"]="RC_XIPC_MVPD_DD_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_DD_KWD_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2dd24e31:
        d["HwpReturnCode"]="RC_EXPLORER_SAVED_IMAGEA_ERROR_LOG"
        d["FFDC"]="UNIT_FFDC_EXP_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e462a90:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_ERROR"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e471a42:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_SPACE_OVERFILL"
        d["FFDC"]="PUB_REV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e480d65:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="MC_UNIT2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e4ad0e9:
        d["HwpReturnCode"]="RC_MSS_RANK_OUT_OF_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e4b5595:
        d["HwpReturnCode"]="RC_OCMB_IS_NOT_ODYSSEY"
        d["FFDC"]="ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e5314a9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="LOC_FBC_CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e612f25:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_TM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e67ccf9:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT_CORE"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e7f36f7:
        d["HwpReturnCode"]="RC_PM_AVSBUS_STATUS_READ_ERROR"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e8ca673:
        d["HwpReturnCode"]="RC_P10_L3ERR_LINE_DELETE_REG_BUSY"
        d["FFDC"]="COUNT_THRESHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e8d5860:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="EFD_BLOCK_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2e9b34ad:
        d["HwpReturnCode"]="RC_CPMR_HDR_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2eacedeb:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2eae25f0:
        d["HwpReturnCode"]="RC_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2eb17880:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="ULTRA_TDP_IAC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ec4d9b4:
        d["HwpReturnCode"]="RC_ODY_INVALID_ATX_OVERRIDE"
        d["FFDC"]="FAILING_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ec9463b:
        d["HwpReturnCode"]="RC_L3_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ed15cda:
        d["HwpReturnCode"]="RC_MSS_FAILED_TO_FIND_TRFC"
        d["FFDC"]="SDRAM_DENSITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ee6eb2e:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ef90f7f:
        d["HwpReturnCode"]="RC_MSS_MDS_I2C_CMD_FAIL"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f1ed331:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NON_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f30b61f:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_SUPERFAST_READ_FAILED_TO_INIT"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f382fda:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="MAX_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f443266:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f47512c:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_WRITE_POSTAMBLE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f61ba68:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK_PASSED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f6253c6:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="INST_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f65a061:
        d["HwpReturnCode"]="RC_NCU_PURGE_DONE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f677421:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR11_BAD_VREFCA"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f6f0f1e:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_IO_ERR"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f744972:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT17_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f79cc04:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_PG_ERR"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f7c46d7:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="NOMINAL_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f95d634:
        d["HwpReturnCode"]="RC_PUTRING_RS4_STRING_OVERRUN"
        d["FFDC"]="NIBBLE_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2f9ca243:
        d["HwpReturnCode"]="RC_MSS_CONCURRENT_CCS_EXCEEDS_INSTRUCTION_LIMIT"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2fc149ab:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLON_RD_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2fc768a5:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2fd38b77:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2fd4a2eb:
        d["HwpReturnCode"]="RC_MSS_MIN_UTILIZATION_ERROR"
        d["FFDC"]="MIN_UTIL_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2fd6def8:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="STATUS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2fe31c42:
        d["HwpReturnCode"]="RC_MSS_CONCURRENT_CCS_EXCEEDS_INSTRUCTION_LIMIT"
        d["FFDC"]="REQUESTED_INSTRUCTIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ff33985:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RINGTABLE_VERSION_MISMATCH"
        d["FFDC"]="MVPD_RING_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x2ff85637:
        d["HwpReturnCode"]="RC_CORE_SPECIAL_WAKEUP_NOT_FEASIBLE"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3017009c:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x302212b8:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="TIMEOUTUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x303aee4b:
        d["HwpReturnCode"]="RC_PGPE_INIT_PSTATE_AUTOSTART_TIMEOUT"
        d["FFDC"]="XSR_IAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x304b61bc:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x30823714:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_ACCESS_FAIL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x308b49e6:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x30af4d6b:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="BASE_ADDR1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x30c8b2b3:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="RANK1_BADDQ64_80"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x30d11590:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR0_BAD_CAS_LATENCY"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x30dd359b:
        d["HwpReturnCode"]="RC_UNEXPECTED_ATTR_FORMAT_VER"
        d["FFDC"]="HWP_MINOR_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x30ef2358:
        d["HwpReturnCode"]="RC_POZ_INVALID_CLOCK_TYPE"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x30f59410:
        d["HwpReturnCode"]="RC_MSS_DIVIDE_BY_ZERO"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x31012d92:
        d["HwpReturnCode"]="RC_UNEXPECTED_ATTR_CHIP_TYPE"
        d["FFDC"]="HWP_CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3112b70d:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3124b445:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_DLX_CONFIG_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x314a93c4:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x31513988:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="CMD_REQUEST_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x315a4b2b:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3163b416:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="BANK_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3172bddf:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR52_BAD_WR_CRC_WINDOW"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x317a5df2:
        d["HwpReturnCode"]="RC_EXP_RESPONSE_WRONG_REQID"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x318b0964:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="MAX_REGION_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3190ebda:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS_DDR5"
        d["FFDC"]="REVISION_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x319548ba:
        d["HwpReturnCode"]="RC_SPI_ECC_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x31a449c4:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="HEADER_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x31b1cc8d:
        d["HwpReturnCode"]="RC_P10_PUT_REG_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x31d3ba17:
        d["HwpReturnCode"]="RC_MSS_CONVERSION_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x31dcc177:
        d["HwpReturnCode"]="RC_PMIC_EFUSE_BLOWN"
        d["FFDC"]="EFUSE_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x31f8b6a9:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET1"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x31fd6957:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x320dbdea:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x320e91b2:
        d["HwpReturnCode"]="RC_PM_AVSBUS_MASTER_BAD_CRC_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x32207e52:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_TOO_LARGE"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x32265eaa:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_CALCULATION_ERR"
        d["FFDC"]="IOHS_FABRIC_LANE_REVERSAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x324e8cea:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x324e8f74:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VCS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x324f94de:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_PARITY_UECC_ERROR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x32550e0f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x32827c2c:
        d["Register FFDC"]="CHECK_MASTER_STOP15_FFDC_REGS_PU"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_CCSR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x32a21f39:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL_DDR5_2U"
        d["FFDC"]="RETURN_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x32a77147:
        d["HwpReturnCode"]="RC_MSS_MEMDIAGS_INVALID_PATTERN_INDEX"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x32b53859:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNSUPPORTED_MODE"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x32f4802d:
        d["HwpReturnCode"]="RC_PLL_LOCK_ERR"
        d["FFDC"]="TARGET_CHIPLET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x32fd9820:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="ACTIVE_CORES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x330b65f3:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="MEMSIZE_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3341d6f8:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x336762e8:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_NULL_POINTER"
        d["FFDC"]="CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x33752d9d:
        d["HwpReturnCode"]="RC_DPLL_LOCK_ERR"
        d["FFDC"]="PLL_EXPECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x33e1d6ad:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY"
        d["FFDC"]="TODSEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x33feb736:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_NUM_ERR"
        d["FFDC"]="IOLINK_CHILDREN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3407f420:
        d["HwpReturnCode"]="RC_PM_AVSBUS_SLAVE_BAD_CRC_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x340891c1:
        d["HwpReturnCode"]="RC_EXP_FLASH_COMMAND_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3409cc0a:
        d["HwpReturnCode"]="RC_PM_OCB2_GET_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x341996c7:
        d["HwpReturnCode"]="RC_MSS_SLOT_UTIL_EXCEEDS_PORT"
        d["FFDC"]="SLOT_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3421a553:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x342b3a0b:
        d["HwpReturnCode"]="RC_P10_HW540133_CCALCOMP_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3444fcb8:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x34569b1b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLOFF_RD_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x346485a4:
        d["HwpReturnCode"]="RC_P10_OTL_NOT_IN_RESET"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3465c188:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="CONNECTED_CHIP_IDS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3466979f:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_TIMEOUT"
        d["FFDC"]="mail"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x34a78f92:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x34a8a521:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_CORE_ECO_MODE"
        d["FFDC"]="FUSED_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x34b73914:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x34d06a7f:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x34e2f722:
        d["HwpReturnCode"]="RC_QME_START_HALTED"
        d["FFDC"]="EQ_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x34ea630e:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x34ec8198:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="VDM_LARGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x352172d1:
        d["HwpReturnCode"]="RC_CORE_SPECIAL_WAKEUP_NOT_FEASIBLE"
        d["FFDC"]="QME_FLAG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x352964b1:
        d["HwpReturnCode"]="RC_HW_IMG_PTR_ERROR"
        d["FFDC"]="HOMER_IMG_BUF_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x352fdc08:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_EXCEPTION_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x354efddc:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="TOPOSCOMS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3553a6ab:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ATTR_VECTORS_INCORRECT"
        d["FFDC"]="INPUT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x355495d8:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_XSCOM_BAR_ATTR_ERR"
        d["FFDC"]="BASE_ADDR_MMIO"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x355c0347:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_STATUS_ID"
        d["FFDC"]="STATUS_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3564b489:
        d["HwpReturnCode"]="RC_POZ_INVALID_CLOCK_TYPE"
        d["FFDC"]="CLOCK_TYPE_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x35662f00:
        d["HwpReturnCode"]="RC_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x356872ee:
        d["HwpReturnCode"]="RC_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="SCOM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x356e392b:
        d["HwpReturnCode"]="RC_EXPAND_RING_UTIL_INVALID_PARAMETERS"
        d["FFDC"]="IN_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x357642a6:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_POLL_FAILED"
        d["FFDC"]="FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x358519d2:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_DLX_CONFIG_FAIL"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x35852ba0:
        d["HwpReturnCode"]="RC_CORECACHE_REALIGN_TIMEOUT"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x358eaa08:
        d["HwpReturnCode"]="RC_MSS_TCCDL_OVERFLOW_CALC"
        d["FFDC"]="RESULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x359477de:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x35a7642c:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_EXTRA_INPUT_DATA"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x35aa0012:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_SIZE_ERROR"
        d["FFDC"]="EXP_VEC_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x35aae8c7:
        d["HwpReturnCode"]="RC_PMIC_DELAY_OUT_OF_RANGE"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x35b9b81b:
        d["HwpReturnCode"]="RC_POZ_IO_TDR_EDGE_ERROR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x36096953:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x360bed8b:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="MAX_REGION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x361f5b37:
        d["HwpReturnCode"]="RC_MSS_EXP_HALF_DIMM_MODE_NOT_SUPPORTED"
        d["FFDC"]="ENTERPRISE_SETTING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3641460f:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_UNDERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x364171e5:
        d["HwpReturnCode"]="RC_IO_PPE_TX_TDR_FAILED"
        d["FFDC"]="LANE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x36645bbf:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3665952c:
        d["HwpReturnCode"]="RC_EXTRACT_SBE_RC_SPI_CLK_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x36724f91:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_NO_IOHS_MATCH_ERR"
        d["FFDC"]="LINK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x36787bc7:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_TFCSR_ERROR_CHECK_FAILED"
        d["FFDC"]="QME_TFCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x367f18d3:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_ERROR"
        d["FFDC"]="ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x36830b8a:
        d["HwpReturnCode"]="RC_INVALID_RING_CHIPLET_SECTION"
        d["FFDC"]="TOR_MAGIC_WORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x36e0c3e7:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x36e6310a:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_WRITE_NO_DOORBELL"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x36fc4ebe:
        d["HwpReturnCode"]="RC_P10_SBE_FABRICINIT_FBC_STOPPED"
        d["FFDC"]="CONTAINED_IPL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3706a36d:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x372067e0:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_UNDERFLOW"
        d["FFDC"]="ERROR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3721ba4a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR"
        d["FFDC"]="TARGET1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37488faa:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_SIZE_ERROR"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x374c6a51:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="REQUIRED_SYNC_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x374e05ad:
        d["HwpReturnCode"]="RC_MSS_NO_DATABUS_UTILIZATION"
        d["FFDC"]="DIMM_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x375dfa71:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_GROUP_ADD_INTERNAL_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37628235:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR"
        d["FFDC"]="REMOTE_FBC_ID2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x376e39c7:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_DLL_LOCK_FAIL"
        d["FFDC"]="BOOT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3778381f:
        d["HwpReturnCode"]="RC_WOF_HEADER_DATA_MAX_POWR_INVALID"
        d["FFDC"]="ATTR_MAX_POWR_MIN_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x377fd371:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37863c62:
        d["Register FFDC"]="REG_FFDC_MC_OMI_TRAIN_ERR_INFO"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::CONFIG0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::CONFIG1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::ERROR_MASK",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::ERROR_HOLD",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::ERROR_CAPTURE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::EDPL_MAX_COUNT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::TRAINING_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::DLX_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::DLX_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::ERROR_ACTION",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omi::CYA_BITS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x37898fe6:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="BASE_ADDR2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37905c7f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3794c824:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37972127:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PSI_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3799bc2d:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_FAILED"
        d["FFDC"]="REL_CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x379cb509:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_PAYLOAD_SIZE"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37a3991d:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="CORE_FIR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37a463e6:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR5_DRV_IMP_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37a7c120:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="QME_RUNNING_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37a97cbe:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37b390f9:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLON_NT_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37b96f51:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="PERV_CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37ca0a7f:
        d["HwpReturnCode"]="RC_MULTINODE_FREQ_MISMATCH"
        d["FFDC"]="SYSTEM_UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37dd4830:
        d["HwpReturnCode"]="RC_INSUFFICIENT_DATA_IN_BUFFER"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37eb8384:
        d["HwpReturnCode"]="RC_MSS_EXP_CCS_UE_SUE"
        d["FFDC"]="FAIL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37f708cd:
        d["HwpReturnCode"]="RC_P10_L3ERR_EXTRACT_TA_WRONG_SIZE_ERR"
        d["FFDC"]="EXP_TA_DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x37fae4c8:
        d["HwpReturnCode"]="RC_NO_PMIC_DT_DDR5_TARGETS_FOUND"
        d["FFDC"]="EXPECTED_MIN_DT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x38066a64:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPXRAM_IMG_ERROR"
        d["FFDC"]="IOPXRAM_VER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x380a467b:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="MAX_RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x381daad4:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="RANK0_BADDQ0_63"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3827bd18:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT19_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x382a7140:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3837cba9:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x38385c75:
        d["HwpReturnCode"]="RC_POZ_THOLD_ERR"
        d["FFDC"]="CLOCK_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x383aad91:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_CRC_ERR"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3867911d:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3874e21d:
        d["HwpReturnCode"]="RC_XIPC_INVALID_MVPD_RINGCLASS"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x387dc267:
        d["HwpReturnCode"]="RC_VDN_PGOOD_NOT_SET"
        d["FFDC"]="AVS_RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x38937698:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="CORE_FIR_POLL_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x389960f8:
        d["HwpReturnCode"]="RC_SECURE_BOOT_FAIL"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x38a9c7ad:
        d["HwpReturnCode"]="RC_P10_INTP_QUIESCE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x38cf7fd5:
        d["HwpReturnCode"]="RC_PMIC_NOT_ENABLED"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x38f6e144:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_CI"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x390cca1e:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR"
        d["FFDC"]="L3_PRD_PURGE_REG_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x390ffb0d:
        d["HwpReturnCode"]="RC_MSS_EXP_POLL_ABORT_FW_STATUS_BUSY"
        d["FFDC"]="HOST_DL0_EDPL_MAX_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x394922d3:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="CORE_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x396a4f13:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_DLX_CONFIG_FAIL"
        d["FFDC"]="BOOT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3974b882:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_ALREADY_AT_BOUNDARY"
        d["FFDC"]="BOUNDARY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3979f695:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x397a0fa7:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR11_BAD_VREFCA"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x398eace3:
        d["HwpReturnCode"]="RC_BAD_VPD_READ"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3992e4af:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="SYS_SP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3998c7fb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x399e9864:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39a2c571:
        d["HwpReturnCode"]="RC_BAD_VPD_READ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39a60862:
        d["HwpReturnCode"]="RC_PM_OCBINIT_BAD_Q_LENGTH_PARM"
        d["FFDC"]="BADQLENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39a93d11:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_DRAM_GENERATION_MIXING_NOT_SUPPORTED"
        d["FFDC"]="THIS_DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39b60521:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT18_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39c5f266:
        d["HwpReturnCode"]="RC_P10_INVALID_LINK_CONFIG_ERR"
        d["FFDC"]="LINK_SPEED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39cce599:
        d["HwpReturnCode"]="RC_XIPC_MVPD_MK_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_MK_KWD_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39ddc578:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="HW_IMAGE_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39e36a9d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39f7d844:
        d["HwpReturnCode"]="RC_QMEC_RINGS_OUTPUT_BUFFER_TOO_SMALL"
        d["FFDC"]="INPUT_QME_RINGS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39fab116:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x39fdbcf0:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_PLANAR_DRAM_DENSITY"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3a00edda:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="PLAT_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3a1a5b64:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_CLOCKS_OFF"
        d["FFDC"]="TRCTRL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3a269449:
        d["HwpReturnCode"]="RC_XIPC_ATTR_MAX_SBE_SEEPROM_SIZE_TOO_SMALL"
        d["FFDC"]="MAX_SBE_SEEPROM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3a2bc89c:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3a2da826:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3a54e228:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="MAX_RING_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3a7fd71f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ac243ee:
        d["HwpReturnCode"]="RC_XIPC_TOR_APPEND_RING_FAILED"
        d["FFDC"]="TOR_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3acbe409:
        d["HwpReturnCode"]="RC_PM_OCB_PUT_NO_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ad56999:
        d["Register FFDC"]="ODY_PERV_CTRL_REGS_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_PERV_CTRL0_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_PERV_CTRL1_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x3ad746fa:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ae44db3:
        d["HwpReturnCode"]="RC_PMIC_DELAY_OUT_OF_RANGE"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3aebf477:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="SYS_FF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3aefe965:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERROR"
        d["FFDC"]="RCS_CLOCK_TEST_IN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3af0fd50:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3af3d01c:
        d["HwpReturnCode"]="RC_QME_HCODE_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3af5328a:
        d["HwpReturnCode"]="RC_SYSTEM_IN_CHECKSTOP_STATE"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3af73288:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNSUPPORTED_MODE"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3afc9588:
        d["HwpReturnCode"]="RC_PM_PBA_BCDE_STOP_TIMEOUT"
        d["FFDC"]="TP_TPBR_PBA_PBAO_BCDE_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3b13a884:
        d["HwpReturnCode"]="RC_MSS_CONVERSION_ERROR"
        d["FFDC"]="ORIGINAL_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3b17b730:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_CRC_ERR"
        d["FFDC"]="RECEIVED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3b233d96:
        d["HwpReturnCode"]="RC_CORECACHE_REALIGN_TIMEOUT"
        d["FFDC"]="REALIGN_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3b38a898:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_NOT_ENOUGH_PAUS"
        d["FFDC"]="PAU_GOOD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3b48739f:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_TRAINING_TIMEOUT_FAIL"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3b5be4ab:
        d["Register FFDC"]="OCB_CHANNEL0_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR0_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLBR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLCS0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHBR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHCS0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSES0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x3b5ce121:
        d["HwpReturnCode"]="RC_XIPC_RINGID_RINGPROPS_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3b5ee646:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_TOO_LARGE"
        d["FFDC"]="MAX_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3bb824ea:
        d["HwpReturnCode"]="RC_CPMR_HDR_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3bbb980f:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_HEIGHT_MIX"
        d["FFDC"]="LARGER_DIMM_HEIGHT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3bc823bc:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_MULTIPLE_RX_IDENTIFIED_ERR"
        d["FFDC"]="IOLINK_UNIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3bccc899:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3bce8d17:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c05dac7:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FAILURE_MAIL"
        d["FFDC"]="PMU_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c2ec739:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA27"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c3f252b:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="MCHP_STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c50574a:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_UNDERFLOW"
        d["FFDC"]="ATTR_ADJ_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c6a13b2:
        d["HwpReturnCode"]="RC_MSS_EXP_POLL_ABORT_FW_STATUS_BUSY"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c6c8323:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="BACKING_CACHES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c6d45ac:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c76d037:
        d["HwpReturnCode"]="RC_UNEXPECTED_ATTR_FORMAT_VER"
        d["FFDC"]="HWP_MAJOR_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3c85b247:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3cb7753d:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_ERR"
        d["FFDC"]="READ_SNS1LTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3cccd231:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3cdbdd8f:
        d["HwpReturnCode"]="RC_EXTRACT_SBE_RC_OTP_TIMEOUT"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3cdc5dfc:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_SYS_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ce91dee:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d00336a:
        d["Register FFDC"]="OCC_HB_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCHBR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCR_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJCFG_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "0x6d200",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_PLBTO_OCB_PIB_OSTOESR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x3d09e9b9:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d11aea5:
        d["HwpReturnCode"]="RC_EXP_SPI_FLASH_AUTH_FAIL"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d1c20b3:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="CHIP_IDS_IN_GROUPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d2886fa:
        d["HwpReturnCode"]="RC_PSTATE_PB_VRT_HEADER_DATA_INVALID"
        d["FFDC"]="VRT_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d2d2109:
        d["HwpReturnCode"]="RC_MSS_MEMDIAGS_INVALID_PATTERN_INDEX"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d6bc86f:
        d["HwpReturnCode"]="RC_POZ_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d713287:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d7dca4c:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_MIXED_MDS_PLUG_ERROR"
        d["FFDC"]="MCC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d90220f:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3d9ed105:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLOFF_ATTR_VALUE"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3db2f54c:
        d["HwpReturnCode"]="RC_PGPE_INIT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3de05ce4:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_NOTSTOPPING"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3df74917:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="REM_FBC_CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3dfbe433:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e117304:
        d["HwpReturnCode"]="RC_XGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e18c0ae:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e27ebf5:
        d["HwpReturnCode"]="RC_EXP_RESPONSE_WRONG_REQID"
        d["FFDC"]="CMD_REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e29a670:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="FEATURE_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e2fa4e1:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_EVN_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e39140b:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_NOT_STOP_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e3ad12e:
        d["HwpReturnCode"]="RC_POZ_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="CBS_CS_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e3e0617:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="REM_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e4151bc:
        d["Register FFDC"]="XGPE_STATE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIIR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIXSR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXILR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXISRR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x3e4c4ffc:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e53e2e1:
        d["HwpReturnCode"]="RC_OMI_CDR_BW_UNKNOWN_FREQ"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e731617:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e82a079:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_SYNDROME_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e8decfd:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="LOC_FBC_GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e8eed47:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="RESP_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e8f7c61:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ2PS_LT_PSTATE_MIN_ERROR"
        d["FFDC"]="PSTATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e948d00:
        d["HwpReturnCode"]="RC_INVALID_PMIC_GI2C_TARGET_CONFIG"
        d["FFDC"]="EXPECTED_MIN_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3e99fe3d:
        d["Register FFDC"]="QME_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_FLAGS_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_LFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIXCR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIDBGINF",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR6",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR8",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDRX",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x3ea257a0:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_OFFSET_UNSUPPORTED"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ebb93f0:
        d["HwpReturnCode"]="RC_MSS_CALC_PORT_POWER_EXCEEDS_MAX"
        d["FFDC"]="MAX_POWER_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ec36e97:
        d["HwpReturnCode"]="RC_MSS_CHANNEL_MIRROR_SETTINGS_MISMATCH_RANK0"
        d["FFDC"]="VALUE_CHA_CS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ed7501f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3eeba8f1:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ef27b37:
        d["HwpReturnCode"]="RC_QME_START_HALTED"
        d["FFDC"]="OCC_FLAG_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ef9daa2:
        d["HwpReturnCode"]="RC_XGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3efcf84d:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="OMI_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f03d82a:
        d["HwpReturnCode"]="RC_INVALID_PMIC_INDEX_RECEIVED"
        d["FFDC"]="NUM_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f0b7d33:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RECORD_KEYWORD_PAIR"
        d["FFDC"]="MVPD_KEYWORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f18b5c7:
        d["HwpReturnCode"]="RC_XIPC_XIP_API_MISC_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f1cb5d9:
        d["HwpReturnCode"]="RC_SELF_RESTORE_INIT_FAILED"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f3cc6c4:
        d["HwpReturnCode"]="RC_POZ_VDN_POWER_NOT_ON"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f51a853:
        d["HwpReturnCode"]="RC_P10_SBE_FABRICINIT_FBC_STOPPED"
        d["FFDC"]="CONTAINED_LOAD_PATH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f58ae03:
        d["HwpReturnCode"]="RC_INVALID_SCAN_TARGET_TYPE"
        d["FFDC"]="RS4_TARGET_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f5e0d7f:
        d["HwpReturnCode"]="RC_OCMB_IS_NOT_EXPLORER"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f659250:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="EXT_CMD_DONE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f720f95:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f844cf3:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_READ_MISCOMPARE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f84d7bc:
        d["HwpReturnCode"]="RC_XIPC_RS4_OVERLAY_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f9aa00d:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f9b8de5:
        d["HwpReturnCode"]="RC_P10_SBE_PURGE_HB_ECO_MODE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3f9c01e4:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="XIP_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3fa6bb45:
        d["HwpReturnCode"]="RC_MSS_CHANNEL_MIRROR_SETTINGS_MISMATCH_RANK1"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3fa70966:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_ECO_ERR"
        d["FFDC"]="UNIT_CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3faa2434:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3fb7a7e6:
        d["HwpReturnCode"]="RC_POZ_HEARTBEAT_NOT_SET_ERR"
        d["FFDC"]="POLL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3fde0dc5:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="OCCFLG3_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3fdff427:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_MISALIGNED_ADDR"
        d["FFDC"]="MAXADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x3ff51801:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4007dd60:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_INVALID_ARGS_ERR"
        d["FFDC"]="PURGETYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4008b10b:
        d["HwpReturnCode"]="RC_MSS_EMPTY_VECTOR"
        d["FFDC"]="RECEIVED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x404136c1:
        d["HwpReturnCode"]="RC_QME_HCODE_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4041b940:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="APPEND_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x404a51c9:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40582d70:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_TRAINING_TIMEOUT_FAIL"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4065d199:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="FFDC_ADDRS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x406c79bd:
        d["HwpReturnCode"]="RC_ODY_PPR_RESOURCE_UNAVAILABLE"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4075c4cf:
        d["HwpReturnCode"]="RC_XIPC_RS4_OVERLAY_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x408acfb4:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_WRONG_BOOT_STAGE"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x408ccff3:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="TOR_VER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40934daf:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_XSCOM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40999f2e:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_INACTIVE_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x409a3204:
        d["HwpReturnCode"]="RC_BCEBAR1_TOPOLOGY_INIT_ERROR"
        d["FFDC"]="TOPO_SCOM_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40ba829d:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="XIP_SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40c79ce6:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40d2f485:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_DS_A"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40e2c3ba:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="EFD_MEMORY_SPACE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40f112f5:
        d["HwpReturnCode"]="RC_BCE_BUF_SMALLER_FOR_NON_HCODE_SECTION"
        d["FFDC"]="INST_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40fb89bf:
        d["HwpReturnCode"]="RC_SECURE_BOOT_FAIL"
        d["FFDC"]="SCRATCH_REGISTER_13"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x40fb9f2d:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41035b85:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET0"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4103f931:
        d["HwpReturnCode"]="RC_L3_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CPMS_CGCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x410c3686:
        d["HwpReturnCode"]="RC_PMSR_SHIFT_INACTIVE_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41106c9d:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_STATUS_ID"
        d["FFDC"]="STATUS_WORD32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41110850:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="PHY_INIT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41156bff:
        d["Register FFDC"]="PGPE_STATE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIIR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIXSR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXILR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXISRR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x411bb9bb:
        d["HwpReturnCode"]="RC_SELF_SAVE_INIT_FAILED"
        d["FFDC"]="HOMER_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x412e4c50:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x415be3f8:
        d["HwpReturnCode"]="RC_P10_INVALID_LINK_CONFIG_ERR"
        d["FFDC"]="LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41869738:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MCC0_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x418f3689:
        d["HwpReturnCode"]="RC_P10_L3ERR_RD_CMD_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_7_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41a7c0f5:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_POST_CONDITION_ERR"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41b026b9:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41b68c75:
        d["HwpReturnCode"]="RC_PM_DPLL_FREQ_UPDATE_FAIL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41b76309:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="RING_SECTION_BUF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41c48c8e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41ca9ea3:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41dd9208:
        d["HwpReturnCode"]="RC_PUTRING_RS4_STRING_OVERRUN"
        d["FFDC"]="NIBBLE_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x41e58067:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_NFIR_NOT_CLEARED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x420ba9d5:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DLR_INVALID_MODE"
        d["FFDC"]="DLR_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42419d7b:
        d["HwpReturnCode"]="RC_PM_SET_HOMER_BAR_SIZE_INVALID"
        d["FFDC"]="MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4261da31:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNSUPPORTED_MODE"
        d["FFDC"]="PHY_INIT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x426800a4:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_CLEANUP_FAILED"
        d["FFDC"]="POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4268a6c2:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="EFD_BLOCK_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x426f4175:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR4_BAD_TRFC_MODE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42926fc6:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TOR_VERSION_DEFINED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42b12af8:
        d["HwpReturnCode"]="RC_PMIC_ORDER_OUT_OF_RANGE"
        d["FFDC"]="ORDER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42b27cfb:
        d["HwpReturnCode"]="RC_PSTATE_PB_PG_ACCESS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42b9f23a:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="FREQ_DOMAIN_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42bfd435:
        d["HwpReturnCode"]="RC_P10_RAM_INVALID_REG_TYPE_ACCESS_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42cb8b29:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42d011f0:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42d1c8ad:
        d["HwpReturnCode"]="RC_ODY_SPPE_ATTR_SETUP_INVALID_TARGET"
        d["FFDC"]="UNIT_POS_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42d5167a:
        d["HwpReturnCode"]="RC_MSS_EMPTY_VECTOR"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42e12310:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x42f1ae09:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x430fed9d:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="MASTER_CHIP1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x432703b5:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_PARITY_UECC_ERROR"
        d["FFDC"]="BOOT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4338a147:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4339b7f7:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_DOWNLOAD_INVALID_STATE"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x436650c4:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_FUSED_CORE_SEARCH_ERROR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4387a8fe:
        d["HwpReturnCode"]="RC_CORE_MULTICAST_SCAN_INVALID_ARGS"
        d["FFDC"]="REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x43933504:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_TARGET_STATE_ERR"
        d["FFDC"]="ASSOCIATED_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4393d680:
        d["HwpReturnCode"]="RC_LINK_TRAINING_DONE_POLL_FAILED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x43c9ad87:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x43d2cfa4:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_NFIR_NOT_CLEARED"
        d["FFDC"]="PFIR_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x43e9b57d:
        d["HwpReturnCode"]="RC_MSS_EXP_CATASTROPHIC_DRAMINIT_TRAINING_FAIL"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44179eba:
        d["HwpReturnCode"]="RC_P10_HW540133_SB_WA_ERR"
        d["FFDC"]="LOCK_ERR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x445bbacd:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x445ee5b6:
        d["HwpReturnCode"]="RC_L2_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44716941:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VCS_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4482547b:
        d["HwpReturnCode"]="RC_P10_OPCODE_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4482d371:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_ERROR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x448bfbe7:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x448e9a32:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_DW_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x449dd1d7:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR_BAD_STRAP_VALUE"
        d["FFDC"]="STRAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44a16cd6:
        d["HwpReturnCode"]="RC_DPLL_LOCK_ERR"
        d["FFDC"]="PLL_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44d03b84:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_ACTION_INVALID_ARGS_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44d403bd:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44d4dba6:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="EFD_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44dc4cd7:
        d["HwpReturnCode"]="RC_MSS_ZERO_FREQ_OR_SIZE"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44dcd76f:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44e1362a:
        d["HwpReturnCode"]="RC_P10_TOD_MF_CLK_FAILURE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x44ff10b5:
        d["HwpReturnCode"]="RC_L2_PURGE_DONE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4519138c:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="SIDE_A_NOT_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x451c2d29:
        d["HwpReturnCode"]="RC_MSS_RESTORE_REPAIRS_BYTE_OUT_OF_RANGE"
        d["FFDC"]="BYTE_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x451e4bb7:
        d["HwpReturnCode"]="RC_PSTATE_PB_ATTRIBUTE_ACCESS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x45409459:
        d["HwpReturnCode"]="RC_IO_EXT_CMD_POLL_FAILED"
        d["FFDC"]="POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x45546b47:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x455b23c0:
        d["HwpReturnCode"]="RC_INVALID_2U_PMIC_TARGET_CONFIG"
        d["FFDC"]="NUM_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4566c5dc:
        d["HwpReturnCode"]="RC_INVALID_RING_SECTION"
        d["FFDC"]="RING_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x45748fac:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_UNDERFLOW"
        d["FFDC"]="SYSTEM_PSTATE0_FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x45771185:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4579d49c:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_RESET_TIMEOUT"
        d["FFDC"]="SLAVENUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x458dc616:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="RESULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x459120bd:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_HW_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4592648d:
        d["HwpReturnCode"]="RC_MSS_RESTORE_REPAIRS_NIBBLE_OUT_OF_RANGE"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x459ba4e8:
        d["HwpReturnCode"]="RC_MSS_LOOKUP_FAILED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x45a16a86:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_TARGET_ADDRESS"
        d["FFDC"]="BOOTLOADER_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x45a275e0:
        d["HwpReturnCode"]="RC_P10_IOP_TOP_PHY_ERROR"
        d["FFDC"]="IOP_TOP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x45ef695b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA6"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x460174fc:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_ARY_FAILED"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x460b33f5:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4618b567:
        d["HwpReturnCode"]="RC_MSS_MAX_FREQ_ATTR_SIZE_CHANGED"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4619757d:
        d["HwpReturnCode"]="RC_MSS_BAD_MR_PARAMETER"
        d["FFDC"]="PARAMETER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x462071d6:
        d["HwpReturnCode"]="RC_MSS_FAILED_SYNC_MODE"
        d["FFDC"]="MEM_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4636f17d:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x463e164a:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x463e2081:
        d["HwpReturnCode"]="RC_CORE_MULTICAST_SCAN_INVALID_ARGS"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4648bfc8:
        d["HwpReturnCode"]="RC_MSS_ALL_TARGETS_HAVE_0_FREQ"
        d["FFDC"]="VECTOR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46576f48:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLON_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x465da2f0:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="CLOCK_CMD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x465f7c16:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="CLOCK_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x467b9a0a:
        d["HwpReturnCode"]="RC_PM_PBA_BCUE_STOP_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x469bbc67:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_MVPD_READ_ERR"
        d["FFDC"]="KEYWORD_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46a13921:
        d["HwpReturnCode"]="RC_P10_SBE_PLL_INITF_UNSUPPORTED_PLL_BUCKET"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46a5552f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT26_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46aca787:
        d["HwpReturnCode"]="RC_P10_TOD_POLLING_DELAY_CALC_OVERFLOW"
        d["FFDC"]="NUMERIC_LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46b7d144:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_FAILED"
        d["FFDC"]="SCRB_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46c90e5d:
        d["HwpReturnCode"]="RC_MSS_EXP_POLL_ABORT_FW_STATUS_BUSY"
        d["FFDC"]="HOST_DL0_ERROR_HOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46ca8463:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_BUS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46e1c782:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR51_BAD_WR_CRC_THRESHOLD"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46f15dd8:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_LOCK_ERR"
        d["FFDC"]="LOCK_PICK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x46f2f957:
        d["HwpReturnCode"]="RC_MSS_INVALID_SYMBOL_FOR_GALOIS"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47004755:
        d["Register FFDC"]="REG_FFDC_P10_FBC_TDM_UTILS_DL_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_FIR_REG_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_PHY_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_SEC_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LAT_MEASURE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_OPTICAL_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_TX_LANE_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_TX_LANE_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_RX_LANE_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_RX_LANE_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_ERROR_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_ERROR_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_DLL_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_QUALITY",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_QUALITY",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x47061e01:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="CHIP_FF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4719ee16:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR10_BAD_VREFDQ"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4721f700:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_CCM_NOT_SUPPORTED_ERR"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47231d91:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_EXCEPTION_ERR"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47247d38:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_IOLINK_TARGET_MATCH_ERR"
        d["FFDC"]="CHILD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47493f6c:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="CMP_HASH_7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x474ca748:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x474dfec0:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_FUSED_CORE_MISMATCH_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x475326a2:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT0_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4753ead2:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_OVERFLOW"
        d["FFDC"]="CF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47594932:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="CURRENT_RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x476014c5:
        d["HwpReturnCode"]="RC_QMEC_RINGS_OUTPUT_BUFFER_TOO_SMALL"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47621840:
        d["HwpReturnCode"]="RC_PM_AVSBUS_EXCESSIVE_VOLTAGE_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47af1429:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_OVERFLOW"
        d["FFDC"]="LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47c296f9:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47ca186d:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_PLANAR_DRAM_DIMM_TYPE"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47cf512a:
        d["HwpReturnCode"]="RC_INVALID_GI2C_DDR5_TARGET_CONFIG"
        d["FFDC"]="NUM_GI2CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47da552a:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47dbfd64:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET1"
        d["FFDC"]="TARGET_TEMP_SENSOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x47fd69ff:
        d["HwpReturnCode"]="RC_MSS_EFF_CONFIG_MIRROR_DISABLED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48020c10:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4804118c:
        d["HwpReturnCode"]="RC_I2C_STATUS_ERROR"
        d["FFDC"]="ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x480e88de:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x482cca9e:
        d["HwpReturnCode"]="RC_P10_L3ERR_EXTRACT_UNKNOWN_SYNDROME_ECC"
        d["FFDC"]="SYNDROME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4839ebb6:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="MEM_BASE_ADDRS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x484a0742:
        d["HwpReturnCode"]="RC_ILLEGAL_EXPECTED_STOP_LEVEL"
        d["FFDC"]="EXPECTED_STOP_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x485ad3c9:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_CONFIGURATION"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48644839:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_INVALID_MCD_GROUP_SIZE_ERR"
        d["FFDC"]="RANGE_BASE_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x486a339d:
        d["HwpReturnCode"]="RC_SPI_SPRM_CFG_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x486d0af9:
        d["HwpReturnCode"]="RC_ECL2_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CPMS_CGCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x487c01e8:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLOFF_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x487f43ee:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL"
        d["FFDC"]="RETURN_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x489acfe9:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_US_B"
        d["FFDC"]="US_TEMPLATES_0159"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48a04750:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_ECO_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48af5af1:
        d["HwpReturnCode"]="RC_IO_PPE_RESET"
        d["FFDC"]="IAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48b09005:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48b9aa0c:
        d["HwpReturnCode"]="RC_SYSTEM_IN_CHECKSTOP_STATE"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48bf457f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA10"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48c42b4f:
        d["HwpReturnCode"]="RC_QME_INVALID_EX_CORE_CONFIG"
        d["FFDC"]="EX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48d53008:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48e3f725:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48ea46e0:
        d["Register FFDC"]="ODY_SCRATCH_REGS_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_1_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_2_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_3_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_4_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_5_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_6_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_7_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_8_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_9_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_10_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_11_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_12_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_14_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_15_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_16_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x48f64e80:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x48fbe094:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49052998:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="TOR_VER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4917458c:
        d["HwpReturnCode"]="RC_SET_ATOMIC_LOCK_BUSY"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49178157:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x491f30df:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_NODE_DELAY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49356a0a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="ULTRA_TDP_IDC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4943b2ac:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="HOST_DL0_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49615625:
        d["HwpReturnCode"]="RC_P10_PUTRING_OPCG_DONE_TIMEOUT"
        d["FFDC"]="SCOM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4967d8d9:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_DOWNSTREAM_CRC"
        d["FFDC"]="OMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x498362a5:
        d["HwpReturnCode"]="RC_PMIC_NOT_ENABLED"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49a31dbb:
        d["HwpReturnCode"]="RC_ODY_SCRATCH_REGS_INVALID_ACCESS_ERR"
        d["FFDC"]="USE_SCOM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49b464fa:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="CMP_HASH_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49c57fbc:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_PASSED_IN"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49cb4f23:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="STATUS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49e70815:
        d["HwpReturnCode"]="RC_CPLT_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x49fd8eab:
        d["HwpReturnCode"]="RC_TOR_TRAVERSAL_ERROR"
        d["FFDC"]="ACTUAL_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a0a4a0b:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="ECO_CACHES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a16852c:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a19fea0:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_ENDP_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a2354e3:
        d["HwpReturnCode"]="RC_MSS_TOO_MANY_PRIMARY_RANKS_ON_PORT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a3b7d01:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_TARGET_STATE_ERR"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a4c3d81:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP3_BUF_SIZE"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a587fc5:
        d["HwpReturnCode"]="RC_MSS_MEMDIAGS_NO_MCBIST_SUBTESTS"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a61a636:
        d["HwpReturnCode"]="RC_PSTATE_PB_CORE_FLOOR_FREQ_GT_CF6_FREQ"
        d["FFDC"]="CORE_FLOOR_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a7645bf:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a7b5572:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLOFF_RD_ATTR_VALUE"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a8c306c:
        d["Register FFDC"]="CHECK_MASTER_STOP15_FFDC_REGS_EQ"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_FLAGS_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCRA_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCRB_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_LFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIXCR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIDBGINF",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR6",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR8",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDRX",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCOM_XIVDR30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::eq::QME_SCDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x4a91aa62:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR15_ECS_ERROR_THRESHOLD"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4a98d32a:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ac122c7:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ac8fd6e:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_WRONG_BOOT_STAGE"
        d["FFDC"]="EXPECTED_BOOT_STAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ad7b1eb:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_CALCULATION_ERR"
        d["FFDC"]="RX_NOT_TX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ae1b057:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_DOWNSTREAM_CRC"
        d["FFDC"]="THRESHHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4af3531c:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR4_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_OPERABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4af3560e:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4af54185:
        d["HwpReturnCode"]="RC_XIPC_EMPTY_IMAGE_SECTION"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4af6ef92:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="EFD_MEMORY_SPACE_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b01a54d:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNSUPPORTED_MODE"
        d["FFDC"]="PROCEDURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b13bf20:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b1678c7:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_SIZE_ERROR"
        d["FFDC"]="PROCEDURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b286ae9:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b295cca:
        d["HwpReturnCode"]="RC_ODY_INVALID_ATTR_MEM_SI_MC_DRV_IMP_CMD_ADDR"
        d["FFDC"]="FAILING_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b2f2c5e:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DRAM_WIDTH"
        d["FFDC"]="DATA_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b33607c:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b37d626:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="SRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b3f9753:
        d["HwpReturnCode"]="RC_XIPC_INVALID_MVPD_RINGCLASS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b449188:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b68f7a4:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b6a4cef:
        d["HwpReturnCode"]="RC_OPIT_INTERRUPT_NOT_CLEAR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b6bc451:
        d["HwpReturnCode"]="RC_CPMR_HDR_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b6ef854:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="N_MODE_PMIC3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b864f9b:
        d["HwpReturnCode"]="RC_MSS_SLOT_UTIL_EXCEEDS_PORT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4b8dc60a:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP1_BUF"
        d["FFDC"]="TEMP1_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4baa450e:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="PROC_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4bbbbaf9:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR8_RD_PREAMBLE_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4beb5513:
        d["Register FFDC"]="CBS_STATUS_REGISTERS_SCOM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_CS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_TR_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_EL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_ENVSTAT_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_TR_HIST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_EL_HIST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SB_CS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SB_MSG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_CBS_STAT_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x4becf14b:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_CMD_FAIL"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4bedc941:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_INVALID_ARGS_ERR"
        d["FFDC"]="PURGEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4bef5036:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_SAVE_ERROR"
        d["FFDC"]="SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c0c335c:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_INVALID_NUM_RANKS"
        d["FFDC"]="DFI"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c0d8799:
        d["HwpReturnCode"]="RC_MSS_EXP_CATASTROPHIC_DRAMINIT_TRAINING_FAIL"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c10e8ea:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_256MB_OFFSET_ERROR"
        d["FFDC"]="SMF_BASE_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c1624be:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c1d96de:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c2fb624:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="TURBO_TDP_IAC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c36525c:
        d["HwpReturnCode"]="RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c373338:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VDD_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c40311a:
        d["Register FFDC"]="ODY_PERV_CTRL_REGS_SCOM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_PERV_CTRL0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_PERV_CTRL1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x4c43d154:
        d["HwpReturnCode"]="RC_CPLT_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c45657f:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_EXTRA_INPUT_DATA"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c60dfc4:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_NOTSTOPPING"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c622f4f:
        d["Register FFDC"]="REG_FFDC_PROC_L2_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::L2_L2MISC_L2CERRS_FIR_MASK_REG_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::L2_L2MISC_L2CERRS_PRD_PURGE_CMD_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::L2_L2MISC_L2CERRS_PHYP_PURGE_CMD_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x4c674b1e:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_LATENCY"
        d["FFDC"]="LATENCY_MEASURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c72f7d9:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_POLL_FAILED"
        d["FFDC"]="POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c7a514a:
        d["HwpReturnCode"]="RC_POZ_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="SELECT_SRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c7c2a8c:
        d["HwpReturnCode"]="RC_INVALID_PMIC_TARGET_CONFIG"
        d["FFDC"]="NUM_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c7d320b:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="CMP_HASH_6"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c7e0ada:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY_RX"
        d["FFDC"]="RX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4c959289:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EX_CONFIG"
        d["FFDC"]="EX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4cae8efa:
        d["HwpReturnCode"]="RC_P10_CHTM_CTRL_BAD_STATE"
        d["FFDC"]="HTM_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ce6c9c7:
        d["HwpReturnCode"]="RC_OMI_CDR_BW_UNKNOWN_FREQ"
        d["FFDC"]="OMI_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ceb5f93:
        d["HwpReturnCode"]="RC_MULTINODE_FREQ_MISMATCH"
        d["FFDC"]="LOCAL_UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d2629e9:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT_MC"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d35b1b0:
        d["HwpReturnCode"]="RC_PGPE_INIT_DEBUG_HALT"
        d["FFDC"]="PGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d35b542:
        d["HwpReturnCode"]="RC_ODY_DMEM_RESET_TIMEOUT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d390abe:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d3cfc3b:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d45efcc:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d58b5d3:
        d["HwpReturnCode"]="RC_SPI_RSC_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d5d91c1:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ADDR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d685de9:
        d["Register FFDC"]="PGPE_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIIR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIXSR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXILR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXISRR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPETSEL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEMACR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXISGBU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXISGBL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIICACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIICACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDCACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDCACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x4d6d4384:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d701f6b:
        d["HwpReturnCode"]="RC_INVALID_POUNDW_VERSION"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4d99b98c:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="XRAM_FW_DATA_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4db95061:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="ULTRA_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4dc43036:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4dc6a078:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4dd09240:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4dd708c8:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="ROUNDED_OFF_DIMM_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4dea931e:
        d["HwpReturnCode"]="RC_MSS_OVERFLOW_WHEN_ROUNDING_TO_EVEN"
        d["FFDC"]="TIMING_PS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4def135b:
        d["HwpReturnCode"]="RC_MSS_INVALID_DDR5_DRAM_WR_PREAMBLE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4df039ca:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="POINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4df4af34:
        d["HwpReturnCode"]="RC_HOMER_IMG_PTR_ERROR"
        d["FFDC"]="HOMER_IMG_BUF_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4dfa8819:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET1"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e1e93e2:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e3d4071:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_RX_LANE_BUSY_TIMEOUT_ERROR"
        d["FFDC"]="IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e49512f:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e57c52a:
        d["HwpReturnCode"]="RC_ODY_SPPE_ATTR_SETUP_GRID_FREQ_MISMATCH"
        d["FFDC"]="FREQ_GRID_ACT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e659696:
        d["HwpReturnCode"]="RC_MSS_INVALID_FINE_REFRESH"
        d["FFDC"]="REFRESH_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e69e2ef:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="ACTIVE_CORES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e6aae43:
        d["HwpReturnCode"]="RC_POZ_INVALID_GROUP_ID"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e6d0773:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_COMPARE_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e728010:
        d["HwpReturnCode"]="RC_POZ_I2C_FIFO_TIMEOUT_ERROR"
        d["FFDC"]="TIMEOUTCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e7a198c:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_ENDP_ERR"
        d["FFDC"]="IOLINK_LINK_SPLIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e8ab67f:
        d["HwpReturnCode"]="RC_POZ_IO_TX_TDR_MULTI_GROUP_ERROR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4e97486b:
        d["HwpReturnCode"]="RC_MSS_ZERO_FREQ_OR_SIZE"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ea8cfcb:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_DRAM_GENERATION_MIXING_NOT_SUPPORTED"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ee4aa5a:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="BANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4ef8b511:
        d["HwpReturnCode"]="RC_QME_BAD_MODE"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4efe7fa6:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNKNOWN_ERROR"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f0f8d50:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f14b38c:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f18d979:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f277d18:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="CU_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f2dd38a:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="PROC_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f31f04c:
        d["HwpReturnCode"]="RC_MSS_MCBIST_PROGRAM_TOO_BIG"
        d["FFDC"]="PROGRAM_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f3f3ef6:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f51dc9e:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f69eb6e:
        d["HwpReturnCode"]="RC_P10_PUTRING_OPCG_DONE_TIMEOUT"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f79b79e:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_BUSY_AFTER_RESET"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f7af463:
        d["HwpReturnCode"]="RC_P10_L3ERR_RD_CMD_NOT_FOUND"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4f7d63ab:
        d["HwpReturnCode"]="RC_MSS_FFE_CURSOR_OVERFLOW"
        d["FFDC"]="POST_CURSOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4fa49783:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="MAX_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4fb16240:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_DS_A"
        d["FFDC"]="A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4fba3f3f:
        d["HwpReturnCode"]="RC_P10_PURGE_COMPLETE_TIMEOUT"
        d["FFDC"]="CMD_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4fc33205:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4fe4af26:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_WHEN_ROUNDING"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x4fe53eda:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="STATUSREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x500dfd0a:
        d["HwpReturnCode"]="RC_EXP_INBAND_BE_DATA_RANGE"
        d["FFDC"]="MAX_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50221874:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50294af8:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_ACCESS_SIZE_ERROR"
        d["FFDC"]="PARTIAL_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x502a8e8b:
        d["HwpReturnCode"]="RC_ODY_SCRATCH_REGS_UTILS_BUCKET_LOOKUP_ERR"
        d["FFDC"]="HOST_FREQ_GRID_MHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x503809d7:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50442059:
        d["HwpReturnCode"]="RC_EXTRACT_SBE_RC_SPI_RSC_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5061a296:
        d["HwpReturnCode"]="RC_INVALID_TOR_VERSION"
        d["FFDC"]="TOR_MAGIC_WORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5063cde2:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_INACTIVE_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x507a4480:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50972889:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP3_BUF_SIZE"
        d["FFDC"]="TEMP3_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50a37712:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50add3ab:
        d["HwpReturnCode"]="RC_EXP_SPI_FLASH_AUTH_FAIL_MFG"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50bc365c:
        d["HwpReturnCode"]="RC_P10_INVALID_OCC_ACCESS_MODE_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50d2df31:
        d["HwpReturnCode"]="RC_P10_OPCODE_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50eff951:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x50f6678d:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="FAILING_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x511bca18:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="ATTR_BACKING_CACHES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x512ac9a5:
        d["Register FFDC"]="SBE_EXTERNAL_SCOMMABLE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_PPE_XIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_PPE_XIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_PIB_SBE_SBEPM_SBEPPE_PPE_XIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x513059f2:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51383279:
        d["HwpReturnCode"]="RC_EXP_MNFG_SPI_FLASH_TIMEOUT_READING_IMAGE"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x513b03a1:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR0_BAD_BURST_LENGTH"
        d["FFDC"]="BURST_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5142c28b:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x514468d7:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_DOWNLOAD_INVALID_STATE"
        d["FFDC"]="BOOT_STAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x514636e2:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51497952:
        d["Register FFDC"]="OCB_CHANNEL1_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR1_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLBR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLCS1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHBR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHCS1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSES1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x515995be:
        d["HwpReturnCode"]="RC_SHADOW_DIS_CORE_SHADOW_STATE_TIMEOUT"
        d["FFDC"]="CPMS_CUCR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x515cd665:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="CURR_REGION_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5182ef1f:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="OMI_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51885bfe:
        d["HwpReturnCode"]="RC_MSS_NO_SAFEMODE_UTILIZATION"
        d["FFDC"]="PORT_DATABUS_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51900660:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x519442b7:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="RANK3_BADDQ64_80"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51aeb4fc:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="CURR_GROUP_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51b367e6:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR35_RTT_ATTR_VALUE"
        d["FFDC"]="IS_RTT_NOM_RD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51b4519c:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_FW_ADAPTER_PROPERTIES_RSP_DATA_LENGTH"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51c04f5b:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET1"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51d17f11:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_SYNDROME_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51d538fd:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="TFMR_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51e1c2b8:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_BUSY"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x51e68629:
        d["Register FFDC"]="SBE_IPL_SCRATCH_REGISTERS_SCOM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_4_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_5_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_6_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_7_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_8_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x52042720:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x521aceec:
        d["HwpReturnCode"]="RC_OCC_START_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x527db1ef:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="FLAG_CHECK_LCO_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x528240e6:
        d["HwpReturnCode"]="RC_PM_OCBINIT_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x52971980:
        d["HwpReturnCode"]="RC_MSS_EXP_SUM_MASK_REG_SCOM_FAIL"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5299b95a:
        d["HwpReturnCode"]="RC_POZ_THOLD_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x52af8ea9:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="SPI_ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x52c15d78:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_INVALID_SMP9_CONFIG_ERR"
        d["FFDC"]="BAD_LANE_VEC_VALID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x52d00a27:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS"
        d["FFDC"]="REVISION_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x52ea88e7:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_SETUP_ERROR"
        d["FFDC"]="ACTUAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x52f59f77:
        d["HwpReturnCode"]="RC_MSS_DIVIDE_BY_ZERO"
        d["FFDC"]="DIVISOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x530f1ef9:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_FUSED_CORE_SEARCH_ERROR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5316cff1:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_ENDP_ERR"
        d["FFDC"]="IOLINK_A_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x531b36da:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP3_BUF"
        d["FFDC"]="TEMP3_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53293fe7:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_FUSED_CORE_MISMATCH_ERR"
        d["FFDC"]="FUSED_CORE_ACT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53411284:
        d["HwpReturnCode"]="RC_PGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="BAD_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x535049b3:
        d["HwpReturnCode"]="RC_PMIC_ORDER_OUT_OF_RANGE"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53523d9f:
        d["HwpReturnCode"]="RC_P10_HW540133_FLB_WA_ERR"
        d["FFDC"]="LAST_ATTEMPT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5364fd36:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_OVERFLOW"
        d["FFDC"]="ERROR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53667fe2:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_ADDRESS_NOT_ALIGNED"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53688a0d:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="SUPPORTED_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5370c732:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MAX_SIZE_ERR"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53772825:
        d["HwpReturnCode"]="RC_ODY_PPR_RESOURCE_UNAVAILABLE"
        d["FFDC"]="BANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5393d032:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET2"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x539e314f:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPXRAM_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53b65116:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET8"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53be99da:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="TIMEOUT_MSEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53caf614:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_MCBIST_FAILED_TO_STOP"
        d["FFDC"]="POLL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53d12572:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_SAVE_ERROR"
        d["FFDC"]="PROC_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53e94a66:
        d["HwpReturnCode"]="RC_XIPC_EMPTY_IMAGE_SECTION"
        d["FFDC"]="DDLEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53ec7560:
        d["HwpReturnCode"]="RC_P10_SPR_NAME_MAP_ACCESS_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x53f95179:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLON_RD_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54001229:
        d["HwpReturnCode"]="RC_MSS_INVALID_PRIMARY_RANK_COUNT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5417c270:
        d["HwpReturnCode"]="RC_POZ_THOLD_ERR"
        d["FFDC"]="REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x541d3eba:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5446e69a:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_PLANAR_DRAM_WIDTH"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x544def2f:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_DRAM_GEN"
        d["FFDC"]="DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x544f070b:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_START_DATA_PTR_NULL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5470231e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="RANK1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5476021e:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="RING_BUF2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54913205:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET8"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x549fd384:
        d["HwpReturnCode"]="RC_P10_RAM_TEST_ECMD_ERROR"
        d["FFDC"]="ECMD_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54a3b6ba:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="OPTICAL_CONFIG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54a3dd5b:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_POST_CONDITION_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54a592d8:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="OVLY_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54c02fd2:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_PG_ERR"
        d["FFDC"]="CORE_FUNCTIONAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54ca78b6:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54cf554a:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LOOPBACK_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54d47792:
        d["HwpReturnCode"]="RC_PM_AVSBUS_SLAVE_BAD_CRC_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54e34acc:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="SUPPORTED_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54e8e349:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="CAS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x54f5cb2d:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_SYNDROME_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x550027b4:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NO_MASTER_DESIGNATION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55274758:
        d["HwpReturnCode"]="RC_MSS_FREQ_INDEX_TOO_LARGE"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5529ede2:
        d["HwpReturnCode"]="RC_MSS_SLOT_UTIL_EXCEEDS_PORT"
        d["FFDC"]="PORT_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x552f1feb:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_ATTR_VALUE"
        d["FFDC"]="IS_CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55339f0d:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_CFAM_PATH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x553f74c4:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="MAX_REPAIRS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x554f09f2:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="CURRENT_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x555fea31:
        d["HwpReturnCode"]="RC_UNSUPPORTED_SCAN_TARGET_TYPE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x557462fe:
        d["HwpReturnCode"]="RC_P10_HW540133_FLB_WA_ERR"
        d["FFDC"]="INTERMEDIATE_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x557b6341:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="ACTUAL_EC_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x559390e2:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="FLAG_CHECK_ECC_OVERRIDE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5594cfbf:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL_DDR5_4U"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x559b1d1e:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_RESET_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x559cc622:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_MISALIGNED_ADDR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55c211d4:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="VDM_EXTREME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55c42d08:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_TARGET_ADDRESS"
        d["FFDC"]="HRMOR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55de1d64:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="PPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55f64f3f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55f87383:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_FUSED_CORE_PARTNER_NOT_FOUND"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55f9f902:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_TRAINING_TIMEOUT_FAIL"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55fa0657:
        d["HwpReturnCode"]="RC_CHTM_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CHTM_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x55ff703b:
        d["HwpReturnCode"]="RC_SCAN_CHIPLET_NOT_FUNCTIONAL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56088fb1:
        d["HwpReturnCode"]="RC_MSS_NO_SAFEMODE_UTILIZATION"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5608bb64:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_MFG_ID"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x561a5505:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_MEM_ADDR_RANGE_OUT_OF_BOUNDS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x562fffb2:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56319187:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x566d0752:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56795f56:
        d["HwpReturnCode"]="RC_HOMER_IMG_PTR_ERROR"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5679daf0:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_OVERFLOW"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x567cfa5d:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_NOT_STOP_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x568d9f36:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="KEYWORD_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56900573:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="DD_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56957288:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56970e86:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_PARITY_UECC_ERROR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56a6689a:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR34_RTT_ATTR_VALUE"
        d["FFDC"]="IS_RTT_WR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56ab77cd:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="EXP_BUSY_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56ae9533:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="OP_POINT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56b00a10:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56b849d0:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLON_ATTR_VALUE"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56ba6e46:
        d["HwpReturnCode"]="RC_MSS_MAINT_BAD_SPARE_INDEX"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56e3b5f1:
        d["HwpReturnCode"]="RC_P10_PCI_REFCLOCK_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56ee7d50:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_FW_VER_ERROR"
        d["FFDC"]="INST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56f846a4:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LOOPBACK_FAIL"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x56ffda99:
        d["HwpReturnCode"]="RC_MSS_RESTORE_REPAIRS_NIBBLE_OUT_OF_RANGE"
        d["FFDC"]="MAX_NIBBLE_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x570aa68a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_TO_GET_DDR_TYPE"
        d["FFDC"]="REQUIRED_MIN_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x571a246a:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK_PASSED"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5730c840:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR5_DRV_IMP_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x573cdd60:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x57497cec:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_HW_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5755d73f:
        d["HwpReturnCode"]="RC_P10_HW540133_COMBO_WA_ERR"
        d["FFDC"]="LOCK_ERR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x575852ce:
        d["HwpReturnCode"]="RC_MSS_MAINT_DO_STEER_ALL_SPARES_DEPLOYED"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5759c7c8:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_DCCAL_FAILED"
        d["FFDC"]="FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5770447f:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x577207c3:
        d["HwpReturnCode"]="RC_PM_OCC_GPE_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x57a03caf:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="TAA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x57a8c3b9:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_POST_CONDITION_ERR"
        d["FFDC"]="IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x57c16e85:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR_BAD_STRAP_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x57c4f989:
        d["HwpReturnCode"]="RC_XIPC_TOR_APPEND_RING_FAILED"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x57c9ce9b:
        d["HwpReturnCode"]="RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x57da9474:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="FIRST_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x580438f0:
        d["HwpReturnCode"]="RC_P10_IOP_TOP_PHY_ERROR"
        d["FFDC"]="XRAM_PHY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58074168:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_ERROR"
        d["FFDC"]="DEVICEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5813afb4:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x581828fc:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5857653a:
        d["HwpReturnCode"]="RC_POZ_SPPE_NOT_READY_ERR"
        d["FFDC"]="SB_MSG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x585d7227:
        d["HwpReturnCode"]="RC_EXP_MCBIST_DATA_FAIL"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x586431b6:
        d["HwpReturnCode"]="RC_MSS_FREQ_NO_COMMON_SUPPORTED_CL"
        d["FFDC"]="CL_SUPPORTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58747dfb:
        d["HwpReturnCode"]="RC_MSS_CALC_PORT_POWER_EXCEEDS_MAX"
        d["FFDC"]="PORT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x588cc23e:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER_LIMIT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58948d6e:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET8"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x589e4e83:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PSI_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58a03097:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLON_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58ac4b81:
        d["HwpReturnCode"]="RC_ODY_TOO_MANY_RANKS_FOR_SUBTEST_SUPPORT"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58cb8b26:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_ENDP_ERR"
        d["FFDC"]="IOLINK_B_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58cfdcd7:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET2"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58dcc931:
        d["HwpReturnCode"]="RC_INVALID_DT_INDEX_RECEIVED"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x58fce227:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x59362466:
        d["HwpReturnCode"]="RC_MSS_MCBIST_EXCEEDED_MAX_SUBTESTS"
        d["FFDC"]="NUMBER_OF_SUBTESTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x597d67ff:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA18"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x59a3632e:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_MULTIPLE_RX_IDENTIFIED_ERR"
        d["FFDC"]="IOHS_FABRIC_LANE_REVERSAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x59acf991:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R09_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x59b634e8:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="BACKING_CACHES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x59ca4a3c:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x59efc1ea:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET2"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x59fa32ae:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_XSCOM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a008583:
        d["HwpReturnCode"]="RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a2b380d:
        d["HwpReturnCode"]="RC_MSS_INVALID_DRAM_GEN"
        d["FFDC"]="DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a42b01d:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_FSP_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a432605:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a4eb646:
        d["HwpReturnCode"]="RC_INVALID_ATTR_INDEX"
        d["FFDC"]="ROW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a5052e1:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a56c50d:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="XRAM_FW_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a6f7bef:
        d["HwpReturnCode"]="RC_MSS_INVALID_TIMING_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a7408d9:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a8c13d7:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNSUPPORTED_MODE"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5a8cd289:
        d["HwpReturnCode"]="RC_HW_IMG_PTR_ERROR"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5aa5268d:
        d["HwpReturnCode"]="RC_P10_PHB_HV_UTILS_ETU_RESET_ACTIVE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5aaf7a12:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5ad0323b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR3_BAD_CYCLE_ALIGN"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b09978f:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="PLAT_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b12b114:
        d["HwpReturnCode"]="RC_POZ_IO_TDR_DAC_RANGE_ERROR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b242c35:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="SRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b24db16:
        d["Register FFDC"]="REG_FFDC_TOD_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_M_PATH_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_PRI_PORT_0_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_PRI_PORT_1_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_SEC_PORT_0_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_SEC_PORT_1_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_S_PATH_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_I_PATH_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_PSS_MSS_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_PSS_MSS_STATUS_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_M_PATH_STATUS_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_S_PATH_STATUS_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_M_PATH_0_STEP_STEER_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_M_PATH_1_STEP_STEER_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_CHIP_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_TRACE_DATA_1_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_TRACE_DATA_2_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_TRACE_DATA_3_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_FSM_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_TX_TTYPE_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_RX_TTYPE_CTRL_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_ERROR_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_ERROR_MASK_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TOD_ERROR_ROUTING_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x5b345dcc:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b442a4e:
        d["HwpReturnCode"]="RC_NO_PMIC_DT_DDR5_TARGETS_FOUND"
        d["FFDC"]="EXPECTED_MIN_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b4a4734:
        d["HwpReturnCode"]="RC_POZ_I2C_FAILED_TO_LOCK_ENGINE_TIMEOUT_ERROR"
        d["FFDC"]="POLLINGINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b4ac1bc:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS_DDR5"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b7348b9:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LANE_INV_FAIL"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b81773a:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b94406e:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b95596a:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="TAA_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5b9d4836:
        d["HwpReturnCode"]="RC_XIPC_INVALID_SYSPHASE_PARM"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5baf297f:
        d["HwpReturnCode"]="RC_EXP_UNKNOWN_REVISION"
        d["FFDC"]="CHIP_INFO_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5bbbb3f5:
        d["HwpReturnCode"]="RC_INVALID_MDS_MEDIA_CNTL_TARGET_CONFIG"
        d["FFDC"]="VALID_CONTROLLERS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5bc9c5e6:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_NO_PAU"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5bdad3fe:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="HW_IMAGE_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5be3fb72:
        d["HwpReturnCode"]="RC_P10_SBE_STOP_HB_ECO_MODE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c06f98d:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP3_BUF_SIZE"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c0b5e8a:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c0dece2:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_BAD_OPERATION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c1b2adc:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_INDEX_ERROR"
        d["FFDC"]="INDEX_VEC_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c1e5bc6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="REQUIRED_DDR4_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c329d06:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c3bc400:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_INVALID_MCD_GROUP_SIZE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c42d032:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="W_T1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c49de2d:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="CHIP_SP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c509f0a:
        d["HwpReturnCode"]="RC_P10_HW540133_FLB_WA_ERR"
        d["FFDC"]="FIRST_ATTEMPT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c54e1e2:
        d["HwpReturnCode"]="RC_SBE_SPI_INVALID_PORT_MULTIPLEX_SET"
        d["FFDC"]="SPI_ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c560295:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_MULTIPLE_RX_IDENTIFIED_ERR"
        d["FFDC"]="DL_RX_LANE_CONTROL_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c673543:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c701b0c:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_COMMIT_NO_DOORBELL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c74483a:
        d["HwpReturnCode"]="RC_P10_PUT_REG_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="REG_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c789d4d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c8f1fe3:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5c96181e:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5cb22dcf:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="OMI_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5ce4ccd2:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNKNOWN_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5cf314e0:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_UE_SUE"
        d["FFDC"]="FAIL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5d05d81d:
        d["HwpReturnCode"]="RC_I2C_GET_SCOM_INVALID_READ_SIZE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5d517d16:
        d["HwpReturnCode"]="RC_OCMB_IS_NOT_ODYSSEY"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5d55cda3:
        d["HwpReturnCode"]="RC_EXP_DRAMINIT_BAD_RTT_WR"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5d5be39f:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_CHIPLET_ID_ERR"
        d["FFDC"]="ENTRY_B2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5d9311d5:
        d["HwpReturnCode"]="RC_INVALID_PMIC_GI2C_TARGET_CONFIG"
        d["FFDC"]="EXPECTED_GI2CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5d932013:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_IOHS_TARGET_ERR"
        d["FFDC"]="LINK_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5dd2b5a1:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5de026ac:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="R_T2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5de29c8e:
        d["HwpReturnCode"]="RC_MSS_BAD_MR_PARAMETER"
        d["FFDC"]="MR_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5ded287e:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_CLOCKS_OFF"
        d["FFDC"]="TRCTRL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5dfa1349:
        d["HwpReturnCode"]="RC_PM_AVSBUS_STATUS_READ_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5dfa5bb6:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_IOHS_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5e05cb97:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_POS_ERR"
        d["FFDC"]="IOLINK_B_UNIT_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5e05d902:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5e670a6c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5e781300:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_IOHS_TARGET_ERR"
        d["FFDC"]="LINK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5e854751:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT15_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5e8f730a:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5e94acae:
        d["HwpReturnCode"]="RC_SELF_RESTORE_INIT_FAILED"
        d["FFDC"]="CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5ea8af06:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TOR_MAGIC_QME_IN_HEADER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5eb6fb02:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="CONFIG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5eba0da1:
        d["HwpReturnCode"]="RC_P10_HW540133_CBM1_WA_ERR"
        d["FFDC"]="LOCK_ERR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5ed45675:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="RING_BUF_SIZE3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5ed5b914:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="SRANK_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5edc1ebe:
        d["HwpReturnCode"]="RC_ODYSSEY_I2C_ERROR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5edceccb:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_PLANAR_DRAM_GEN"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5ef17596:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TOTAL_RECOVERY_ATTEMPTS_EXCEEDED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5ef9c025:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5efd4cc2:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_PAIR_ERR"
        d["FFDC"]="MASTER_CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5eff6375:
        d["HwpReturnCode"]="RC_XIPC_EMPTY_IMAGE_SECTION"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f02e386:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_MEMORY_CONFIG_UNSUPPORTED"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f0ed2a1:
        d["HwpReturnCode"]="RC_PMIC_EFUSE_BLOWN"
        d["FFDC"]="THRESHOLD_HIGH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f13448e:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_MISALIGNED_ADDR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f4405b8:
        d["HwpReturnCode"]="RC_PSTATE_PB_CORE_FLOOR_FREQ_GT_CF6_FREQ"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f4d2b6c:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR6_WR_RECOVERY_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f4d81db:
        d["Register FFDC"]="ROOT_CTRL_REGISTERS_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL0_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL1_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL2_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL3_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL4_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL5_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL6_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL7_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL8_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x5f6d8a12:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f86e293:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DIMM_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f9213fa:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE_DDR5"
        d["FFDC"]="N_MODE_PMIC0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5f96a739:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_FAIL"
        d["FFDC"]="PTC_STEP_COMP_POLL_LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5fc70832:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="IO_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5fdc9405:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_ACTIVE_CORES_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5fe1e607:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_EXCEPTION_ERR"
        d["FFDC"]="OPCODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x5fe854c9:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="CONFIG23_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60020811:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6008832d:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60090bfe:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x600da28f:
        d["HwpReturnCode"]="RC_BAD_OVERRIDE_SIZE"
        d["FFDC"]="BAD_OVERRIDE_BIN_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x604480dd:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60717200:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR0_BAD_BURST_LENGTH"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x608872ce:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_INVALID_CMD"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6097a0f6:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="QME_RUNNING_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x609b9e92:
        d["HwpReturnCode"]="RC_MSS_DDIMM_RESET_N_DEAD_LOAD"
        d["FFDC"]="OCMB_RESET_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x609e36f7:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DIMM_INDEX_OUT_OF_BOUND"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60ae5737:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="RX0_LANE_CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60b9315e:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_HOMER_SCOM_ERROR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60b9c2c7:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60cd02d8:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="ECO_CORES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60d5c49b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x60ea3fdc:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ADDR"
        d["FFDC"]="TSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x611873b5:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x61249b94:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET8"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6135b54c:
        d["HwpReturnCode"]="RC_TARGET_ENTRY_MAGIC_WORD_MISMATCH"
        d["FFDC"]="EXPECTED_MAGICWORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x613bf8c0:
        d["HwpReturnCode"]="RC_XIPC_SECTION_REMOVAL_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x613c90c4:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="MAGIC_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x615bca04:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="CORE_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x61743177:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_BUSY_AFTER_RESET"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x61766bfe:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TRACE_ARRAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x619ca1f6:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR35_RTT_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x619ed1a0:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR4_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="EXPECTED_ENDURANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x61a98339:
        d["HwpReturnCode"]="RC_EXPLORER_SAVED_IMAGEB_ERROR_LOG"
        d["FFDC"]="UNIT_FFDC_EXP_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x61bb9f84:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET1"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x61bf9d89:
        d["HwpReturnCode"]="RC_INVALID_RING_CHIPLET_SECTION"
        d["FFDC"]="RING_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x61c0ef26:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="EXPECTED_SM_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x61c16409:
        d["HwpReturnCode"]="RC_XIPC_INPUT_SBE_IMAGE_NONZERO_RINGS_SIZE"
        d["FFDC"]="INPUT_RINGS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x62001770:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_MRW_POWER_CONTROL_REQUESTED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6219cdac:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6234d53e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR35_RTT_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6250c860:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="REM_IOLINK_ODD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6252da32:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_ENDP_ERR"
        d["FFDC"]="IOLINK_A_UNIT_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6256382e:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="OMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x62566718:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x62567430:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_IOHS_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_IOHS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x62587aed:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x625a4ea9:
        d["HwpReturnCode"]="RC_WOF_HEADER_DATA_MAX_POWR_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6261e8ad:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x627b60c8:
        d["HwpReturnCode"]="RC_UNEXPECTED_ATTR_CHIP_TYPE"
        d["FFDC"]="HEADER_CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6283a87f:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x628f4c9b:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PSI_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6295b7ba:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6295b95c:
        d["HwpReturnCode"]="RC_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x629ba398:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="GENERATED_KEY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x62d6cd04:
        d["HwpReturnCode"]="RC_MSS_EXP_SUM_MASK_REG_SCOM_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x62e1a744:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LANE_INV_FAIL"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x62f679a6:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6300fe0e:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="MASTER_CHIP2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6317a5f8:
        d["HwpReturnCode"]="RC_INVALID_SIZE_FOR_ENDIANNESS_CORRECTION"
        d["FFDC"]="ATTRIBUTEID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x631ca0fc:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_EN_TX_DQ_PREAMBLE_PATTERN_U1"
        d["FFDC"]="PATTERN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x631e7877:
        d["HwpReturnCode"]="RC_MVPD_CODE_BUG"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x634cd59c:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="REM_IOLINK_ODD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6351bc7a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x635218b6:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_L3_TABLE_ERROR"
        d["FFDC"]="L3_VEC_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x635a4370:
        d["HwpReturnCode"]="RC_PMIC_HEALTH_CHECK_FAIL_MNFG_MODE_DDR5_4U"
        d["FFDC"]="N_MODE_PMIC0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x635b698f:
        d["HwpReturnCode"]="RC_XIPC_RS4_OVERLAY_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x636727e6:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x63747a8f:
        d["HwpReturnCode"]="RC_MSS_MAINT_BAD_STEER_MUX_TYPE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6393b33e:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6397bca8:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_ERROR"
        d["FFDC"]="TP_TPCHIP_OCC_OCI_OCB_ADC_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x639b976f:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_RESET_TIMEOUT"
        d["FFDC"]="PBASLVREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x63c7f8db:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x63ca54c8:
        d["HwpReturnCode"]="RC_INVALID_POUNDW_VERSION"
        d["FFDC"]="POUNDW_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x63d310a8:
        d["HwpReturnCode"]="RC_HW_IMAGE_INVALID_SIZE"
        d["FFDC"]="HW_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x63daf5b8:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x63e1d09d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x63e399b8:
        d["HwpReturnCode"]="RC_MSS_MAX_FREQ_ATTR_SIZE_CHANGED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x63e3f0bc:
        d["HwpReturnCode"]="RC_PSTATE_PB_ZERO_DCCR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64040390:
        d["HwpReturnCode"]="RC_PGPE_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64134764:
        d["HwpReturnCode"]="RC_ODY_INVALID_GI2C_TARGET_CONFIG"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x642bd191:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR_BAD_DRAM"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x642e1156:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_WHEN_ROUNDING"
        d["FFDC"]="CORRECTION_FACTOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x642f4b56:
        d["HwpReturnCode"]="RC_VIN_BULK_BELOW_TOLERANCE"
        d["FFDC"]="MINIMUM_MV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64375847:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT_CORE"
        d["FFDC"]="CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x644a28bb:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x646a88fa:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_WRITE_NO_DOORBELL"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x646e6bd7:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6476f61c:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6479e83c:
        d["HwpReturnCode"]="RC_MSS_MCBIST_PROGRAM_TOO_BIG"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x647dc026:
        d["HwpReturnCode"]="RC_P10_IOHS_POLL_ACTION_STATE_ERROR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x647ed359:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_CORE_NOT_DUMPABLE"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x649352c3:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64abc1d7:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP3_BUF"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64cbb1d0:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64d861e8:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_UNSUPPORTED_DDR_FREQ"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64e16297:
        d["HwpReturnCode"]="RC_MSS_CHANNEL_MIRROR_SETTINGS_MISMATCH_RANK0"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64e3c256:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64e46a6d:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT_MC"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64f03b1e:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="CHIP_PS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x64ff66db:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6504a99b:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x651d1860:
        d["HwpReturnCode"]="RC_INVALID_PMIC_INDEX_RECEIVED"
        d["FFDC"]="EXPECTED_MAX_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65208c18:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65276fc9:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_ERROR"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x652b1e29:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="QME_BCEBAR1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6533402d:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6544c84c:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65478822:
        d["HwpReturnCode"]="RC_POZ_SPPE_NOT_READY_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6559d0da:
        d["HwpReturnCode"]="RC_FILT_PLL_LOCK_ERR"
        d["FFDC"]="PLL_EXPECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x655d85e2:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="MVPD_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x656af1dd:
        d["HwpReturnCode"]="RC_PM_OCB1_GET_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65747f19:
        d["HwpReturnCode"]="RC_INVALID_RING_CHIPLET_SECTION"
        d["FFDC"]="SECTION_NAME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x658a9927:
        d["HwpReturnCode"]="RC_STATIC_POWER_GATING_PFET_CNFG_ERR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65acb07f:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_CHIPLET_ID_ERR"
        d["FFDC"]="ENTRY_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65b9bbc4:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_NSL_FAILED"
        d["FFDC"]="MC_QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65bd747b:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="EXPECTED_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65bdca48:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT_MC"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65dbd64f:
        d["HwpReturnCode"]="RC_PMIC_DROPPED_INTO_N_MODE"
        d["FFDC"]="PMIC_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65dce295:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65e49d0c:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65e51fe6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="EFD_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65ea8da8:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65f0dc13:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER_LIMIT"
        d["FFDC"]="COUNT_DIMMS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x65fbaea2:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x661a414e:
        d["HwpReturnCode"]="RC_MSS_EXP_CCS_RCD_FAIL"
        d["FFDC"]="FAIL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x661fa693:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x662cc39a:
        d["HwpReturnCode"]="RC_P10_TOD_STATUS_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x66307756:
        d["HwpReturnCode"]="RC_ODY_INVALID_ATX_OVERRIDE"
        d["FFDC"]="FAILING_ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x665434ce:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_RX_LANE_BUSY_TIMEOUT_ERROR"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x666da6db:
        d["HwpReturnCode"]="RC_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="SELECT_SRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x66b6709f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x66d51600:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_COMMIT_NO_DOORBELL"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x66e58e07:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_UNDERFLOW"
        d["FFDC"]="ATTR_ADJ_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x67052b4a:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="ROW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x67069a76:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x671a7567:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="OVERPOWER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x672994e8:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x672b5000:
        d["HwpReturnCode"]="RC_QME_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x67375bc2:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR6_TRTP_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6746f012:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x674d5b4f:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x676b8488:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="OMI_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6776b069:
        d["HwpReturnCode"]="RC_POZ_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="POLL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x678129e3:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DIMM_INDEX_OUT_OF_BOUND"
        d["FFDC"]="MAX_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x67b2e0b4:
        d["HwpReturnCode"]="RC_DPLL_LOCK_ERR"
        d["FFDC"]="TARGET_CHIPLET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x67be062f:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_NODE_DELAY"
        d["FFDC"]="LONGEST_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x67c78010:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x67deb6f6:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x680a7b60:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="FRAMER0123_ERR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x680db9a6:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_ERROR"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x681ae901:
        d["HwpReturnCode"]="RC_I2C_SCOM_EXPECTED_IBM_INDICATOR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6844cafb:
        d["HwpReturnCode"]="RC_HW_IMAGE_INVALID_SIZE"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x687b8243:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="QME_BCECSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x68957977:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6895e277:
        d["HwpReturnCode"]="RC_P10_WAIT_FOR_DMA_CHANNELS_TO_DRAIN_TIMEOUT"
        d["FFDC"]="NX_DMA_SU_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x68af5e21:
        d["HwpReturnCode"]="RC_P10_OCMB_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x68b070ab:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_NO_RX_IDENTIFIED_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x68d45fbf:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_FIELD_VALUE"
        d["FFDC"]="STRAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x68e0558e:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_XFER_RECEIVE_DONE_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x68ebc20f:
        d["HwpReturnCode"]="RC_MSS_MAINT_BAD_RANK_INPUT"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x68f00b12:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_CONFIG_ERR"
        d["FFDC"]="OCAPI_EN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x691d12e0:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_HEADER_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69213eb7:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET1"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69407c8f:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x695e417e:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_LATENCY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x696463be:
        d["HwpReturnCode"]="RC_MSS_EXP_CATASTROPHIC_DRAMINIT_TRAINING_FAIL"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x697801cb:
        d["HwpReturnCode"]="RC_QME_META_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69844b48:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69875ac0:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT5_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69adb24f:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="RING_BUF_SIZE1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69ae8f16:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69c53daf:
        d["HwpReturnCode"]="RC_SHADOW_DIS_FDCR_UPDATE_IN_PROG_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69d33f5a:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPXRAM_IMG_ERROR"
        d["FFDC"]="IOPXRAM_VER_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69e85869:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_GROUP_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69efbacb:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="SYS_UT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69f0fe10:
        d["HwpReturnCode"]="RC_MSS_INVALID_DB_MDQ_DRIVE_STRENGTH"
        d["FFDC"]="DATA_RATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69f51089:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DRAM_DENSITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69f58f9b:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="PARSER0123_ERR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x69fa2da0:
        d["HwpReturnCode"]="RC_ALIGN_INTR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6a06d11a:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="ROW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6a17e86b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6a2e5328:
        d["HwpReturnCode"]="RC_POZ_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6a2e6bbe:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_OVERFLOW"
        d["FFDC"]="ATTR_ADJ_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6a3c0176:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6a456326:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="POW_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6a953b4a:
        d["HwpReturnCode"]="RC_XGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6a97c8db:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="LOC_FBC_GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6aca6efe:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="ACTIVE_CORES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6ae6366c:
        d["HwpReturnCode"]="RC_PGPE_INIT_PSTATE_AUTOSTART_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6af81540:
        d["HwpReturnCode"]="RC_I2C_GET_SCOM_INVALID_READ_SIZE"
        d["FFDC"]="SIZE_RETURNED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b0021bd:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET2"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b078962:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERR"
        d["FFDC"]="CLOCK_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b14f0d8:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NOT_ENOUGH_MEMORY"
        d["FFDC"]="REQUESTED_MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b260dee:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b32a42c:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b378d61:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_FREQ_MISMATCH"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b3fca06:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PAU_MMIO_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b3fdbc9:
        d["HwpReturnCode"]="RC_PMIC_HEALTH_CHECK_FAIL_MNFG_MODE_DDR5_4U"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b43a139:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b5acaaa:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_UNDERFLOW"
        d["FFDC"]="PDW_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b6ce17a:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b76edb0:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_OVERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b852382:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b86414d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="EFD_BLOCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b87eed8:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_FAIL"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6b95fc36:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6bb2e171:
        d["HwpReturnCode"]="RC_INVALID_PMIC_GI2C_TARGET_CONFIG"
        d["FFDC"]="NUM_GI2CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6bb5960e:
        d["HwpReturnCode"]="RC_OTP_TIMEOUT"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6bba7199:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_MULTIPLE_RX_IDENTIFIED_ERR"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6bbc0ddb:
        d["HwpReturnCode"]="RC_ECL2_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6bbcd67e:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_HEIGHT_MIX"
        d["FFDC"]="OMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6bd8e82b:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT_EQ"
        d["FFDC"]="MC_QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6bedfeeb:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6befd848:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVPG_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6bf4ac4d:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR11_BAD_VREFCA"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c05ffbc:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="BANK_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c14aaa9:
        d["HwpReturnCode"]="RC_ODY_OUT_OF_BOUNDS_DBYTE_PASSED_TO_SWIZZLE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c276d75:
        d["HwpReturnCode"]="RC_XIPC_INVALID_SYSPHASE_PARM"
        d["FFDC"]="SYSPHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c2c1aee:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c36c7f4:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_CORE_NOT_FOUND"
        d["FFDC"]="FUSED_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c4bffe1:
        d["HwpReturnCode"]="RC_XIPC_INVALID_MVPD_RINGCLASS"
        d["FFDC"]="KWD_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c4f8335:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c593085:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET8"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c62622f:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6c694ef0:
        d["HwpReturnCode"]="RC_P10_CHTM_CTRL_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6ca59029:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="MAX_RING_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6cab301d:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FW_MISMATCH"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6cf29c22:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="MIN_REQD_ECS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d025e64:
        d["HwpReturnCode"]="RC_PM_OCC_GPE1_HALT_TIMEOUT"
        d["FFDC"]="GPE1_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d18e2e1:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d190f5b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="REQUIRED_MIN_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d1c2b88:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_COMPUTED_ZERO_TCK_STD"
        d["FFDC"]="TCK_MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d20adcd:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="FEATURE_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d3c90a9:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d3d5e82:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="PROC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d451c9d:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_FW_VER_ERROR"
        d["FFDC"]="FW_VER_1_HW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d5ed749:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="SP_WKUP_REG_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d62d776:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_REM_IOLINK_TARGET_ERR"
        d["FFDC"]="LOC_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d67012c:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d67af26:
        d["HwpReturnCode"]="RC_MSS_INVALID_CW_ENCODING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d81dc01:
        d["HwpReturnCode"]="RC_QME_META_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6d9b2fde:
        d["HwpReturnCode"]="RC_PMIC_CHIP_NOT_RECOGNIZED"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6da2d3b4:
        d["HwpReturnCode"]="RC_EXP_RESPONSE_WRONG_REQID"
        d["FFDC"]="RSP_REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6dae45bd:
        d["Register FFDC"]="REG_FFDC_DTS_ERROR"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::TCMC_EPS_DTS_ERROR_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x6dd06b2d:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6e255069:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="CU_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6e3d6090:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6e74552e:
        d["HwpReturnCode"]="RC_INVALID_SCAN_TARGET_TYPE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6e82a748:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_NODE_DELAY"
        d["FFDC"]="PATH_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6e85c9ea:
        d["HwpReturnCode"]="RC_RCS_PLL_LOCK_ERR"
        d["FFDC"]="TP_PLL_LOCK_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6eb408a4:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6edb8615:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="SYS_PS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6ef3f78d:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_WRITE_OFFSET"
        d["FFDC"]="EXPECTED_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6f3903f2:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="FBC_BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6f4cf0d5:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6f664fa8:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6f6e7272:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="CU_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6f82c110:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6f8a4fef:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET0"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6f8c1ef4:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_DW_NOT_FOUND"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6f9ab250:
        d["HwpReturnCode"]="RC_INVALID_POUNDV_VERSION"
        d["FFDC"]="POUNDV_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6fa185f1:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLON_NT_ATTR_VALUE"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6fa73439:
        d["HwpReturnCode"]="RC_XIPC_FEATURE_LIST_SIZE_OVERFLOW"
        d["FFDC"]="FEAT_LIST_MAX_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6fb054ce:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6fb2439a:
        d["HwpReturnCode"]="RC_P10_DOWNSTREAM_TMPL4OR7_REQUIRED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6fb6dccb:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="GOOD_QUADS_PER_SORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6fbc79f9:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="NEW_BAD_BITS_R1_BYTE4_7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6fd578c5:
        d["HwpReturnCode"]="RC_PM_OCB1_GET_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6ffac1d2:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_UNDERFLOW"
        d["FFDC"]="ERROR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x6ffffb3a:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_CONSISTENCY_ERR"
        d["FFDC"]="X_AGGREGATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x700dc984:
        d["HwpReturnCode"]="RC_P10_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70120fea:
        d["HwpReturnCode"]="RC_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="PERV_CPLT_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7018c7cd:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x701bdc19:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_HEADER_ERR"
        d["FFDC"]="HEADER_B5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x702cc47f:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_SL_FAILED"
        d["FFDC"]="MC_QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7059c801:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DIMM_TYPE"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7071506b:
        d["HwpReturnCode"]="RC_I2C_STATUS_ERROR"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x707354ee:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_IOLINK_ODD_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x707a5e6c:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_REVISION_FOR_MODULE_SPECIFC"
        d["FFDC"]="FUNCTION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x708ace1b:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_UPSTREAM_CRC"
        d["FFDC"]="CRC_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70a1f2a2:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_MISSING_FLAG"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70b77d2a:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_PRE_CONDITION_ERR"
        d["FFDC"]="EVEN_NOT_ODD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70ba1d6c:
        d["HwpReturnCode"]="RC_HOMER_IMG_PTR_ERROR"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70bb5600:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR_BAD_DRAM"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70bee016:
        d["HwpReturnCode"]="RC_SHADOW_DIS_FDCR_UPDATE_IN_PROG_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70cec2c0:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_WRITE_WHILE_BUSY"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70db4cb8:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_PAIR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70dea4c0:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70e1c467:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_INVALID_SIZE"
        d["FFDC"]="STATUS_CODE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70e92516:
        d["HwpReturnCode"]="RC_ODY_DRAM_INDEX_OUT_OF_BOUNDS"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70fbaa1f:
        d["HwpReturnCode"]="RC_PSTATE_PB_SAFE_FREQ_GT_PS0_FREQ"
        d["FFDC"]="SAFE_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x70fe9ba9:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_STEP_COUNT_ERROR"
        d["FFDC"]="TOD_VALUE_INITIAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x711924c4:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="MUX_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x711bf96f:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_NOT_ENOUGH_PAUS"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7124ee81:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_IMAGE_SIZE"
        d["FFDC"]="MAX_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7131b5c2:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_MULTIPLE_RX_IDENTIFIED_ERR"
        d["FFDC"]="IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x716aa6f3:
        d["HwpReturnCode"]="RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x717fc049:
        d["HwpReturnCode"]="RC_P10_OPCODE_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x718371aa:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_THREAD_STOP_ERR"
        d["FFDC"]="RAS_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x718c468f:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVPG_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x718dd344:
        d["HwpReturnCode"]="RC_PMIC_NOT_DDR5_REVISION"
        d["FFDC"]="PMIC_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x71980d10:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x71c1bb8a:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="GOOD_CACHES_PER_SORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x71c40330:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_STATUS"
        d["FFDC"]="STATUS_WORD32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x71dc19c6:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="PROC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x71e71179:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_GROUP_SIZE"
        d["FFDC"]="GROUP_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x71eea426:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="OVLY_SCAN_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x71fd2a46:
        d["HwpReturnCode"]="RC_PUTRING_OPCG_DONE_TIMEOUT"
        d["FFDC"]="ROTATE_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7222a8f0:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72436fd0:
        d["HwpReturnCode"]="RC_MSS_NO_DATABUS_UTILIZATION"
        d["FFDC"]="PORT_DATABUS_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7247f6c9:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x724dba7e:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x725e3e00:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="MAX_REPAIRS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7263dabc:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR5_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_VDD_OPERABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72806934:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_ODD_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72833d4f:
        d["HwpReturnCode"]="RC_XIPC_DYNAMIC_INIT_FAILED"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x728671b3:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_CLEANUP_FAILED"
        d["FFDC"]="FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x728962ab:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA22"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x728dbd63:
        d["HwpReturnCode"]="RC_INVALID_DT_INDEX_RECEIVED"
        d["FFDC"]="EXPECTED_MAX_DTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x729e08a0:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72a3c4b6:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_ERROR"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72a96fb3:
        d["HwpReturnCode"]="RC_DONE_HALT_NOT_SET"
        d["FFDC"]="POLL_DELAY_HW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72accc5d:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_FSP_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72ad0ba7:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_WRITE_PREAMBLE"
        d["FFDC"]="MR8A0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72c2677d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ6"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72c39d2b:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_US_B"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72c5fc79:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x72c9cdf8:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR"
        d["FFDC"]="TARGET2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7301a41f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7305d659:
        d["HwpReturnCode"]="RC_MSS_INVALID_TIMING_VALUE"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7315ebde:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x732b5287:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="LOOP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73363834:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7351638e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR4_BAD_MIN_REFRESH_RATE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7356a569:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL_DDR5"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x736deeaa:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7387727c:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x738d25d0:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_TYPE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73a4714a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_TO_GET_DDR_TYPE"
        d["FFDC"]="VPD_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73a80cd1:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_STEP_COUNT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73aa135b:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="MODE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73b1ab80:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_CORE_NOT_FOUND"
        d["FFDC"]="MASTER_CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73ce6473:
        d["HwpReturnCode"]="RC_PROC_DOES_NOT_SUPPORT_US_B"
        d["FFDC"]="B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73d4fe55:
        d["HwpReturnCode"]="RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73fe22e5:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="LINK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x73fffe72:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7416954e:
        d["HwpReturnCode"]="RC_PM_PSS_P2S_ERROR"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x744944f2:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_OFFSET_UNSUPPORTED"
        d["FFDC"]="IMAGE_ST_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x744c98c4:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x745494a4:
        d["HwpReturnCode"]="RC_MSS_EXP_UNKNOWN_PHY_INIT_MODE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x746afa20:
        d["HwpReturnCode"]="RC_MSS_FREQ_NOT_EQUAL_MAX_DOMAIN_FREQ"
        d["FFDC"]="MSS_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x746b4d2c:
        d["HwpReturnCode"]="RC_P10_TOD_POLLING_DELAY_CALC_OVERFLOW"
        d["FFDC"]="TOD_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x748d0540:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_COMPARE_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74ac2c7f:
        d["HwpReturnCode"]="RC_PMIC_RANGE_CONVERSION_OVERFLOW"
        d["FFDC"]="RANGE_1_VOLT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74ad7ebe:
        d["HwpReturnCode"]="RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74ae038b:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_CCS_STUCK_IN_PROGRESS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74b1f9e0:
        d["HwpReturnCode"]="RC_BAD_INPUT_BUFFER"
        d["FFDC"]="INPUT_BUF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74b8aa37:
        d["HwpReturnCode"]="RC_MSS_TOO_MANY_PRIMARY_RANKS_ON_DIMM"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74d16a25:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="EXT_CMD_LANES_16_31"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74d309c9:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74d4d415:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74d91ece:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="RECORD_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74df161b:
        d["HwpReturnCode"]="RC_IO_EXT_CMD_POLL_FAILED"
        d["FFDC"]="FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74efc913:
        d["HwpReturnCode"]="RC_SPI_CLK_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x74f83a58:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT9_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x750e0c53:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="SRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7513ea02:
        d["HwpReturnCode"]="RC_BAD_HOMER_PTR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x751c1a72:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_REVISION"
        d["FFDC"]="DRAM_GENERATION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7531f4c5:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R0B_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x75324c3a:
        d["HwpReturnCode"]="RC_EXP_RESPONSE_WRONG_REQID"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x753dfef0:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x75415035:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x754bcc59:
        d["HwpReturnCode"]="RC_MSS_SPD_TIMING_FAIL"
        d["FFDC"]="UPPER_BOUND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x75593852:
        d["HwpReturnCode"]="RC_POZ_IO_TX_TDR_ERROR"
        d["FFDC"]="LANE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x756f1e07:
        d["HwpReturnCode"]="RC_IO_PPE_UNDEGRADE_FAIL"
        d["FFDC"]="DISABLED_LANES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x758768b5:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x75a4f3d7:
        d["HwpReturnCode"]="RC_MSS_FAILED_TO_FIND_TRFC"
        d["FFDC"]="REFRESH_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x75ab984a:
        d["HwpReturnCode"]="RC_INVALID_PMIC_INDEX_RECEIVED"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x75bd7f22:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="POW_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x75c14546:
        d["HwpReturnCode"]="RC_MSS_OUTPUT_OVERFLOW_CALC_UTIL"
        d["FFDC"]="DRAM_CLOCKS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x75dd645a:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_OVERFLOW"
        d["FFDC"]="PSTATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x762238f3:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76295993:
        d["HwpReturnCode"]="RC_PSTATE_PB_SAFE_FREQ_GT_PS0_FREQ"
        d["FFDC"]="UT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76325830:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x764229e2:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="RESP_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76515b67:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PAUC_GARD_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76628bf8:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR_1"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76644367:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="IOO_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76701cb4:
        d["HwpReturnCode"]="RC_MSS_MDS_I2C_WRONG_RSP_SIZE"
        d["FFDC"]="MDS_MDIA_CTL_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7679fed3:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR15_ECS_ERROR_THRESHOLD"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76a4cc5c:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP4_BUF"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76d34d8c:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76e65183:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR8_WR_PREAMBLE_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x76f16cf4:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x770810e6:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET0"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x770984af:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x770f6daf:
        d["HwpReturnCode"]="RC_NO_PMIC_DT_DDR5_TARGETS_FOUND"
        d["FFDC"]="NUM_DT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x771cca0b:
        d["HwpReturnCode"]="RC_POWERBUS_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x772dccde:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="PLAT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x774ad54b:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77501e6f:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET2"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x775c6d8b:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_PARITY_UECC_ERROR"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x775cf380:
        d["HwpReturnCode"]="RC_SYSTEM_IN_CHECKSTOP_STATE"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x775fddbf:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_CLOCK_ATTRIBUTES"
        d["FFDC"]="PAU_CLOCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77623fef:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_CONTINUOUS_SCRUB_FAILED_TO_INIT"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7772470d:
        d["HwpReturnCode"]="RC_POZ_HEARTBEAT_NOT_SET_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x777ad96f:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x777f055c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA11"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77915e1c:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="FEATURE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7796f083:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_IOLINK_TARGET_MATCH_ERR"
        d["FFDC"]="PARENT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x779bab7e:
        d["HwpReturnCode"]="RC_P10_RAM_INVALID_REG_TYPE_ACCESS_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77af0085:
        d["HwpReturnCode"]="RC_MSS_CHANNEL_MIRROR_SETTINGS_MISMATCH_RANK0"
        d["FFDC"]="VALUE_CHB_CS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77c2228c:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE_DDR5"
        d["FFDC"]="N_MODE_PMIC1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77d0d70b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_MEMORY_CONFIG_UNSUPPORTED"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77e5e959:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_TFCSR_ERROR_CHECK_FAILED"
        d["FFDC"]="PC_FIR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77e63916:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77f2ad29:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_OFFSET_UNSUPPORTED"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x77fd7c22:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="TURBO_TDP_IDC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x781a4352:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="ECO_CORES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x782a3342:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FW_MISMATCH"
        d["FFDC"]="MSG_FW_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7838b096:
        d["HwpReturnCode"]="RC_P10_INT_SCRUB_NOT_FINISHED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7846aee8:
        d["HwpReturnCode"]="RC_P10_IO_TX_TDR_SCREEN_MULTI_GROUP_ERROR"
        d["FFDC"]="OMI_GROUPB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x784e88d8:
        d["HwpReturnCode"]="RC_PPE_STATE_HALT_TIMEOUT_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7868fc31:
        d["HwpReturnCode"]="RC_P10_RNG_INIT_CONDITIONER_STARTUP_TEST_FAILED_ERR"
        d["FFDC"]="RNG_CFG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x787e3152:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET2"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x789762ae:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78be0191:
        d["HwpReturnCode"]="RC_XGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="BAD_IMG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78bf93e5:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78c24a40:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="PLAT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78c2652b:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_OVERFLOW"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78cd0986:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="MEMREGS_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78e9308e:
        d["HwpReturnCode"]="RC_INVALID_PMIC_TARGET_CONFIG"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78ef3ff4:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78efc655:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RECORD_KEYWORD_PAIR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x78fb1643:
        d["HwpReturnCode"]="RC_P10_IO_TX_TDR_SCREEN_MULTI_GROUP_ERROR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79063432:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="XSR_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79103b23:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_ERR"
        d["FFDC"]="CLOCK_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7910d4e9:
        d["HwpReturnCode"]="RC_ODY_MCBIST_DATA_FAIL"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x791a2aa3:
        d["HwpReturnCode"]="RC_PM_AVSBUS_STATUS_READ_ERROR"
        d["FFDC"]="RESP_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79405cc0:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="ROOT_CTRL1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79431b55:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_POLL_FAILED"
        d["FFDC"]="DONE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x796b8065:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_ENDP_ERR"
        d["FFDC"]="IOLINK_B_UNIT_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7982aaba:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79873a24:
        d["HwpReturnCode"]="RC_P10_PCI_REFCLOCK_ERR"
        d["FFDC"]="CLOCK_MUX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x798e6e2b:
        d["HwpReturnCode"]="RC_I2C_PMIC_INVALID_READ_SIZE"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x798f2a51:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_ADDL_INFO"
        d["FFDC"]="REQUESTED_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7993fe0f:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="MAX_UTILIZATION_DIMM_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x799e44b4:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79b8a82e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79b9138e:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79bc317c:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_LIST_PASSED"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79c1152d:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ECO_CACHE_CONTAINED_CONFIG_ERROR"
        d["FFDC"]="ECO_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79c834e5:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x79cb0b9b:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_PBCQ_CQ_NOT_IDLE"
        d["FFDC"]="NFIR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a0199f0:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET8"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a0d09a5:
        d["HwpReturnCode"]="RC_INVALID_PMIC_GI2C_TARGET_CONFIG"
        d["FFDC"]="NUM_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a0ffcac:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_LPC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a230206:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TRCTRL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a2d379a:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a304f15:
        d["HwpReturnCode"]="RC_PARALLEL_SCAN_COMPARE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a35aa1c:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a3b629e:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_CORE_FREQ_RANGE_ERR"
        d["FFDC"]="FREQ_CORE_CEILING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a428955:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a53b9a4:
        d["HwpReturnCode"]="RC_INVALID_RING_IMAGE"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a541406:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="RANK2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a59a85a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA15"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7a9b986a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_BAD_ADU_ACTION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7aa8e8f6:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7aab4c21:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="HOST_DL0_TRAINING_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7aaee022:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_TRAINING_TIMEOUT_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ac60791:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ad085d0:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET8"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ae4ad08:
        d["HwpReturnCode"]="RC_HCODE_INVALID_IMG_TYPE"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7afbeff7:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FAILURE_MSG_BLOCK"
        d["FFDC"]="PMU_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b02fc55:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VRT_HEADER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b04cab7:
        d["HwpReturnCode"]="RC_P10_NX_STOP_UMAC_FETCHING_NEW_CRBS_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b12e47c:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR10_BAD_VREFDQ"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b1a483e:
        d["HwpReturnCode"]="RC_MSS_MDS_I2C_WRONG_RSP_SIZE"
        d["FFDC"]="RSP_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b2fdad5:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_OPCODE_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b331fde:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET8"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b457158:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_FUSED_ODD_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b7cd76c:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_MULTIPLE_SPECIFICATION"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b87f90d:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT23_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b8f74f5:
        d["HwpReturnCode"]="RC_ODY_DTS_READ_DATA_TIMEOUT"
        d["FFDC"]="DATA_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7b9142a4:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_POS_ERR"
        d["FFDC"]="IOLINK_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7bb3138b:
        d["HwpReturnCode"]="RC_PMIC_RANGE_CONVERSION_OVERFLOW"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7bb8144e:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_CONFIGURATION"
        d["FFDC"]="NUMACTIVEDBYTEDFI0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7bc250c9:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_INVALID_ACCESS_ERR"
        d["FFDC"]="USE_SCOM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7bd2f6bb:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="MFGID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7bed7d6e:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="COMMON_CLS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7bef6768:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR13_BAD_TCCD_L"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7bf71663:
        d["HwpReturnCode"]="RC_SHADOW_DIS_CORE_SHADOW_STATE_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7bff5779:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c15d24f:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="EC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c2c0129:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_POS_ERR"
        d["FFDC"]="IOLINK_B_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c2ca02f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c2ccbd4:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_ERROR_HOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c335728:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="IO_START"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c4c26a2:
        d["HwpReturnCode"]="RC_XGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c5992c5:
        d["HwpReturnCode"]="RC_POZ_IO_TX_TDR_ERROR"
        d["FFDC"]="DISTANCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c673bd5:
        d["HwpReturnCode"]="RC_NHTM_TRACE_TYPE_NOT_SUPPORTED"
        d["FFDC"]="NHTM_TRACE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c6c2673:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c708818:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_MCBIST_STUCK_IN_PROGRESS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c722ee2:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT_EQ"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c7a0222:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="REDUNDANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c7ab9fd:
        d["HwpReturnCode"]="RC_MSS_CONVERSION_ERROR"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7c8c8c79:
        d["HwpReturnCode"]="RC_P10_INT_SCRUB_NOT_FINISHED_ERR"
        d["FFDC"]="FLUSH_CTRL_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ca811c9:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="MC_PORT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ce7dd82:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ECO_CACHE_CONTAINED_CONFIG_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7cebf5fb:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_NOT_ENABLED"
        d["FFDC"]="SMF_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7cec07c8:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_UNSUPPORTED_ACTION"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7cf0f253:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR8_RD_PREAMBLE_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d0936ad:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_NOT_ENOUGH_PAUS"
        d["FFDC"]="OCAPI_EN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d0ee6ce:
        d["HwpReturnCode"]="RC_MSS_EXP_UNKNOWN_PHY_INIT_MODE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d2c2963:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d3e837b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_CORE_FREQ_RATIO_ERR"
        d["FFDC"]="FREQ_CORE_FLOOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d423052:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="RING_SECTION_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d73a050:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d88b7ac:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_ADDRESS_NOT_ALIGNED"
        d["FFDC"]="REQ_MEMORY_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d8e42e4:
        d["HwpReturnCode"]="RC_P10_PHB_HV_UTILS_ETU_RESET_ACTIVE"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d964dbd:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7d9d83ab:
        d["HwpReturnCode"]="RC_WOF_HEADER_DATA_MAX_POWR_INVALID"
        d["FFDC"]="WFTH_MAX_POWR_MIN_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7da3ce2a:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="R_T1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7da41f1a:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_CCS_STUCK_IN_PROGRESS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7da70302:
        d["HwpReturnCode"]="RC_P10_HW540133_LLB_WA_ERR"
        d["FFDC"]="FIRST_ATTEMPT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7da8edc8:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_TO_GET_DDR_TYPE"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7daea5bf:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MAX_SIZE_ERR"
        d["FFDC"]="MAX_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7dc54c9e:
        d["HwpReturnCode"]="RC_PM_AVSBUS_EXCESSIVE_VOLTAGE_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7de70cdc:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_CHIPLET_ID_ERR"
        d["FFDC"]="ENTRY_B1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7df6368c:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7dfcf876:
        d["HwpReturnCode"]="RC_PSTATE_PB_PG_ACCESS_ERROR"
        d["FFDC"]="FAPI_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e089842:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_MIXED_MDS_PLUG_ERROR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e13e6c5:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e163b40:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="VREF_CALIBRATION_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e1adf78:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_IO_ERR"
        d["FFDC"]="REG_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e31aa79:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR52_BAD_WR_CRC_WINDOW"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e3dc282:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="ACTUAL_REQID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e6d788c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e6f1522:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_MC_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_MC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e711952:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_NSL_FAILED"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e7475f0:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7e8b77a6:
        d["HwpReturnCode"]="RC_QME_BCE_HW_ERR"
        d["FFDC"]="QME_BCECSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ea00bbf:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ec631e4:
        d["HwpReturnCode"]="RC_XIPC_RINGID_RINGPROPS_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ed4ea0d:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_IN_RECOVERY_ERR"
        d["FFDC"]="OPCODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ee6a251:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STEP_FAIL"
        d["FFDC"]="C_RAS_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f24c576:
        d["HwpReturnCode"]="RC_POZ_I2CC_RESET_ERROR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f257274:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f2d1489:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_CALCULATION_ERR"
        d["FFDC"]="IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f2fe0d8:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="FIR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f413f6f:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EQ_CONFIG"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f4868e2:
        d["HwpReturnCode"]="RC_PSTATE_PB_PSTATE0_FREQ_NOT_SET"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f48fdc5:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="MAX_UTILIZATION_DIMM_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f5516da:
        d["HwpReturnCode"]="RC_PM_PSS_P2S_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f7b88c9:
        d["HwpReturnCode"]="RC_POZ_CHIPLET_NOT_FOUND"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f82a526:
        d["HwpReturnCode"]="RC_SYSTEM_IN_CHECKSTOP_STATE"
        d["FFDC"]="EQ_MC_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7f95ed3a:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="SUPPORTED_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7fae26e8:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7fc2f790:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNSUPPORTED_MODE"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7fe08933:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="CHECK_FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7fed36d4:
        d["HwpReturnCode"]="RC_ODY_START_ADDR_BIGGER_THAN_END_ADDR"
        d["FFDC"]="END_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7fed8f73:
        d["HwpReturnCode"]="RC_MSS_INVALID_PAGE_SIZE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x7ff126cc:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT27_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80040ab5:
        d["HwpReturnCode"]="RC_P10_IOHS_RESET_IOLINK_SEARCH_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x801164e6:
        d["HwpReturnCode"]="RC_EXP_MNFG_SPI_FLASH_TIMEOUT_WRITING_TEMP_BANK"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x802dc85d:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_CLOCKS_OFF"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80337c72:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="COUNT_DIMMS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8035c984:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x804c3569:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80527bb0:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8055fcf5:
        d["HwpReturnCode"]="RC_ODY_NUM_MRANKS_OUT_OF_BOUNDS"
        d["FFDC"]="NUM_MRANKS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8064ee20:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x806bed5f:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_LPC_BAR_ATTR_ERR"
        d["FFDC"]="BASE_ADDR_MMIO"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x808ad646:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_SIZE_MIX"
        d["FFDC"]="LARGER_DIMM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80915920:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80940b44:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_CONSISTENCY_ERR"
        d["FFDC"]="A_AGGREGATE_CHECK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80a1f9bf:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80b45980:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80b9754c:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80d57a02:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_START_NOMAINT"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x80fb7f63:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="UTIL_CONVERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x810377a7:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="FLAG_CHECK_TAG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8111f1f5:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR52_BAD_WR_CRC_WINDOW"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8124d991:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x812bc9e1:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_BUSY"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x81366ff1:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FAILURE_MSG_BLOCK"
        d["FFDC"]="EXPECTED_CSTESTFAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x815492f5:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x81576941:
        d["Register FFDC"]="OCC_JTAG_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJIC",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJSTAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJTDI",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJTDO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OJCFG_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x815a5ce2:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8165c656:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP2_BUF_SIZE"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8183c73b:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="DDLEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x81b5fc38:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_WRITE_OFFSET"
        d["FFDC"]="STATUS_WORD32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x81e0f12d:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x81f78b32:
        d["HwpReturnCode"]="RC_POZ_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x820a56a5:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_BAD_ADU_ACTION_ERR"
        d["FFDC"]="ACTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82464010:
        d["HwpReturnCode"]="RC_HW_IMG_PTR_ERROR"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x824e66d4:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_WRITE_POSTAMBLE"
        d["FFDC"]="WRPOST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x825e0b39:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x825fd308:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_NO_IOHS_MATCH_ERR"
        d["FFDC"]="LINK_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8265090b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="REM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x827041b8:
        d["HwpReturnCode"]="RC_MSS_EXP_POLL_ABORT_FW_STATUS_BUSY"
        d["FFDC"]="HOST_DL0_TRAINING_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82837099:
        d["HwpReturnCode"]="RC_MSS_MIN_UTILIZATION_ERROR"
        d["FFDC"]="INPUT_UTIL_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82a7e0b6:
        d["HwpReturnCode"]="RC_P10_L3ERR_EXTRACT_TA_WRONG_SIZE_ERR"
        d["FFDC"]="TA_DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82b9fc8f:
        d["HwpReturnCode"]="RC_MVPD_CODE_BUG"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82bedd8e:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="MCHP_STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82cd7c50:
        d["HwpReturnCode"]="RC_QMEC_CODE_BUG"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82ce068a:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ACTIVE_BACKING_OVERLAP_ERR"
        d["FFDC"]="FIRST_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82cf42c2:
        d["HwpReturnCode"]="RC_INVALID_MDS_MEDIA_CNTL_TARGET_CONFIG"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82e83981:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ECO_MODE_ERR"
        d["FFDC"]="BACKING_CACHES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82e84171:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="RANK2_BADDQ0_63"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82eaf480:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="N_MODE_PMIC2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x82f82741:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_DBYTENUMBER"
        d["FFDC"]="DBYTENUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x830b290f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="ERR_MISC_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8318d263:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x831c1467:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x83210bb2:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x832aaa6b:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_SCOM_PATH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x833621f9:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_PLANAR_DRAM_DENSITY"
        d["FFDC"]="DRAM_DENSITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x83427244:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x834499af:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_MAGIC"
        d["FFDC"]="HEADER_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8355a8bd:
        d["HwpReturnCode"]="RC_ODY_SPPE_ATTR_SETUP_GRID_FREQ_MISMATCH"
        d["FFDC"]="PLL_BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x835e752c:
        d["HwpReturnCode"]="RC_P10_PHB_HV_UTILS_ETU_RESET_ACTIVE"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x835f8d65:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_POLL_THRESHOLD_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x837082c4:
        d["Register FFDC"]="REG_FFDC_MC_OMIC_TRAIN_ERR_INFO"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omic::CMN_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::omic::PMU_CNTR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x83a28bd3:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_DCCAL_FAILED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x83adadb3:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ECO_CHIP_CONTAINED_CONFIG_ERROR"
        d["FFDC"]="ACTIVE_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x83c0a8c7:
        d["HwpReturnCode"]="RC_BAD_POUNDW_VPD_READ"
        d["FFDC"]="EXPECTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x83d06732:
        d["HwpReturnCode"]="RC_P10_SBE_PLL_INITF_UNSUPPORTED_PLL_BUCKET"
        d["FFDC"]="BUCKET_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x83d22411:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x83e9906a:
        d["HwpReturnCode"]="RC_ODY_IO_LOAD_PPE_IMG_ERROR"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x841228db:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8415e361:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PAUC_GARD_ERR"
        d["FFDC"]="PAUC_PRESENT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x841b42b8:
        d["HwpReturnCode"]="RC_P10_SPR_NAME_MAP_ACCESS_ERR"
        d["FFDC"]="REGNAME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84448e77:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR10_BAD_VREFDQ"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84490cbb:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8458d725:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_NEGATIVE_OR_ZERO_SLOPE"
        d["FFDC"]="RESULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8463180a:
        d["HwpReturnCode"]="RC_PSTATE_PB_PSTATE_STEP_EQ_0"
        d["FFDC"]="FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x846319e6:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_UPSTREAM_CRC"
        d["FFDC"]="THRESHHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84804652:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_SIZE_MIX"
        d["FFDC"]="SMALLER_DIMM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84821044:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_REMOTE_LINK_ID_ERR"
        d["FFDC"]="REMOTE_SUBLINK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84943347:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_FUSED_CORE_MISMATCH_ERR"
        d["FFDC"]="FUSED_CORE_REQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x849db45a:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_TM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84a14523:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_TABLE_ERROR"
        d["FFDC"]="TABLE_VEC_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84a4aa83:
        d["HwpReturnCode"]="RC_XIPC_INPUT_SBE_IMAGE_NONZERO_RINGS_SIZE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84a9cf89:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84aa21f2:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="START_BAD_BITS_R0_BYTE4_7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84be10ff:
        d["HwpReturnCode"]="RC_P10_L3ERR_LINE_DELETE_REG_BUSY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84d03f60:
        d["HwpReturnCode"]="RC_P10_MSS_UNSUPPORTED_OMI_FREQ"
        d["FFDC"]="OMI_FREQ_ENUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84d5d9d4:
        d["HwpReturnCode"]="RC_XGPE_RESET_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84da9181:
        d["HwpReturnCode"]="RC_PM_OCB3_GET_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84db5965:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_WRITE_POSTAMBLE"
        d["FFDC"]="MR8A0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84e85261:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="CU_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84eaa61c:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84ecf94a:
        d["HwpReturnCode"]="RC_EXP_FLASH_COMMAND_ERR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84edffaa:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84f0d58f:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_INVALID_CONFIGURATION"
        d["FFDC"]="ENTERPRISE_SUPPORTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84f43903:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_DCCAL_FAILED"
        d["FFDC"]="DONE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84f6ba5d:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR8_WR_PREAMBLE_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x84fc1266:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="BACKING_CACHES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8511b3f3:
        d["HwpReturnCode"]="RC_EXP_MNFG_SPI_FLASH_TIMEOUT_READING_IMAGE"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8532bea0:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR51_BAD_WR_CRC_THRESHOLD"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85338e43:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="CORE_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x854b894c:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8557d60a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85634085:
        d["HwpReturnCode"]="RC_PUTRING_RS4_STRING_OVERRUN"
        d["FFDC"]="SCAN_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85669b4b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_FIELD_VALUE"
        d["FFDC"]="IS_CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8570b432:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PAU_MMIO_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x857c62c0:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_ERR"
        d["FFDC"]="MASTER_CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85bad602:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="PROPOSED_TCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85c6035a:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR112_BAD_DFE_GAIN_BIAS"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85d9b6c6:
        d["HwpReturnCode"]="RC_EXP_DRAM_INDEX_OUT_OF_BOUNDS"
        d["FFDC"]="DRAM_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85de3dde:
        d["HwpReturnCode"]="RC_PMIC_NOT_DDR5_REVISION"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85e5f717:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85ec6e22:
        d["Register FFDC"]="REG_FFDC_SBE_FABRICINIT"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::PB_COM_SCOM_ES3_STATION_MODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_SND_MODE_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x85f1ab1b:
        d["HwpReturnCode"]="RC_CHTM_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85f87249:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_CORE_FREQ_RANGE_ERR"
        d["FFDC"]="FREQ_CORE_FLOOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x85f8c4c3:
        d["HwpReturnCode"]="RC_CHTM_PURGE_DONE_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x860b75e8:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8612c364:
        d["HwpReturnCode"]="RC_AUTO_WAKEUP_VECTOR_CREATION_FAILED"
        d["FFDC"]="PIR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8619d398:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_ERR"
        d["FFDC"]="DESKEW_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8671ab48:
        d["HwpReturnCode"]="RC_QME_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x867db52e:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_HOMER_SCOM_ERROR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8681efc5:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT14_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x86912d6c:
        d["HwpReturnCode"]="RC_P10_DL_PGRESET_STUCK"
        d["FFDC"]="PHB_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x869c09a5:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_CLEANUP_FAILED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x86c7388c:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT28_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x86c7df92:
        d["HwpReturnCode"]="RC_CHTM_PURGE_DONE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x86d2d422:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8704a664:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="ENTITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x871a5c44:
        d["HwpReturnCode"]="RC_INVALID_PMIC_TARGET_CONFIG"
        d["FFDC"]="EXPECTED_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8726e8ee:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x874410fd:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8777255c:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="QME_BCEBAR0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x877a35b9:
        d["HwpReturnCode"]="RC_SBE_SPI_INVALID_PORT_MULTIPLEX_SET"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x87834222:
        d["HwpReturnCode"]="RC_ODY_SPPE_ATTR_SETUP_GRID_FREQ_MISMATCH"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x87834d52:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="MEMREGS_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x878474fb:
        d["HwpReturnCode"]="RC_P10_PUTRING_OPCG_DONE_TIMEOUT"
        d["FFDC"]="RETURN_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x87a2147c:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_PASSED_IN"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x87c36827:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_VENDOR_IDS"
        d["FFDC"]="VENDOR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x87f0702d:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x87f5c58f:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLON_RD_ATTR_VALUE"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x87f6965f:
        d["HwpReturnCode"]="RC_QMEC_RINGS_OUTPUT_BUFFER_TOO_SMALL"
        d["FFDC"]="CUST_QME_RINGS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x87fcd834:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_UNKNOWN_SYNDROME_ECC"
        d["FFDC"]="SYNDROME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8805feaf:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_OP"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x883482e4:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8842b183:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x884e1ddc:
        d["HwpReturnCode"]="RC_MSS_FAILED_DATA_INTEGRITY_CHECK"
        d["FFDC"]="FFDC_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8851ec6e:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88637571:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x886537ca:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="CHIP_WB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x886d4cac:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88732cee:
        d["HwpReturnCode"]="RC_P10_CHTM_CTRL_BAD_STATE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88759695:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="PFET_SEQ_STATES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8896ad0d:
        d["HwpReturnCode"]="RC_POZ_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88a17d54:
        d["HwpReturnCode"]="RC_SELF_RESTORE_INIT_FAILED"
        d["FFDC"]="HOMER_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88b5be81:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88b8a371:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET8"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88bbffda:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DIMM_INDEX_OUT_OF_BOUND"
        d["FFDC"]="INPUT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88bffb58:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET2"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88c615b0:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="BASE_VOLTAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88c7e2be:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88d864a8:
        d["HwpReturnCode"]="RC_ODY_IO_LOAD_PPE_IMG_ERROR"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88ed5d9f:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ACTIVE_BACKING_OVERLAP_ERR"
        d["FFDC"]="BACKING_CACHES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88f0628b:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88f6c1f1:
        d["HwpReturnCode"]="RC_MSS_MAX_FREQ_ATTR_SIZE_CHANGED"
        d["FFDC"]="SUPPOSED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88f946fc:
        d["HwpReturnCode"]="RC_PMIC_DROPPED_INTO_N_MODE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x88fd4ebd:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x890cc7bd:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_CONSISTENCY_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89181cd2:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="AVSBUS_MAX_POLL_CNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x892ef96b:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_IOHS_TARGET_ERR"
        d["FFDC"]="LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89317274:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8931e18f:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_NFIR_NOT_CLEARED"
        d["FFDC"]="PFIR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x893ca4e9:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="START_BAD_BITS_R1_BYTE8_9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x893ffc39:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="POWERSAVE_TDP_IAC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x894de323:
        d["HwpReturnCode"]="RC_ODY_SCRATCH_REGS_UTILS_BUCKET_LOOKUP_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8955fa93:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_CALCULATION_ERR"
        d["FFDC"]="PHY_LANE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89564aff:
        d["HwpReturnCode"]="RC_TOR_TRAVERSAL_ERROR"
        d["FFDC"]="RING_SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x895c0adb:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VDD_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89737857:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="STATUS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x897d88c7:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x897e7ece:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR6_TRTP_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89898cff:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="START_BAD_BITS_R0_BYTE8_9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x899d9f4a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_NUMBER_OF_EFD_IS_ZERO"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89a04c23:
        d["HwpReturnCode"]="RC_P10_PUTRING_OPCG_DONE_TIMEOUT"
        d["FFDC"]="SCOM_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89c06a82:
        d["HwpReturnCode"]="RC_P10_NX_PBI_WRITE_IDLE_TIMEOUT"
        d["FFDC"]="NX_PB_ERR_RPT_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89c54ebf:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_FW_ADAPTER_PROPERTIES_RSP_DATA_LENGTH"
        d["FFDC"]="EXPECTED_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89d4e5bc:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="UNSUPPORTED_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x89fcc984:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_MCBIST_FAILED_TO_STOP"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a0eed87:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_VD_KEYWORD_VERSION_ERR"
        d["FFDC"]="VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a13308d:
        d["HwpReturnCode"]="RC_XIPC_SECTION_REMOVAL_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a20b121:
        d["HwpReturnCode"]="RC_METADATA_ENABLE_REQUIRES_TEMPLATE_5_OR_9"
        d["FFDC"]="TMPL_5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a23f709:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="RETRYCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a2af8b8:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a3d861d:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLON_NT_ATTR_VALUE"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a477e35:
        d["HwpReturnCode"]="RC_ODY_START_ADDR_BIGGER_THAN_END_ADDR"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a4c3fd4:
        d["HwpReturnCode"]="RC_ODY_SCRATCH_REGS_UTILS_BUCKET_LOOKUP_ERR"
        d["FFDC"]="HOST_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a5b65f0:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_TARGETED_SCRUB_FAILED_TO_INIT"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a6ecded:
        d["HwpReturnCode"]="RC_PGPE_RESET_TIMEOUT"
        d["FFDC"]="PGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a6f777b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA20"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a746fd0:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_ERROR"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8a8efa05:
        d["HwpReturnCode"]="RC_CORE_SPECIAL_WAKEUP_NOT_FEASIBLE"
        d["FFDC"]="EQ_MC_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8aa2122b:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="REM_IOLINK_EVN_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ac357f1:
        d["HwpReturnCode"]="RC_DPLL_LOCK_ERR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ac59038:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8acbef88:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_CALC_NCK"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8acef085:
        d["HwpReturnCode"]="RC_XIPC_CHIPNAME_MISMATCH_ERROR"
        d["FFDC"]="ATTR_NAME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ad29955:
        d["HwpReturnCode"]="RC_PM_PSS_P2S_ERROR"
        d["FFDC"]="TP_TPCHIP_OCC_OCI_OCB_P2S_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8adf9748:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_EVN_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8aea9f94:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_IOHS_TARGET_ERR"
        d["FFDC"]="LINK_SPLIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8afe4396:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP2_BUF_SIZE"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8b0eb02a:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="CMD_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8b448aaa:
        d["HwpReturnCode"]="RC_PMIC_CHIP_NOT_RECOGNIZED"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8b48b368:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8b605f69:
        d["HwpReturnCode"]="RC_POZ_INVALID_GROUP_ID"
        d["FFDC"]="GROUP_ID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8b75f224:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_UNSUPPORTED_ACTION"
        d["FFDC"]="ACTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8b8dbd35:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="NEW_BAD_BITS_R1_BYTE8_9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8b992da4:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="SCOMREG_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8bb34c4f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8bb8c74c:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET8"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8bc19ad4:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8bc7c111:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DIMM_TYPE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8be7554a:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="MRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8be80d1e:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8bf1a030:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c18fd9e:
        d["HwpReturnCode"]="RC_INVALID_RING_IMAGE"
        d["FFDC"]="MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c27e43f:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c324e6e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c34fcce:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP4_BUF_SIZE"
        d["FFDC"]="TEMP4_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c372660:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDDATA2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c3a7a32:
        d["HwpReturnCode"]="RC_QMEC_CODE_BUG"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c413514:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT30_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c51c830:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="ACTUAL_SM_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c6168bc:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_UE_SUE"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c77cdae:
        d["HwpReturnCode"]="RC_PM_PBA_FIRINIT_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c7c57fa:
        d["HwpReturnCode"]="RC_P10_L3ERR_EXTRACT_UNKNOWN_SYNDROME_ECC"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c896f0b:
        d["HwpReturnCode"]="RC_XIPC_BAD_PG_XLATE"
        d["FFDC"]="CHIP_UNIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8c998613:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="OMI_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ca1bc5a:
        d["HwpReturnCode"]="RC_PM_OCC_FIRINIT_BAD_MODE"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ca6fede:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_ACTIVE_CORES_ERROR"
        d["FFDC"]="ACTIVE_CORES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ca97815:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8cc884ff:
        d["HwpReturnCode"]="RC_POZ_I2C_FIFO_TIMEOUT_ERROR"
        d["FFDC"]="RETRYCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8cdc6707:
        d["HwpReturnCode"]="RC_PGPE_RESET_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ce0ba43:
        d["HwpReturnCode"]="RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="XIP_FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ce22905:
        d["HwpReturnCode"]="RC_PM_OCC_GPE0_HALT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ce70dfb:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8cef3dc4:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_MCBIST_FAILED_TO_STOP"
        d["FFDC"]="POLL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8cf947b2:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_LATENCY"
        d["FFDC"]="ROUND_TRIP_TIME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d001ce0:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d1247ec:
        d["HwpReturnCode"]="RC_XGPE_RESET_TIMEOUT"
        d["FFDC"]="XSR_IAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d16982f:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PREVIOUS_PURGE_ACTIVE_ERR"
        d["FFDC"]="PURGEREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d246d7a:
        d["HwpReturnCode"]="RC_EXP_FLASH_COMMAND_ERR"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d317a3a:
        d["HwpReturnCode"]="RC_QMEC_FUNC_CALL_ARGUMENT_ERROR"
        d["FFDC"]="CUST_RING_OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d37a73d:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="SIZE_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d580148:
        d["HwpReturnCode"]="RC_GPIO_INPUT_PORT_TIMEOUT"
        d["FFDC"]="PMIC_PAIR_BIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d5d7517:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="CORE_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d5e9ac9:
        d["HwpReturnCode"]="RC_L2_PURGE_DONE_TIMEOUT"
        d["FFDC"]="L2_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d65492e:
        d["HwpReturnCode"]="RC_P10_SBE_MCS_SETUP_NO_MC_FOUND_ERR"
        d["FFDC"]="MC2_PG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d6ea43d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET8"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d76b729:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_INIT_TIMEOUT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d7ec33f:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d7f2c3f:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d7f3144:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d862101:
        d["HwpReturnCode"]="RC_MAGIC_NUMBER_NOT_VALID"
        d["FFDC"]="SEEPROM_START_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d86c53b:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_OFFSET_UNSUPPORTED"
        d["FFDC"]="MEM_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d8f13b2:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_CRC_ERR"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d922ba9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_REMOTE_LINK_ID_ERR"
        d["FFDC"]="LOCAL_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8d98e254:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="ROW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8dae36ce:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_INVALID_DQS_OSC_TIME"
        d["FFDC"]="DQS_OSC_TIME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8db4e77c:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8db6a723:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="CMD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8dcbb9e1:
        d["HwpReturnCode"]="RC_P10_MSS_FAILED_SYNC_MODE"
        d["FFDC"]="MEM_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8dccf11c:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_IN_RECOVERY_ERR"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8dda7189:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET8"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8df3315f:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR"
        d["FFDC"]="PURGETYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e001a78:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="STATUS_ALERT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e0a972c:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="RING_SECTION_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e0fc4f9:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="XIP_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e11adb4:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RESERVED_BITS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e2bc475:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT_EQ"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e320158:
        d["HwpReturnCode"]="RC_INVALID_RING_SECTION"
        d["FFDC"]="RING_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e32eb72:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e3c3877:
        d["HwpReturnCode"]="RC_ODY_MCBIST_UNKNOWN_FAILURE"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e584046:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="HW_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e743a18:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_TA_WRONG_SIZE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e746a7f:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_VD_KEYWORD_VERSION_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e7cd8e4:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8e84a0aa:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="ATTR_DDLEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8eaec245:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET0"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8eb88dbd:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ed49846:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8edfd1c7:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ef109dd:
        d["HwpReturnCode"]="RC_PROGRAM_INTERRUPT"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8efbb57a:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_NUMBER_OF_EFD_IS_ZERO"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8effeab2:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT_MC"
        d["FFDC"]="SP_WKUP_REG_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f19ee5b:
        d["HwpReturnCode"]="RC_MSS_INVALID_GALOIS_TO_SYMBOL"
        d["FFDC"]="GALOIS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f25428a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_DD_KEYWORD_VERSION_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f36b3fd:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS"
        d["FFDC"]="REVISION_ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f488eea:
        d["HwpReturnCode"]="RC_POZ_I2C_FIFO_TIMEOUT_ERROR"
        d["FFDC"]="DEVICEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f55487a:
        d["HwpReturnCode"]="RC_CPMR_HDR_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f57f1e8:
        d["HwpReturnCode"]="RC_QME_META_COREQ_PROTECT_FAIL"
        d["FFDC"]="HW_IMAGE_ATTR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f654aad:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RECORD_SPACE"
        d["FFDC"]="REM_RECORD_SPACE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f656e8e:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RING_BUFFER_SPACE"
        d["FFDC"]="BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f6e707d:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_INVALID_ARRAY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f7ac9b2:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f8c2d87:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL_DDR5_2U"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f8e575e:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8f96b6b3:
        d["HwpReturnCode"]="RC_ODY_PPR_RESOURCE_UNAVAILABLE"
        d["FFDC"]="SRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8fae3977:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_ACTIVE_CORES_ERROR"
        d["FFDC"]="ATTR_ACTIVE_CORES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8fd0967f:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DLR_REM_ENDP_TARGET_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8fe8c4dc:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_POS_ERR"
        d["FFDC"]="IOLINK_A_UNIT_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ff0b668:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET0"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ff1fd9c:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_CLEANUP_FAILED"
        d["FFDC"]="DONE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x8ffd78db:
        d["HwpReturnCode"]="RC_P10_HW540133_WORKAROUND_ERR"
        d["FFDC"]="WORKAROUND_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9009bd93:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x902376b8:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_ACCESS_ERROR"
        d["FFDC"]="FAPI_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x903dbaab:
        d["HwpReturnCode"]="RC_P10_PARALLEL_SCAN_COMPARE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9049cf99:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="CURR_GROUP_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x904ccfe6:
        d["HwpReturnCode"]="RC_BCEBAR0_TOPOLOGY_INIT_ERROR"
        d["FFDC"]="TOPO_SCOM_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x905af00b:
        d["HwpReturnCode"]="RC_MSS_VOLT_WRONG_NUMBER_OF_VOLTAGES"
        d["FFDC"]="VOLT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x905e9d9c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SIZE_MAPPING_ERROR"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x907a3958:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NO_GROUP_ALLOWED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90897ed4:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_UNDERFLOW"
        d["FFDC"]="CF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9092a771:
        d["HwpReturnCode"]="RC_MSS_INVALID_INDEX_PASSED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x909e85c3:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="NEW_BAD_BITS_R1_BYTE0_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90ab7079:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT31_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90b067c8:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90c96b51:
        d["HwpReturnCode"]="RC_MSS_MAINT_INVALID_SYMBOL"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90cb19d9:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL_DDR5"
        d["FFDC"]="N_MODE_PMIC3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90cdfca7:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_INVALID_MUX"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90d5e579:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90e62f97:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90ee410a:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90f62d56:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x90fe810e:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_WRITE_WHILE_BUSY"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x910faca8:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT11_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x913f013f:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9148076f:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDDATA4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x916edb64:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x91751cb4:
        d["HwpReturnCode"]="RC_PM_SET_HOMER_BAR_SIZE_INVALID"
        d["FFDC"]="MEM_BAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x917abeeb:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9181cdd9:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="PROCEDURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x91822a73:
        d["HwpReturnCode"]="RC_XIPC_CODE_BUG"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9186e816:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="EXPECTED_REQID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x91976746:
        d["HwpReturnCode"]="RC_MSS_MDS_I2C_WRONG_RSP_SIZE"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x91a764e8:
        d["HwpReturnCode"]="RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL"
        d["FFDC"]="FIRST_EQ_CHIPLET_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x91cfa1b8:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLOFF_RD_ATTR_VALUE"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x91d43a8b:
        d["HwpReturnCode"]="RC_PGPE_INIT_PSTATE_AUTOSTART_TIMEOUT"
        d["FFDC"]="TIMEOUT_COUNTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x91eec05b:
        d["HwpReturnCode"]="RC_PM_OCB2_GET_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x91ff64f3:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92064af5:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9208e9b1:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="AVSRAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x921ceb77:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PURGE_REQ_TIMEOUT_ERR"
        d["FFDC"]="PURGEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x923202b5:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR0_BAD_CAS_LATENCY"
        d["FFDC"]="MIN_CAS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x924b6d6d:
        d["HwpReturnCode"]="RC_ODY_SCRATCH_REGS_INVALID_ACCESS_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9250a65d:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_WRITE_NO_DOORBELL"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9264bc92:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="LOC_FBC_CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92710b18:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="ROW_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x927695ee:
        d["HwpReturnCode"]="RC_P10_NX_CRB_KILL_DONE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x927850ed:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="HOST_DL0_ERROR_HOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92794367:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_HW_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92b9056d:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_CFAM_PATH"
        d["FFDC"]="SB_CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92bab146:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92c32d8f:
        d["HwpReturnCode"]="RC_P10_L3ERR_RD_CMD_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_6_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92c4b0a3:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="N_MODE_PMIC0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92d26460:
        d["HwpReturnCode"]="RC_ODY_DTS_READ_DATA_TIMEOUT"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92e1ea08:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="FEATURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92e3384c:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT10_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x92ff61ca:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9317a857:
        d["HwpReturnCode"]="RC_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x93238e61:
        d["HwpReturnCode"]="RC_UNEXPECTED_DATA_SIZE"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9329265f:
        d["Register FFDC"]="REG_FFDC_P10_FBC_TDM_UTILS_TL_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_FP01_CFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_FP23_CFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_MISC_CFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_FM0123_ERR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::pauc::PB_PR0123_ERR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x933113cc:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="DRAM_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x933772a5:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERR"
        d["FFDC"]="MASTER_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x934d9079:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MCC1_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9351d101:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_ERROR"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9357f532:
        d["HwpReturnCode"]="RC_P10_INVALID_OCC_ACCESS_MODE_ERROR"
        d["FFDC"]="PERV_CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x935df99b:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="REM_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x93c3f0ca:
        d["Register FFDC"]="OSC_SWITCH_SENSE_REGISTER"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SNS1LTH_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x93fb9320:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERROR"
        d["FFDC"]="ATTR_CP_REFCLOCK_SELECT_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x940faa1e:
        d["HwpReturnCode"]="RC_PSTATE_PB_PDV_TDP_CURRENT_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9414a98a:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PCIE_FREQ_LOOKUP_ERR"
        d["FFDC"]="FREQ_PCIE_MHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9419f03a:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_OVERFLOW"
        d["FFDC"]="CF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x94332eeb:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x94345cbb:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x945835d1:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_ODD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x946530de:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="CORE_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x948cc9f0:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x94a9c052:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x94b9323a:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_3DS_HEIGHT"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x94c93e02:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_BUSY"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x94e1e69a:
        d["HwpReturnCode"]="RC_AUTO_WAKEUP_VECTOR_CREATION_FAILED"
        d["FFDC"]="FUSE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x94ea9754:
        d["HwpReturnCode"]="RC_PM_AVSBUS_STATUS_READ_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x94fe4a3e:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ECO_CHIP_CONTAINED_CONFIG_ERROR"
        d["FFDC"]="BACKING_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95087ea5:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="CMP_HASH_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95148483:
        d["HwpReturnCode"]="RC_PGPE_INIT_HALT"
        d["FFDC"]="PGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x951773bd:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP1_BUF_SIZE"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95250229:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_CONSISTENCY_ERR"
        d["FFDC"]="X_AGGREGATE_CHECK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95267c91:
        d["HwpReturnCode"]="RC_EXTRACT_SBE_RC_OTP_PIB_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x952cf16f:
        d["HwpReturnCode"]="RC_MSS_MCBIST_PROGRAM_TOO_BIG"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9531d912:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_OVERFLOW"
        d["FFDC"]="CF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9535ad97:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9548ac62:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x954b4ed3:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x955932e3:
        d["HwpReturnCode"]="RC_MSS_LOOKUP_FAILED"
        d["FFDC"]="KEY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x955fc82a:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95623060:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ2PS_LT_PSTATE_MIN_ERROR"
        d["FFDC"]="PSTATE32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x956cafab:
        d["HwpReturnCode"]="RC_PM_OCB2_GET_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9573a2cc:
        d["HwpReturnCode"]="RC_PM_PBA_BCDE_STOP_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9587a519:
        d["HwpReturnCode"]="RC_P10_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="BITS_DECODED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9592a3d9:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="UNSUPPORTED_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95bab6a5:
        d["HwpReturnCode"]="RC_PM_MALF_DEAD_CORES_FOUND"
        d["FFDC"]="DEAD_CORE_VECTOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95bb84b8:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="LAST_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95c7aa38:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR15_ECS_ERROR_THRESHOLD"
        d["FFDC"]="THRESHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95c7cc6d:
        d["HwpReturnCode"]="RC_CORE_MULTICAST_SCAN_INVALID_ARGS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95d4014b:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_MC_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95dac51f:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR12_BAD_VREFCS"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95e3313c:
        d["HwpReturnCode"]="RC_PMIC_HEALTH_CHECK_FAIL_MNFG_MODE_DDR5_4U"
        d["FFDC"]="N_MODE_PMIC1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x95fdee73:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="TRAINING_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96000a27:
        d["HwpReturnCode"]="RC_XGPE_INIT_DEBUG_HALT"
        d["FFDC"]="TIMEOUT_COUNTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96245f34:
        d["HwpReturnCode"]="RC_MSS_INVALID_RANK"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9635e307:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x963d2c0e:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_UNDERFLOW"
        d["FFDC"]="PSTATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9660006d:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_BAR_TYPE"
        d["FFDC"]="BAR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96671744:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_FREQ_MISMATCH"
        d["FFDC"]="COMPAT_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x966fa776:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR34_RTT_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x966feaf2:
        d["HwpReturnCode"]="RC_P10_DOWNSTREAM_TMPL1_REQUIRED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96761956:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="CHIP_UT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x967cd36c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96aa3bf7:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="SUPPORTED_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96de95be:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_BUSY_AFTER_RESET"
        d["FFDC"]="PBASLVREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96dee7f0:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96e14caf:
        d["HwpReturnCode"]="RC_EXP_DRAMINIT_BAD_RTT_WR"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x96f6123c:
        d["HwpReturnCode"]="RC_MSS_POWER_SLOPE_NOT_SET"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x971561e5:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="BANK_GROUP_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97214af9:
        d["HwpReturnCode"]="RC_P10_PUT_REG_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="REG_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9735138f:
        d["HwpReturnCode"]="RC_POZ_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="CBS_CS_IDLE_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97391d44:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_UNDERFLOW"
        d["FFDC"]="PDW_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97408908:
        d["HwpReturnCode"]="RC_P10_SMP_LINK_FIRS_UNSUPPORTED_ACTION"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97412b0a:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97427438:
        d["HwpReturnCode"]="RC_XGPE_RESET_TIMEOUT"
        d["FFDC"]="XGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x975293fb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="RANK0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97561da2:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_PAYLOAD_SIZE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x975a047e:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_STATUS"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x975fc491:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9767ac5b:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET2"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x976a0587:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="CURR_GROUP_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x977f06a5:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x979886b7:
        d["HwpReturnCode"]="RC_PPEBAR_TOPOLOGY_INIT_ERROR"
        d["FFDC"]="PPE_BAR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x979f1635:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_UPSTREAM_CRC"
        d["FFDC"]="OMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x979fc79f:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_DOWNSTREAM_EDPL"
        d["FFDC"]="EDPL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97bbdca5:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97c9746e:
        d["HwpReturnCode"]="RC_POZ_I2C_FAILED_TO_LOCK_ENGINE_TIMEOUT_ERROR"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97cab59a:
        d["HwpReturnCode"]="RC_STATIC_POWER_GATING_PFET_CNFG_ERR"
        d["FFDC"]="MISC_PFET_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x97fb16fc:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_CHIPLET_ID_ERR"
        d["FFDC"]="ENTRY_B0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98106036:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="SUPPORTED_FREQS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98130ecf:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA25"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x982435e1:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="TOR_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x982474b6:
        d["HwpReturnCode"]="RC_ODY_MCBIST_TIMEOUT"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98360f18:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x983fecad:
        d["HwpReturnCode"]="RC_MSS_MDS_I2C_CMD_FAIL"
        d["FFDC"]="RESPONSE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9863ccc3:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="REQUIRED_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x988d7e25:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98a0a576:
        d["HwpReturnCode"]="RC_UNEXPECTED_ATTR_FILE_TYPE"
        d["FFDC"]="HEADER_FILE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98b886e1:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET0"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98c07428:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_CONFIGURATION"
        d["FFDC"]="NUMACTIVEDBYTEDFI1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98c56d0a:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98cacd7d:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_BEFORE_REACHING_MIN_ECS"
        d["FFDC"]="REQUESTED_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98ce595e:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="CONFIG1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98d08cbe:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98d811ab:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_M_PATH_1_STEP_CHECK_ERROR"
        d["FFDC"]="TOD_ERROR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98eafae8:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x98edc279:
        d["HwpReturnCode"]="RC_INVALID_2U_PMIC_TARGET_CONFIG"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9907baf5:
        d["HwpReturnCode"]="RC_P10_L3ERR_EXTRACT_SYNDROME_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x991559f2:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_FUSED_NOT_EVEN_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9918cb83:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT_CORE"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99409e21:
        d["HwpReturnCode"]="RC_SET_ATOMIC_LOCK_FAIL"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99478dc4:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_ADDRESS_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x995fdbc0:
        d["HwpReturnCode"]="RC_MSS_INVALID_PORT_INDEX_PASSED"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x997a490d:
        d["HwpReturnCode"]="RC_XIPC_TOR_APPEND_RING_FAILED"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99a80c94:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_UPSTREAM_EDPL"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99b4d2bb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA23"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99be6f5f:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="MODE_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99c2e1d7:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_EN_TX_DM_PREAMBLE_PATTERN"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99cb7859:
        d["HwpReturnCode"]="RC_MSS_EXP_UNKNOWN_THERMAL_SENSOR"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99d545f7:
        d["HwpReturnCode"]="RC_XIPC_CHIPNAME_MISMATCH_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99dd16c1:
        d["HwpReturnCode"]="RC_NCU_PURGE_DONE_TIMEOUT"
        d["FFDC"]="NCU_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99e5bb66:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DECODE_ERROR"
        d["FFDC"]="ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99e814c7:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_3DS_HEIGHT"
        d["FFDC"]="HEIGHT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99e82468:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x99ed506b:
        d["HwpReturnCode"]="RC_MSS_FREQ_INDEX_TOO_LARGE"
        d["FFDC"]="NUM_MAX_FREQS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a005a98:
        d["HwpReturnCode"]="RC_PIBMEM_ECC_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a0a98f0:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="COMPARE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a0b5808:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_OFFSET_UNSUPPORTED"
        d["FFDC"]="START_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a0b9fd9:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="CONFIG01_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a129d4f:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR8_WR_PREAMBLE_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a3b4d68:
        d["HwpReturnCode"]="RC_P10_REVERT_SBE_MCS_SETUP_NO_MI_TARGETS_FOUND"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a40cc6a:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="RSP_REQUEST_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a43c46c:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ECO_CHIP_CONTAINED_CONFIG_ERROR"
        d["FFDC"]="CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a4c3218:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a5f67a4:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a5f9309:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT25_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a772984:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TOTAL_RECOVERY_ATTEMPTS_EXCEEDED"
        d["FFDC"]="ATTEMPTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9a7b4465:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="MIRROR_PLACEMENT_POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9aa1062c:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9acf20d0:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_INADEQUATE_EFD_BUFFER_SIZE"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ad27246:
        d["HwpReturnCode"]="RC_DONE_HALT_NOT_SET"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9adbcd83:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="EXP_BAR_ADDR_RANGECHECK_LOW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9add2163:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9adf6e43:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_DW_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9af1ffa6:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET8"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b1d1263:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_MEM_ADDR_RANGE_OUT_OF_BOUNDS"
        d["FFDC"]="IMAGE_ST_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b1e4174:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_HOMER_SCOM_ERROR"
        d["FFDC"]="SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b1e7ac1:
        d["HwpReturnCode"]="RC_EXPECTED_STOP_LEVEL_NOT_REACHED"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b2d7588:
        d["HwpReturnCode"]="RC_SBE_ARRAYINIT_POLL_THRESHOLD_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b4e267a:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET8"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b617bb8:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b7aa72e:
        d["HwpReturnCode"]="RC_SELF_RESTORE_INIT_FAILED"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b8aa040:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9b9a7ce5:
        d["HwpReturnCode"]="RC_DDIMM_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ba937cc:
        d["HwpReturnCode"]="RC_P10_PCI_REFCLOCK_ERR"
        d["FFDC"]="CHIPLET_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9bb4877b:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9bb69571:
        d["HwpReturnCode"]="RC_MSS_OUTPUT_OVERFLOW_CALC_UTIL"
        d["FFDC"]="THROTTLES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9bf181fd:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_MISSING_FLAG"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9bf6f9a5:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_INIT_FAIL"
        d["FFDC"]="EXT_ERR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9bf82964:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R33_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9bf876e2:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_DRAM_GEN"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9bfcc519:
        d["HwpReturnCode"]="RC_P10_DL_PGRESET_STUCK"
        d["FFDC"]="PHB_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9bfdde54:
        d["HwpReturnCode"]="RC_INVALID_ATTR_INDEX"
        d["FFDC"]="ATTRIBUTEID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c1bea27:
        d["HwpReturnCode"]="RC_PSTATE_PB_VRT_HEADER_DATA_INVALID"
        d["FFDC"]="MAGIC_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c2e77cd:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_DOWNLOAD_INVALID_STATE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c33faa7:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c47ef3d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c545e4b:
        d["HwpReturnCode"]="RC_CORECACHE_PFET_SEQ_STATE_ERROR"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c601e11:
        d["HwpReturnCode"]="RC_UNEXPECTED_DATA_SIZE"
        d["FFDC"]="ACTSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c642c6c:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EQ_CONFIG"
        d["FFDC"]="EQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c70043d:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP2_BUF"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c887d7d:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9c9a60f0:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR6_TRTP_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ca8c9d2:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_IC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ce1f298:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_FW_STATUS_INVALID_SIZE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9cfa4982:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9cfcd408:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="BASE_MEMORY_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d099e55:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="CHIPLET_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d1d8de7:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_ERROR"
        d["FFDC"]="USE_BYTE_BUFFER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d416d1d:
        d["HwpReturnCode"]="RC_LINK_TRAINING_DONE_POLL_FAILED"
        d["FFDC"]="FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d450fd6:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="AVAIL_MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d6243c6:
        d["HwpReturnCode"]="RC_EXP_FLASH_COMMAND_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d660826:
        d["HwpReturnCode"]="RC_P10_PHB_HV_UTILS_INVALID_ARGS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d832857:
        d["HwpReturnCode"]="RC_CPLT_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d8a9738:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RESERVED_BITS"
        d["FFDC"]="FUNCTION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d8f2192:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d8f861b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="LOC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9d9026b6:
        d["HwpReturnCode"]="RC_P10_SBE_MCS_SETUP_NO_MC_FOUND_ERR"
        d["FFDC"]="MC0_PG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9da6bd42:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9db62dac:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9dc62aa7:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9de645db:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="MC_FREQ1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9de78300:
        d["HwpReturnCode"]="RC_INVALID_RING_SECTION"
        d["FFDC"]="IMG_POINTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e27cd13:
        d["HwpReturnCode"]="RC_MSS_TCCDL_OVERFLOW_CALC"
        d["FFDC"]="MTB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e3e8284:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_UNDERFLOW"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e3fadd9:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e7462a3:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_DLL_LOCK_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e89a0be:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_EVN_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e917608:
        d["HwpReturnCode"]="RC_PM_MALF_NO_DEAD_CORES"
        d["FFDC"]="DEAD_CORE_VECTOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e939ae1:
        d["HwpReturnCode"]="RC_ODY_OUT_OF_BOUNDS_RANK_PASSED_TO_SWIZZLE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e96a9b8:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_FSP_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9e97e352:
        d["HwpReturnCode"]="RC_SPI_SPRM_CFG_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ea3a987:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_CORE_ECO_MODE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ea918c7:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_RECOVERY_ATTEMPTS_EXCEEDED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9eb92417:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_SYNDROME_NOT_FOUND"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9eb9c933:
        d["HwpReturnCode"]="RC_XIPC_CHIPNAME_MISMATCH_ERROR"
        d["FFDC"]="MVPD_NAME"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ed1c8f9:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_SMBUS_SYNC_MSG_NOT_FOUND"
        d["FFDC"]="SYNOPSYS_MESSAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ed6b001:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ee150b7:
        d["HwpReturnCode"]="RC_MAGIC_NUMBER_NOT_VALID"
        d["FFDC"]="MAGIC_NUMBER_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ee48ff9:
        d["Register FFDC"]="FSI2PIB_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_FSI2PIB_STATUS_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x9ee5d976:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9f196142:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_SIZE_ERROR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9f198f36:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9f24ed33:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9f55af33:
        d["HwpReturnCode"]="RC_P10_RNG_INIT_SELF_TEST_FAILED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9f59579f:
        d["Register FFDC"]="ODY_ROOT_CTRL_REGS_SCOM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL4_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL5_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL6_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL7_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL8_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL9_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0x9f6c5d11:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_OVERFLOW"
        d["FFDC"]="FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9f88fe40:
        d["HwpReturnCode"]="RC_OTP_ECC_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fb3650d:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fb7b89a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="TL_FIR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fba8ae1:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fc55c48:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fc5be4d:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fc7f4eb:
        d["HwpReturnCode"]="RC_P10_HW540133_LLB_WA_ERR"
        d["FFDC"]="INTERMEDIATE_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fdae025:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fdd755e:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="QME_FLAG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fe0c627:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_READ_MISCOMPARE"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9fe4dd59:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="CMP_HASH_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0x9ffc9b90:
        d["HwpReturnCode"]="RC_QME_INVALID_EX_CORE_CONFIG"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa003f2a7:
        d["HwpReturnCode"]="RC_EXPECTED_STOP_LEVEL_NOT_REACHED"
        d["FFDC"]="ACTUAL_STOP_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa00f8b8c:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="CMD_SCOPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa01e53cd:
        d["HwpReturnCode"]="RC_MSS_POWER_INTERCEPT_NOT_SET"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa03dc5c4:
        d["HwpReturnCode"]="RC_P10_INT_SCRUB_NOT_FINISHED_ERR"
        d["FFDC"]="FLUSH_CTRL_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa0436f73:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa043f13d:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa0444caa:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa04d32cb:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_TO_GET_DDR_TYPE"
        d["FFDC"]="OCMB_CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa05f1025:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_STATUS"
        d["FFDC"]="EXPECTED_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa062103d:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="COMMON_CLS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa0641531:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_OVERFLOW"
        d["FFDC"]="ATTR_ADJ_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa064b183:
        d["HwpReturnCode"]="RC_OTP_ECC_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa070029b:
        d["HwpReturnCode"]="RC_PM_SUSPEND_XGPE_FAILS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa07dd8df:
        d["HwpReturnCode"]="RC_BAD_VPD_READ"
        d["FFDC"]="EXPECTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa08d5686:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="RELATIVE_PORT_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa096b028:
        d["HwpReturnCode"]="RC_P10_HW540133_COMBO_WA_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa0a4a034:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa0b4d833:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="MCHP_STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa0c44472:
        d["HwpReturnCode"]="RC_P10_INVALID_OCC_ACCESS_MODE_ERROR"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa0faed64:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa0fbd696:
        d["HwpReturnCode"]="RC_SBE_ARRAYINIT_POLL_THRESHOLD_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa11a7fff:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="REM_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa124441f:
        d["HwpReturnCode"]="RC_ODY_DQS_DRIFT_TRACK_DID_NOT_STOP"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa12af704:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa1329609:
        d["HwpReturnCode"]="RC_VIN_BULK_BELOW_TOLERANCE"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa13cafed:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa14905a2:
        d["HwpReturnCode"]="RC_PLL_LOCK_ERR"
        d["FFDC"]="PLL_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa169f4b1:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RINGTABLE_VERSION_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa19ad222:
        d["HwpReturnCode"]="RC_PM_OCB0_GET_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa1bd1ac6:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa1d9d53b:
        d["HwpReturnCode"]="RC_PM_PBA_BCDE_STOP_TIMEOUT"
        d["FFDC"]="POLLVALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa1f0cd04:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_TIMEOUT"
        d["FFDC"]="DELAY_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa208418b:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa21dcfbc:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_EXCEPTION_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa22b53bd:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_TM_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa22c3fa1:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_NO_DOORBELL"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa233a7a0:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="AMB_COND_START"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2454874:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa24f079c:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_CMD_FAIL"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa26487ef:
        d["HwpReturnCode"]="RC_EXTRACT_SBE_RC_SPI_SPRM_CFG_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa281ecae:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2930bb0:
        d["HwpReturnCode"]="RC_PMIC_DROPPED_INTO_N_MODE_DDR5"
        d["FFDC"]="PMIC_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2b24a70:
        d["HwpReturnCode"]="RC_PSTATE_PB_FREQ2PS_LT_PSTATE_MIN_ERROR"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2b6f67b:
        d["HwpReturnCode"]="RC_XGPE_INIT_DEBUG_HALT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2cc89e3:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_ECO_TARGET"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2cf422c:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_ECO_ERR"
        d["FFDC"]="REL_CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2eee6d1:
        d["HwpReturnCode"]="RC_EXP_UNKNOWN_REVISION"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2f12f48:
        d["HwpReturnCode"]="RC_ODY_TOO_MANY_RANKS_FOR_SUBTEST_SUPPORT"
        d["FFDC"]="RANK_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2f33b0d:
        d["HwpReturnCode"]="RC_MSS_FREQ_NO_COMMON_SUPPORTED_CL"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2f4323b:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa2fb72a2:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="EXT_CMD_LANES_00_15"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3283737:
        d["HwpReturnCode"]="RC_OCMB_IS_NOT_ODYSSEY"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3290ed9:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa32f1f0c:
        d["HwpReturnCode"]="RC_XGPE_BAD_MODE"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3319ace:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_CI"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa34c6c49:
        d["HwpReturnCode"]="RC_P10_SBE_MCS_SETUP_NO_MC_FOUND_ERR"
        d["FFDC"]="MC1_PG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa37e0c17:
        d["HwpReturnCode"]="RC_P10_OCMB_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa380bab7:
        d["HwpReturnCode"]="RC_INVALID_SCAN_TARGET_TYPE"
        d["FFDC"]="RS4_HEADER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa38b2103:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR11_BAD_VREFCA"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa393e844:
        d["HwpReturnCode"]="RC_P10_PSIHBCR_INBOUND_QUEUE_NOT_EMPTY"
        d["FFDC"]="TPBR_PSIHB_STATUS_CTL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3a45211:
        d["HwpReturnCode"]="RC_ODY_PPR_RESOURCE_UNAVAILABLE"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3aed6a5:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NOT_ENOUGH_MEMORY"
        d["FFDC"]="MIRROR_PLACEMENT_POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3c125df:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="EFD_MEMORY_SPACE_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3c4d31c:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="SYSPHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3d29481:
        d["HwpReturnCode"]="RC_P10_PARALLEL_SCAN_COMPARE_ERR"
        d["FFDC"]="CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3d7622b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_REMOTE_LINK_ID_ERR"
        d["FFDC"]="LOCAL_SUBLINK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3eba040:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="START_BAD_BITS_R0_BYTE0_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa3fd2632:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4006cce:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4092481:
        d["HwpReturnCode"]="RC_P10_PPE_STATE_HALT_TIMEOUT_ERR"
        d["FFDC"]="SBE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa43b9830:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_REM_ENDP_TARGET_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa462addc:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_MCBIST_STUCK_IN_PROGRESS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa46ea623:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQ_LIST_PASSED"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa47d588d:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_XMETA_BOTH_HALVES_SELECTED"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa498670a:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="SPI_ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4991daf:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_FW_ADAPTER_PROPERTIES_RSP_DATA_LENGTH"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4a54277:
        d["HwpReturnCode"]="RC_POZ_I2C_WAIT_FOR_CMD_COMP_TIMEOUT_ERROR"
        d["FFDC"]="ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4b24472:
        d["HwpReturnCode"]="RC_MSS_INVALID_CLOCK_PERIOD"
        d["FFDC"]="CLOCK_PERIOD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4c4137b:
        d["HwpReturnCode"]="RC_XIPC_MVPD_CHIPLET_ID_MESS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4ccac46:
        d["HwpReturnCode"]="RC_P10_PPE_STATE_HALT_TIMEOUT_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4d55d21:
        d["HwpReturnCode"]="RC_ODY_DTS_READ_DATA_TIMEOUT"
        d["FFDC"]="TIMEOUT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4e47752:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_POST_CONDITION_ERR"
        d["FFDC"]="EVEN_NOT_ODD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4eb7e4e:
        d["HwpReturnCode"]="RC_XIPC_TOR_APPEND_RING_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4fc6bc9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_SAME_GROUP_ID_ERR"
        d["FFDC"]="REM_FBC_GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa4fd047f:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_FSP_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5087e87:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_DFI_INIT_TIMEOUT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5121804:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR35_RTT_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa52658c2:
        d["HwpReturnCode"]="RC_I2C_PMIC_INVALID_READ_SIZE"
        d["FFDC"]="SIZE_RETURNED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa535ea14:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_INIT_TIMEOUT_ERROR"
        d["FFDC"]="TOP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa53a6387:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP3_BUF"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5568d9c:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_VERY_INVALID_VDM_DATA"
        d["FFDC"]="TURBO_LARGE_THRESHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa56b772a:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa56ca096:
        d["HwpReturnCode"]="RC_PM_PBA_BCUE_STOP_TIMEOUT"
        d["FFDC"]="TP_TPBR_PBA_PBAO_BCUE_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa57dfffb:
        d["HwpReturnCode"]="RC_POZ_IO_TX_TDR_ERROR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa57eb28f:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa589e406:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="AVSRAIL_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5a56de9:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT_MC"
        d["FFDC"]="ENTITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5aaff3b:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="ROW_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5b1bd0e:
        d["HwpReturnCode"]="RC_P10_SBE_FABRICINIT_FBC_STOPPED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5bfe641:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5cb33f5:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TOR_MAGIC_QME_DEFINED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa5fc1328:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa60cf589:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6150441:
        d["HwpReturnCode"]="RC_I2C_SCOM_EXPECTED_IBM_INDICATOR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa626d3fc:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT_MC"
        d["FFDC"]="CORE_SSHSRC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa650c1b3:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_VERY_INVALID_VDM_DATA"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa651dc6b:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="MAX_QME_IMG_SIZE_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6803c44:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VCS_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6822517:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="HW_IMAGE_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6860ee0:
        d["HwpReturnCode"]="RC_MSS_EXP_CATASTROPHIC_DRAMINIT_TRAINING_FAIL"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa69066b0:
        d["HwpReturnCode"]="RC_OPIT_INTERRUPT_NOT_CLEAR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa69ab8a2:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="BACKING_CACHES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6a1b14f:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="FREQUENCY_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6a33995:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="QME_BCEBAR0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6b060be:
        d["HwpReturnCode"]="RC_P10_HW540133_CCALCOMP_TIMEOUT"
        d["FFDC"]="CHIPLET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6d170cc:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa6d2ae94:
        d["Register FFDC"]="OSC_SWITCH_SENSE_REGISTER_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_SNS1LTH_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xa6f5d190:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa71488e4:
        d["HwpReturnCode"]="RC_P10_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="SCOM_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa71bc69c:
        d["HwpReturnCode"]="RC_PMSR_SHIFT_INACTIVE_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa72a6a72:
        d["HwpReturnCode"]="RC_MSS_FAILED_DATA_INTEGRITY_CHECK"
        d["FFDC"]="BYTE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa73f4a15:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VDD_START"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa780534c:
        d["HwpReturnCode"]="RC_MSS_MAINT_DO_STEER_ALL_SPARES_DEPLOYED"
        d["FFDC"]="SYMBOL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa7874a71:
        d["HwpReturnCode"]="RC_PM_AVSBUS_STATUS_READ_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa7d5d800:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_STEP_COUNT_ERROR"
        d["FFDC"]="TOD_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa7ddb2af:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET2"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa7e193e0:
        d["HwpReturnCode"]="RC_PM_AVSBUS_SLAVE_BAD_CRC_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa7ea3bec:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_NOT_MASTER_CHIP"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa7f7e585:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa814e821:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8242269:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="OMI_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa82b1491:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA31"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa82c056b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_BROADCAST_MODE_ERR"
        d["FFDC"]="TABLE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8331959:
        d["HwpReturnCode"]="RC_BAD_INPUT_BUFFER"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8391735:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP4_BUF"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8490d5e:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa85ae1fe:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8645a1b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR10_BAD_VREFDQ"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa86b74a0:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_CCM_NOT_SUPPORTED_ERR"
        d["FFDC"]="DL_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa87f6002:
        d["HwpReturnCode"]="RC_SPI_ECC_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa890388d:
        d["HwpReturnCode"]="RC_PM_DPLL_FREQ_UPDATE_FAIL"
        d["FFDC"]="DPLL_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa89ec771:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MCC0_NUM_MCC_IN_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8a77826:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_PAYLOAD_SIZE"
        d["FFDC"]="PAYLOAD_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8b62ea7:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_ZERO_DRAM_WIDTH"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8bb5a69:
        d["Register FFDC"]="REG_FFDC_P10_IO_QUIESCE_LANE_DL_STATUS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_FIR_REG_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_PHY_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_SEC_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LAT_MEASURE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_OPTICAL_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_TX_LANE_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_TX_LANE_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_RX_LANE_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_RX_LANE_CONTROL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_ERROR_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_ERROR_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_DLL_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK0_QUALITY",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::iohs::DLP_LINK1_QUALITY",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xa8be845a:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_MISSING_FLAG"
        d["FFDC"]="PROCEDURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8c27faa:
        d["Register FFDC"]="REG_FFDC_EXP_CCS_FAILURE"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_MODEQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_STATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_CNTLQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBMCATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_00",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_01",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_02",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_03",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_04",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_05",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_06",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_07",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_08",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_09",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_10",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_11",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_12",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_13",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_14",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_15",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_16",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_17",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_18",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_19",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_20",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_21",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_22",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_23",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_24",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_25",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_26",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_27",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_29",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR0_31",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_00",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_01",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_02",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_03",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_04",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_05",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_06",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_07",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_08",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_09",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_10",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_11",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_12",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_13",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_14",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_15",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_16",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_17",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_18",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_19",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_20",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_21",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_22",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_23",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_24",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_25",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_26",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_27",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_28",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_29",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_30",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_CCS_INST_ARR1_31",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MBA_MCBERRPT0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MBA_MCBERRPT1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xa8cb9c8a:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8ed1e72:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8ee3c50:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="MRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa8ff01e8:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa909f9a9:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_SPACE_OVERFILL"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa9217324:
        d["HwpReturnCode"]="RC_SPI_RSC_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa92aaeb2:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa93fa31e:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa94328c9:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_DLR_PSAVE_MODE_ERR"
        d["FFDC"]="DLR_PSAVE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa9550cce:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="OVERTEMP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa9576694:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="GEN_HASH_6"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa96dfddc:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa97db362:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_CONFIGURATION_ERR"
        d["FFDC"]="MASTER_CHIP_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa987de78:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT_MC"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa994ab96:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="RANK0_BADDQ64_80"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa995ebcd:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="TOPOSCOMS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa9af7c9b:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER_LIMIT"
        d["FFDC"]="PORT_POWER_LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa9d145dd:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LOOPBACK_FAIL"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa9d528e7:
        d["HwpReturnCode"]="RC_FILT_PLL_LOCK_ERR"
        d["FFDC"]="PLL_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa9eac0a4:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xa9fca96f:
        d["HwpReturnCode"]="RC_CORE_MULTICAST_SCAN_INVALID_ARGS"
        d["FFDC"]="RS4_HEADER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa1752ab:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa1a27c2:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa2f8151:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_PAIR_ERR"
        d["FFDC"]="ACTIVE_CORES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa32aa11:
        d["HwpReturnCode"]="RC_PGPE_INIT_DEBUG_HALT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa3b2a82:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NON_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="ADDRESS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa545b37:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR5_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_VDDQ_ENDURANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa85f4e8:
        d["HwpReturnCode"]="RC_P10_WAIT_FOR_ERAT_IDLE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa8d5e69:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="ACTIVE_CORES_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaa8eddb0:
        d["HwpReturnCode"]="RC_P10_L3ERR_EXTRACT_TA_WRONG_SIZE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaabfdfa8:
        d["HwpReturnCode"]="RC_P10_PARALLEL_SCAN_COMPARE_ERR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaac0e157:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaad6dc36:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_OVERFLOW"
        d["FFDC"]="LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaae74c2a:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaae8109c:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaaec2f12:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLON_ATTR_VALUE"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaaf9c361:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_ERR"
        d["FFDC"]="DESKEW_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab05d1ff:
        d["Register FFDC"]="REG_FFDC_EXP_OMI_TRAIN_ERR_INFO"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_CMN_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_PMU_CNTR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_CONFIG0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_CONFIG1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_ERROR_MASK",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_ERROR_HOLD",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_ERROR_CAPTURE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_EDPL_MAX_COUNT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_TRAINING_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_DLX_CONFIG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_DLX_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_ERROR_ACTION",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_DEBUG_AID",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_DLX_DL0_CYA_BITS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xab2a29f5:
        d["HwpReturnCode"]="RC_P10_SBE_MCS_SETUP_NO_MC_FOUND_ERR"
        d["FFDC"]="IPL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab2d43f6:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab5de610:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="POWERSAVE_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab7178bc:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="STATUS_REGISTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab7508f6:
        d["HwpReturnCode"]="RC_XGPE_INIT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab7e7c73:
        d["HwpReturnCode"]="RC_P10_IOP_TOP_PHY_ERROR"
        d["FFDC"]="PEC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab7e90c5:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab8455d3:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="TOPOSCOMS3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab8d7c4a:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="TOPOSCOMS2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xab950492:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xabad012b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLOFF_NT_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xabc65ff1:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xabcb9f4c:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_INCONSISTENT_RANK"
        d["FFDC"]="MISMATCHED_PORT_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xabe444bc:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="GEN_HASH_5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xabea2fc8:
        d["HwpReturnCode"]="RC_SHADOW_DIS_CORE_SHADOW_STATE_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xabeddb16:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_TYPE"
        d["FFDC"]="DIMM_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xabf278dd:
        d["HwpReturnCode"]="RC_CHTM_TRACE_TYPE_NOT_SUPPORTED"
        d["FFDC"]="CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xabfd1f07:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_DLL_LOCK_FAIL"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac174ed5:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_UPSTREAM_EDPL"
        d["FFDC"]="THRESHHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac18cc3f:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_STEP_COUNT_ERROR"
        d["FFDC"]="STEPS_PER_SYNC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac241af8:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac2d9da5:
        d["HwpReturnCode"]="RC_ODY_INVALID_VERBOSITY_CONFIG"
        d["FFDC"]="PORT1_VERBOSITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac310a02:
        d["HwpReturnCode"]="RC_ODY_GET_MAIL_FAILURE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac3374e0:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_COMPARE_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="SUBTEST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac351a98:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac6caf07:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_UNDERFLOW"
        d["FFDC"]="PDW_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac6dedfc:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_ALREADY_AT_BOUNDARY"
        d["FFDC"]="BOUNDARY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac7dced4:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xac9080ec:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="PLAT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaca01651:
        d["HwpReturnCode"]="RC_I2C_GET_SCOM_INVALID_READ_SIZE"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xacaa777e:
        d["HwpReturnCode"]="RC_EXTRACT_SBE_RC_SPI_ECC_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xacb05f16:
        d["HwpReturnCode"]="RC_POWERBUS_PURGE_DONE_TIMEOUT"
        d["FFDC"]="POWERBUS_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xacb91f66:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NOT_ENOUGH_MEMORY"
        d["FFDC"]="REQ_MEMORY_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xacc29bf0:
        d["HwpReturnCode"]="RC_SECURE_BOOT_FAIL"
        d["FFDC"]="SB_MSG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xace95c5f:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="CHIPLET_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xad05a382:
        d["HwpReturnCode"]="RC_PSTATE_MVPD_CHIPLET_VOLTAGE_NOT_EQUAL"
        d["FFDC"]="CURRENT_EQ_CHIPLET_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xad26e5a8:
        d["HwpReturnCode"]="RC_IO_PPE_UNDEGRADE_FAIL"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xad3e5ff9:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_ADDL_INFO"
        d["FFDC"]="CURRENT_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xad4f873d:
        d["HwpReturnCode"]="RC_EXP_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xad667030:
        d["HwpReturnCode"]="RC_XGPE_PBA_INIT_FAILED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xad7f500b:
        d["HwpReturnCode"]="RC_MSS_MCBIST_EXCEEDED_MAX_SUBTESTS"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xad8789a2:
        d["HwpReturnCode"]="RC_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xadc5c630:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NO_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_SYS_NEXT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xadd64bab:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_CLEANUP_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaded5475:
        d["HwpReturnCode"]="RC_PM_SET_HOMER_BAR_SIZE_INVALID"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xadf5b97b:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xadfd1ab2:
        d["HwpReturnCode"]="RC_INVALID_POUNDV_VERSION"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xae045ad9:
        d["HwpReturnCode"]="RC_P10_IO_TX_TDR_SCREEN_ERROR"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xae240cf6:
        d["HwpReturnCode"]="RC_P10_SBE_MCS_SETUP_NO_MC_FOUND_ERR"
        d["FFDC"]="IS_MPIPL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xae3b7031:
        d["Register FFDC"]="OCB_CHANNEL3_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR3_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLBR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLCS3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHBR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHCS3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSES3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xae5e294e:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xae66b2cc:
        d["HwpReturnCode"]="RC_MSS_FREQ_NOT_EQUAL_MAX_DOMAIN_FREQ"
        d["FFDC"]="DOMAIN_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xae7777ad:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="TURBO_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xae8c1619:
        d["HwpReturnCode"]="RC_PM_OCB2_PUT_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xae8d08f8:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xae907089:
        d["HwpReturnCode"]="RC_PM_PBA_BCUE_STOP_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaeab9624:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="BANK_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaeb820d8:
        d["HwpReturnCode"]="RC_XGPE_INIT_DEBUG_HALT"
        d["FFDC"]="XGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaeda5642:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_CORE_ECO_MODE"
        d["FFDC"]="ECO_MODE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaeeab277:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLON_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaeefb32a:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R05_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaef70dad:
        d["HwpReturnCode"]="RC_P10_GETSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf05ca4b:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf1d6f10:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf2af2e2:
        d["HwpReturnCode"]="RC_VIN_BULK_BELOW_TOLERANCE"
        d["FFDC"]="ACTUAL_MV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf43b823:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="N_MODE_PMIC1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf4ab9c8:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_ERROR"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf4d4966:
        d["HwpReturnCode"]="RC_XIPC_BAD_PG_XLATE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf5aaf12:
        d["HwpReturnCode"]="RC_PGPE_PBA_INIT_FAILED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf64493c:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_UNDERFLOW"
        d["FFDC"]="PSTATE_MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf671902:
        d["HwpReturnCode"]="RC_P10_SPR_NAME_MAP_ACCESS_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaf837662:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LANE_INV_FAIL"
        d["FFDC"]="BOOT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xafa83052:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="REQUESTED_MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xafaa55ea:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="DATA0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xafdd4e88:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LOOPBACK_FAIL"
        d["FFDC"]="BOOT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xafe297d5:
        d["HwpReturnCode"]="RC_MSS_MRW_SAFEMODE_UTIL_THROTTLE_NOT_SUPPORTED"
        d["FFDC"]="MIN_UTIL_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xafe732f0:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_UNSUPPORTED_SCOM_ERR"
        d["FFDC"]="ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xaff698b4:
        d["HwpReturnCode"]="RC_PM_PBA_INIT_INCORRECT_MODE"
        d["FFDC"]="PM_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb000adcd:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_RX_LANE_BUSY_TIMEOUT_ERROR"
        d["FFDC"]="RX_LANE_BUSY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0015c31:
        d["HwpReturnCode"]="RC_P10_IO_TX_TDR_SCREEN_ERROR"
        d["FFDC"]="TDR_LANE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb00c3180:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PAU_MMIO_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb014a164:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR35_RTT_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb028238e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR6_WR_RECOVERY_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb028d446:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb029372b:
        d["HwpReturnCode"]="RC_MSS_NO_POWER_THERMAL_ATTR_FOUND"
        d["FFDC"]="STACK_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0316d5d:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_ACCESS_FAIL"
        d["FFDC"]="FAPI_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb034bb6d:
        d["HwpReturnCode"]="RC_P10_PURGE_COMPLETE_TIMEOUT"
        d["FFDC"]="COUNT_THRESHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0383d53:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb05da7a5:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="FAILED_TEST_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0a55a2d:
        d["HwpReturnCode"]="RC_P10_ADU_FBC_NOT_INITIALIZED"
        d["FFDC"]="FBC_RUNNING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0b0f9e4:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_ACTIVE_CORES_ERROR"
        d["FFDC"]="CORE_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0b4dd7a:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_INVALID_SMP9_CONFIG_ERR"
        d["FFDC"]="BAD_LANE_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0d2c120:
        d["HwpReturnCode"]="RC_P10_HW540133_SB_WA_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0da6e32:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_DLL_LOCK_FAIL"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0e0fb22:
        d["HwpReturnCode"]="RC_XIPC_DYN_GET_RING_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb0e4df53:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb1146a71:
        d["HwpReturnCode"]="RC_P10_INTP_QUIESCE_TIMEOUT"
        d["FFDC"]="RST_CTL_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb1159138:
        d["HwpReturnCode"]="RC_MVPD_INSUFFICIENT_RECORD_SPACE"
        d["FFDC"]="REM_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb11d87f4:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb140de70:
        d["HwpReturnCode"]="RC_L3_PURGE_DONE_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb148b26e:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb18c87ac:
        d["HwpReturnCode"]="RC_QMEC_TOR_HEADER_MISMATCH"
        d["FFDC"]="TOR_VERSION_IN_HEADER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb1927f0c:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_CRC_ERR"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb1a5453c:
        d["HwpReturnCode"]="RC_ODY_INVALID_ATTR_MEM_SI_MC_DRV_IMP_CMD_ADDR"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb1d3f77c:
        d["HwpReturnCode"]="RC_HW_IMAGE_INVALID_SIZE"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb1f98984:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP"
        d["FFDC"]="MSS_INTERLEAVE_ENABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb220e1dc:
        d["HwpReturnCode"]="RC_MSS_CONVERSION_ERROR"
        d["FFDC"]="CONVERTED_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2227757:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_MISSING_FLAG"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb22eed5e:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="CURRENT_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb23bb6ce:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_LPC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb252c292:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="CBS_CS_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb266d725:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA12"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2761a8f:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_ERROR"
        d["FFDC"]="TFMR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb27ee5d7:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_TARGET_ADDRESS"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb28fceb8:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_LOOPBACK_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2a09a3b:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2b4443f:
        d["HwpReturnCode"]="RC_INVALID_DT_INDEX_RECEIVED"
        d["FFDC"]="NUM_DTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2b6d00d:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="NEW_BAD_BITS_R0_BYTE8_9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2bffb7c:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LCO_MODE_SETUP_ADAPTIVE_ATTR_ERR"
        d["FFDC"]="ADAPTIVE_D"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2c2856e:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2e1aeea:
        d["HwpReturnCode"]="RC_I2C_SCOM_UNEXPECTED_IBM_INDICATOR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2ec3c72:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RANK"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2ee1127:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb2f68080:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="CURRENT_BOOT_CORE_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb30fac23:
        d["HwpReturnCode"]="RC_PMIC_CHIP_NOT_RECOGNIZED"
        d["FFDC"]="VENDOR_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb31c1f1b:
        d["HwpReturnCode"]="RC_UNEXPECTED_DATA_SIZE"
        d["FFDC"]="ATTRIBUTEID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb32105e5:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb3334f83:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb339165d:
        d["HwpReturnCode"]="RC_QME_BCE_HW_ERR"
        d["FFDC"]="QME_BCEBAR0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb33f70f0:
        d["HwpReturnCode"]="RC_PSTATE_PAU_FREQ_EQ_ZERO"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb347f1d3:
        d["HwpReturnCode"]="RC_PMIC_RANGE_CONVERSION_OVERFLOW"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb351fc3a:
        d["Register FFDC"]="ODY_ROOT_CTRL_REGS_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL0_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL1_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL2_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL3_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL4_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL5_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL6_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL7_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL8_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::poz::FSXCOMP_FSXLOG_ROOT_CTRL9_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xb359b28f:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ADDR"
        d["FFDC"]="MAXADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb3699549:
        d["HwpReturnCode"]="RC_TOR_TRAVERSAL_ERROR"
        d["FFDC"]="EXPECTED_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb37eb52f:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERROR"
        d["FFDC"]="CLOCK_B_OK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb387db91:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RANK"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb3ab8c64:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PAUC_GARD_ERR"
        d["FFDC"]="PAUC_FUNCTIONAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb3c6d626:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb3e0704d:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DRAM_WIDTH"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4010d2d:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb40603cd:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="SHIFTED_ERR_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb41edece:
        d["HwpReturnCode"]="RC_SET_SYS_FREQ_ORIGINAL_CORRUPTION"
        d["FFDC"]="ORIG_CEILING_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb42e8390:
        d["HwpReturnCode"]="RC_SELF_SAVE_INIT_FAILED"
        d["FFDC"]="FAILURE_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb42f6e0d:
        d["HwpReturnCode"]="RC_MOD_MULTICAST_SETUP_PLAT_REMAP_ERR"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb44f3018:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET8"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb468abd5:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="HEADER_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4729085:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb477f260:
        d["HwpReturnCode"]="RC_MSS_RESTORE_REPAIRS_NIBBLE_OUT_OF_RANGE"
        d["FFDC"]="NIBBLE_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb495dbdb:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_INVALID_NUM_RANKS"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4b280d7:
        d["HwpReturnCode"]="RC_MSS_FREQ_INVALID_CALCULATED_TCK"
        d["FFDC"]="TAAMIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4c1b392:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_LPC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4c7b4af:
        d["HwpReturnCode"]="RC_ODY_DRAM_INDEX_OUT_OF_BOUNDS"
        d["FFDC"]="DRAM_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4cc3165:
        d["HwpReturnCode"]="RC_IO_PPE_TX_TDR_FAILED"
        d["FFDC"]="DISTANCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4cf2fdf:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_ATTR_VALUE"
        d["FFDC"]="STRAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4e45e48:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INVALID_IMAGE_SIZE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb4f15a23:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA24"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb51015e0:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="REM_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb525f605:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_AGGREGATE_INVALID_CONFIG_ERR"
        d["FFDC"]="LOCAL_FBC_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb52c0cd8:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_NEGATIVE_OR_ZERO_SLOPE"
        d["FFDC"]="PORT_MAX_UTIL_POWER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb53d45bc:
        d["HwpReturnCode"]="RC_P10_TOD_INVALID_SPS"
        d["FFDC"]="TOD_SPS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb552b6bb:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb552c5c1:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_FW_VER_ERROR"
        d["FFDC"]="FW_VER_0_HW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb553645a:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="RING1_TYPE_FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb564e8e3:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="AMB_COND_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb576112c:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="N_MODE_PMIC2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb5821a5d:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb5921c45:
        d["HwpReturnCode"]="RC_P10_HW540133_FLB_WA_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb5a5f841:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_CFAM_PATH"
        d["FFDC"]="POLL_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb5c94d5b:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="LOC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb5d686dc:
        d["HwpReturnCode"]="RC_PM_PGPE_SAFE_MODE_FAILS"
        d["FFDC"]="OCCFLG2_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb5e4927e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="IS_CS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb603880d:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_HOMER_TARGET_ERROR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb612456d:
        d["HwpReturnCode"]="RC_P10_ADU_FBC_NOT_INITIALIZED"
        d["FFDC"]="FBC_INITIALIZED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb61f9322:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NOT_ENOUGH_MEMORY"
        d["FFDC"]="AVAIL_MEM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb625e35f:
        d["HwpReturnCode"]="RC_PSTATE_PB_PSTATE_STEP_EQ_0"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6283779:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6543965:
        d["HwpReturnCode"]="RC_PMIC_ORDER_OUT_OF_RANGE"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6635795:
        d["HwpReturnCode"]="RC_QMEC_TOR_SKELETON_GEN_ERROR"
        d["FFDC"]="DD_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb663def2:
        d["HwpReturnCode"]="RC_MSS_INVALID_RTT_WR_ENCODING"
        d["FFDC"]="RTT_WR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6697713:
        d["HwpReturnCode"]="RC_MC_GROUP_SETUP_ERR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb66f4559:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_NULL_POINTER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6c005ed:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6ca9bf3:
        d["HwpReturnCode"]="RC_P10_HW540133_LLB_WA_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6eaed23:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_RX_LANE_BUSY_TIMEOUT_ERROR"
        d["FFDC"]="IOLINK_UNIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6edc3f2:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_SUPERFAST_INIT_FAILED_TO_INIT"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6f0b94c:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_OVERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb6fd1094:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="REM_IOLINK_EVN_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7067554:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_HUNG"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb70bb7b9:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb710a855:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET2"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7194a93:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="HEADER_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb746f86a:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb74889d9:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="API_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb76f980f:
        d["HwpReturnCode"]="RC_EXTRACT_SBE_RC_OTP_ECC_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7708231:
        d["HwpReturnCode"]="RC_INVALID_PMIC_GI2C_TARGET_CONFIG"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb77b58ae:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_CHIPLET_ID_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7846d60:
        d["HwpReturnCode"]="RC_XIPC_ATTR_MAX_SBE_SEEPROM_SIZE_TOO_SMALL"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb79a1baa:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVPG_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7a14cd0:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_IOHS_TARGET_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7b3d7e3:
        d["HwpReturnCode"]="RC_ODY_PPR_RESOURCE_UNAVAILABLE"
        d["FFDC"]="MRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7b827d4:
        d["HwpReturnCode"]="RC_PMIC_HEALTH_CHECK_FAIL_MNFG_MODE_DDR5_4U"
        d["FFDC"]="N_MODE_PMIC3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7b9e629:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="NOMINAL_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7c1c2db:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_DMA"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7c99d7b:
        d["HwpReturnCode"]="RC_QME_META_QMEATMT_MAGIC_MISMATCH"
        d["FFDC"]="QME_META_HEADER_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7ce5c63:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_FREQ_LIST_PASSED"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7e89ef0:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="STATUS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7f2c078:
        d["HwpReturnCode"]="RC_PM_PGPE_SAFE_MODE_FAILS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb7fd4de4:
        d["HwpReturnCode"]="RC_XIPC_MVPD_CHIPLET_ID_MESS"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb806a377:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb810d43e:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb811d280:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb89a4e4a:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="MRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb8c103a2:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR3_BAD_CYCLE_ALIGN"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb8ca464f:
        d["HwpReturnCode"]="RC_XIPC_XIP_API_MISC_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb8d03d0f:
        d["HwpReturnCode"]="RC_MSS_CONCURRENT_CCS_EXCEEDS_INSTRUCTION_LIMIT"
        d["FFDC"]="MAX_INSTRUCTIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb8f0f2cc:
        d["HwpReturnCode"]="RC_PM_OCB3_GET_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb907d89c:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR13_BAD_TCCD_L"
        d["FFDC"]="TCCD_L"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb9131812:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb91abc05:
        d["HwpReturnCode"]="RC_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb93730a2:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_IOLINK_EVN_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb94ef3ba:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb94f507b:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb96dfd43:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INCORRECT_PATTERN_LENGTH"
        d["FFDC"]="ACTUAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb973ac6d:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="MUX_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb97507f1:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_GROUP_CURR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb97da5a6:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_MEM_ADDR_RANGE_OUT_OF_BOUNDS"
        d["FFDC"]="END_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb9abc398:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VCS_START"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb9b8ea6a:
        d["HwpReturnCode"]="RC_POZ_THOLD_ERR"
        d["FFDC"]="CLOCK_CMD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb9cac689:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_NOT_ENABLED"
        d["FFDC"]="SMF_TOTAL_BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb9d147e5:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xb9e3a960:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="ERR0_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba08028a:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="ADDRESS0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba17ad3b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="MRANK_MAPPED_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba1a9a84:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba327795:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="RING_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba3c5ce5:
        d["Register FFDC"]="XGPE_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPETSEL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEMACR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXISGBU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXISGBL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIICACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIICACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDCACU",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDCACL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xba41e776:
        d["HwpReturnCode"]="RC_PMIC_HEALTH_CHECK_FAIL_MNFG_MODE_DDR5_4U"
        d["FFDC"]="N_MODE_PMIC2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba4f5c74:
        d["HwpReturnCode"]="RC_GPIO_INPUT_PORT_TIMEOUT"
        d["FFDC"]="GPIO"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba535c56:
        d["HwpReturnCode"]="RC_POZ_I2CC_RESET_ERROR"
        d["FFDC"]="RETRYCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba7a1002:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba7d1170:
        d["HwpReturnCode"]="RC_XIPC_RS4_REDUNDANT_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba7e183b:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_NEGATIVE_OR_ZERO_SLOPE"
        d["FFDC"]="PORT_IDLE_POWER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xba90ea5d:
        d["HwpReturnCode"]="RC_POZ_I2C_FIFO_TIMEOUT_ERROR"
        d["FFDC"]="ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbaa61a19:
        d["HwpReturnCode"]="RC_QMEC_FUNC_CALL_ARGUMENT_ERROR"
        d["FFDC"]="CUST_QME_RINGS_BUF_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbab95882:
        d["HwpReturnCode"]="RC_MSS_BAD_MR_PARAMETER"
        d["FFDC"]="PARAMETER_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbaf47ad8:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_SIZE_MIX"
        d["FFDC"]="OMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb01447e:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="BANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb028c5c:
        d["HwpReturnCode"]="RC_SHADOW_DIS_FDCR_UPDATE_IN_PROG_TIMEOUT"
        d["FFDC"]="CPMS_CUCR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb0aecfd:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb1c7053:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_PBCQ_CQ_NOT_IDLE"
        d["FFDC"]="NFIR_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb2222ae:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_NO_RX_IDENTIFIED_ERR"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb339f24:
        d["HwpReturnCode"]="RC_EXP_DRAM_INDEX_OUT_OF_BOUNDS"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb3497a8:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="CONFIG_PHY_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb37990d:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_NEGATIVE_OR_ZERO_SLOPE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb557e85:
        d["HwpReturnCode"]="RC_INCORRECT_POUNDW_BUCKET_ID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb5665c4:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="SRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb6959f2:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_XFER_RECEIVE_DONE_TIMEOUT"
        d["FFDC"]="QME_TFCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb7deb13:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MULTIPLE_MASTER_DESIGNATION_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb811bee:
        d["HwpReturnCode"]="RC_MSS_INVALID_INDEX_PASSED"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb84563a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb8892af:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_INVALID_COMMAND"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb8b7958:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR0_BAD_CAS_LATENCY"
        d["FFDC"]="MAX_CAS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb9802d8:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_REVISION"
        d["FFDC"]="IS_PLANAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbb9bf0ef:
        d["HwpReturnCode"]="RC_P10_IO_TX_TDR_SCREEN_ERROR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbbaf33fe:
        d["HwpReturnCode"]="RC_XIPC_MVPD_MK_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_MKSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbbc3082c:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbbc84e31:
        d["HwpReturnCode"]="RC_ODY_INVALID_VERBOSITY_CONFIG"
        d["FFDC"]="COARSE_DEBUG_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbbda19fc:
        d["HwpReturnCode"]="RC_TOR_TRAVERSAL_ERROR"
        d["FFDC"]="SECTION_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbbfefa91:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc03d9bc:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RECORD_KEYWORD_PAIR"
        d["FFDC"]="MVPD_RECORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc11e6d9:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc2aa223:
        d["HwpReturnCode"]="RC_GPIO_INPUT_PORT_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc445063:
        d["HwpReturnCode"]="RC_MSS_EXP_POLL_ABORT_FW_STATUS_BUSY"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc52f135:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FAILURE_MAIL"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc85bdb5:
        d["HwpReturnCode"]="RC_DONE_HALT_NOT_SET"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc8bfd40:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="TAA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc90ba53:
        d["HwpReturnCode"]="RC_P10_MSS_ZERO_HOST_TO_DDR_FREQ_RATIO"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc937208:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbc9a5017:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR8_RD_PREAMBLE_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbcaf78c3:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="GEN_HASH_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbcbe0a55:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_INIT_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbccb968e:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_M_REGION_MAP_ERROR"
        d["FFDC"]="MAX_REGION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbcd10250:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR5_DRV_IMP_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbce77392:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_SIZING"
        d["FFDC"]="IMAGE_SIZE_WITHOUT_RINGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd0bc1d0:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_OP"
        d["FFDC"]="CORE_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd213666:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd2e5917:
        d["HwpReturnCode"]="RC_XIPC_MVPD_PG_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_PG_KWD_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd42da66:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="CURR_REGION_SIZE_LEFT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd4fc9f9:
        d["HwpReturnCode"]="RC_PM_OCC_GPE_BAD_MODE"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd5a9d5e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR_BAD_DRAM"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd651cac:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd659709:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="TOR_VER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd68d0f6:
        d["HwpReturnCode"]="RC_PGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd7e7e03:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR4_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="EXPECTED_OPERABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd88c95d:
        d["HwpReturnCode"]="RC_ECL2_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="ECL2_CLK_SYNC_DROP_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbd8baabb:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbdbcd265:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_FUSED_ODD_ERROR"
        d["FFDC"]="FUSED_CORE_NUM_BASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbdc090e2:
        d["HwpReturnCode"]="RC_FILT_PLL_LOCK_ERR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbdc5500c:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="REF_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbdd1f00a:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_ERROR"
        d["FFDC"]="PROCEDURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbde5d9b7:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_INIT_FAIL"
        d["FFDC"]="BOOT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbde7b40b:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbdf2f203:
        d["HwpReturnCode"]="RC_PM_QME_BAR_SIZE_INVALID"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbdf99c9f:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_KEYWORD_MAX"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbdfe5394:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_NO_RX_IDENTIFIED_ERR"
        d["FFDC"]="IOLINK_UNIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe004641:
        d["HwpReturnCode"]="RC_P10_RAM_HW533775_RECOVERY_ERROR"
        d["FFDC"]="HID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe2093f9:
        d["HwpReturnCode"]="RC_PUTRING_RS4_STRING_OVERRUN"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe292f6e:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_SYS_CURR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe2978e3:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="CHIP_IDS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe2e4e4b:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_UPSTREAM_EDPL"
        d["FFDC"]="EDPL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe43cde6:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="W_T0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe60ef50:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INVALID_ADDRESS_PAIR_INDEX"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe6ca26c:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="INTERGROUP_CONNECTIONS_OK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe878337:
        d["HwpReturnCode"]="RC_MSS_FFE_CURSOR_OVERFLOW"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe913d8f:
        d["HwpReturnCode"]="RC_INCORRECT_POUNDW_BUCKET_ID"
        d["FFDC"]="EXP_BUCKET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe953f09:
        d["HwpReturnCode"]="RC_PM_OCB1_PUT_DATA_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbe98186a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="MVPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbebd301f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbed5810d:
        d["HwpReturnCode"]="RC_ODY_SPPE_ATTR_SETUP_GRID_FREQ_MISMATCH"
        d["FFDC"]="FREQ_GRID_EXP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbedce48c:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbee71a57:
        d["HwpReturnCode"]="RC_MSS_INVALID_DQ_TO_SYMBOL"
        d["FFDC"]="DQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbef41dd6:
        d["HwpReturnCode"]="RC_MSS_EFF_CONFIG_MIRROR_DISABLED"
        d["FFDC"]="MIRROR_PLACEMENT_POLICY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf08fa11:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf2c35bb:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_CORE_NOT_DUMPABLE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf31bcbb:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_INVALID_CMD"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf3617bf:
        d["HwpReturnCode"]="RC_MSS_FREQ_CL_EXCEEDS_TAA_MAX"
        d["FFDC"]="IS_3DS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf3d4f32:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf4e2698:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET2"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf55da7a:
        d["Register FFDC"]="PIBMEM_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::OTPC_M_STATUS_REGISTER",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xbf5d4188:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPXRAM_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf6cd3f5:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="CMD_SCOPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf85d114:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_SIZING"
        d["FFDC"]="MAX_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbf9b340d:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbfbdcfa3:
        d["HwpReturnCode"]="RC_HCODE_INVALID_IMG_TYPE"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbfd558bd:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE_DDR5"
        d["FFDC"]="N_MODE_PMIC3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbfd5fc44:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_ERROR"
        d["FFDC"]="OPERATION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbfe69032:
        d["Register FFDC"]="REG_FFDC_SMP_LINK_FIRS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::PB_COM_SCOM_ES3_STATION_HP_MODE2_CURR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xbfee360b:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="SIZEOF_COMPRESSED_SCAN_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbff6c0c4:
        d["HwpReturnCode"]="RC_P10_EXIT_CACHE_CONTAINED_INVALID_MCD_GROUP_SIZE_ERR"
        d["FFDC"]="RANGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xbff87367:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_IO_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc0165ec3:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_THREAD_STOP_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc02a938b:
        d["HwpReturnCode"]="RC_STATIC_POWER_GATING_PFET_CNFG_ERR"
        d["FFDC"]="EC_FEATURE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc03bedfa:
        d["HwpReturnCode"]="RC_P10_NX_PBI_WRITE_IDLE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc048b4cd:
        d["HwpReturnCode"]="RC_INVALID_RING_CHIPLET_SECTION"
        d["FFDC"]="IMG_POINTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc04d727a:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc06e6d96:
        d["HwpReturnCode"]="RC_SCAN_CHIPLET_NOT_FUNCTIONAL"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc0711045:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_TRAINING_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc0753bad:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_WRONG_BOOT_STAGE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc0760f89:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="CU_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc079731b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR5_DRV_IMP_FIELD_VALUE"
        d["FFDC"]="IS_PULL_UP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc08d3990:
        d["HwpReturnCode"]="RC_P10_OCMB_ENABLE_SWIZZLE_BIT_OUT_OF_RANGE_ERROR"
        d["FFDC"]="BIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc0c31655:
        d["HwpReturnCode"]="RC_P10_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc0dd4069:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_DMA"
        d["FFDC"]="BYTES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc0f03f2f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_ODD_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc10158b8:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="IOO_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc17c5ffd:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="POINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc17e9ad3:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_LINK_TRAIN_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc185accd:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="MCHP_STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc19a37d5:
        d["HwpReturnCode"]="RC_XGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="MAX_XGPE_IMG_SIZE_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc19db0bd:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_256MB_MINIMUM_ERROR"
        d["FFDC"]="SMF_TOTAL_BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1ae099f:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_MISSING_FLAG"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1c08afc:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_UNDERFLOW"
        d["FFDC"]="CF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1e5ebfa:
        d["HwpReturnCode"]="RC_XIPC_FEATURE_LIST_SIZE_OVERFLOW"
        d["FFDC"]="FEAT_LIST_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1eae8dc:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_PBCQ_CQ_NOT_IDLE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1edc1a6:
        d["HwpReturnCode"]="RC_HCODE_INVALID_PHASE"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1eec853:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1f01c32:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1f28cde:
        d["HwpReturnCode"]="RC_XIPC_SECTION_REMOVAL_ERROR"
        d["FFDC"]="XIP_SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc1f8df72:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2029b6b:
        d["HwpReturnCode"]="RC_ODY_MCBIST_UNKNOWN_FAILURE"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2077f6b:
        d["HwpReturnCode"]="RC_PGPE_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="MAX_PGPE_IMG_SIZE_ALLOWED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc20f34f1:
        d["HwpReturnCode"]="RC_UNEXPECTED_ATTR_FILE_TYPE"
        d["FFDC"]="PARSER_FILE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2121b55:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_ACCESS_SIZE_ERROR"
        d["FFDC"]="PEC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc218b396:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RESERVED_BITS"
        d["FFDC"]="FAILING_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2192a51:
        d["HwpReturnCode"]="RC_LPC_ACCESS_TIMEOUT"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc21af44f:
        d["HwpReturnCode"]="RC_MSS_OUT_OF_BOUNDS_INDEXING"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc22f982f:
        d["HwpReturnCode"]="RC_PM_AVSBUS_MASTER_BAD_CRC_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2302770:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_IOLINK_ODD_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2405139:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="IMAGE_BUF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc246b10b:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc262d772:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc28f171a:
        d["HwpReturnCode"]="RC_ODY_SPPE_ATTR_SETUP_INVALID_TARGET"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc294aa81:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP2_BUF"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2a57645:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2aa2c50:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2aa9500:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SIZE_MAPPING_ERROR"
        d["FFDC"]="EFD_MEMORY_SPACE_MAPPING_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2c39c89:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="POINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2d13199:
        d["Register FFDC"]="PBA_FFDC_BASIC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRACT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRACT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRMASK_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIRACT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIRACT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAFIRMASK_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAERRRPT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAERRRPT2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xc2d2ab0b:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_MISSING_FLAG"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2ec9eb8:
        d["HwpReturnCode"]="RC_POZ_I2C_WAIT_FOR_CMD_COMP_TIMEOUT_ERROR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2ee0c60:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_POLL_THRESHOLD_ERR"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2f7bf7a:
        d["HwpReturnCode"]="RC_XGPE_INIT_TIMEOUT"
        d["FFDC"]="XGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc2ff07f0:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RING_SIZE_TOO_BIG"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc3011db1:
        d["HwpReturnCode"]="RC_ODY_SCRATCH_REGS_UTILS_BUCKET_OUT_OF_RANGE_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc317ddb8:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_INIT_FAIL"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc3325b1b:
        d["HwpReturnCode"]="RC_CPLT_OPCG_DONE_NOT_SET_ERR"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc33679cb:
        d["HwpReturnCode"]="RC_P10_OPCODE_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="OPCODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc33a9ff2:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc349635b:
        d["HwpReturnCode"]="RC_XIPC_FEATURE_LIST_SIZE_OVERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc3569a24:
        d["HwpReturnCode"]="RC_MSS_TOO_MANY_PRIMARY_RANKS_ON_DIMM"
        d["FFDC"]="RANK_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc3593c98:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FAILURE_MSG_BLOCK"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc35d7f49:
        d["HwpReturnCode"]="RC_SHADOW_DIS_FDCR_UPDATE_IN_PROG_TIMEOUT"
        d["FFDC"]="SHADOW_DIS_FDCR_UPDATE_IN_PROG_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc37b196b:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc386b848:
        d["HwpReturnCode"]="RC_MSS_MAINT_BAD_SPARE_INDEX"
        d["FFDC"]="SPARE1_INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc38debf1:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_HW_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc3aefd9b:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc3d95d4a:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="RESP_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc40d27b0:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc42632c9:
        d["HwpReturnCode"]="RC_MSS_OVERFLOW_WHEN_ROUNDING_TO_EVEN"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc430ffa7:
        d["HwpReturnCode"]="RC_CHTM_TRACE_TYPE_NOT_SUPPORTED"
        d["FFDC"]="CHTM_TRACE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc44ee6b0:
        d["HwpReturnCode"]="RC_MSS_CHANNEL_MIRROR_SETTINGS_MISMATCH_RANK1"
        d["FFDC"]="VALUE_CHB_CS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc46b3b15:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="FREQUENCY_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc48acdb5:
        d["HwpReturnCode"]="RC_P10_NX_UMAC_DISPATCH_SLOTS_TO_DRAIN_CRBS_TIMEOUT"
        d["FFDC"]="NX_PBI_UMAC_STATUS_CONTROL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc493d482:
        d["Register FFDC"]="ODY_CBS_STATUS_REGS_SCOM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_CS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_TR_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_EL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_ENVSTAT_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_TR_HIST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_EL_HIST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SB_CS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SB_MSG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_CBS_STAT_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xc4a056a6:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_CMD_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc4a525fd:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE_DDR5"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc4bc578c:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET8"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc4cc1119:
        d["HwpReturnCode"]="RC_P10_IO_TX_TDR_SCREEN_MULTI_GROUP_ERROR"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc4d6dfa2:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET1"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc4ee43e7:
        d["HwpReturnCode"]="RC_PGPE_INIT_HALT"
        d["FFDC"]="PGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc4f6cb78:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="MCHP_STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc4f745cf:
        d["HwpReturnCode"]="RC_POZ_I2C_FAILED_TO_LOCK_ENGINE_TIMEOUT_ERROR"
        d["FFDC"]="ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc507cd4a:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR5_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_VPP_ENDURANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc523374c:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc52b2c27:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc53dcbf1:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_ERROR"
        d["FFDC"]="LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc54097c5:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc564151f:
        d["HwpReturnCode"]="RC_P10_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="SCOM_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc573b834:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP2_BUF_SIZE"
        d["FFDC"]="TEMP2_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc57b93ca:
        d["HwpReturnCode"]="RC_MC_GROUP_SETUP_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc58fb84d:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="CHIPLET_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc590f9d0:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR0_BAD_CAS_LATENCY"
        d["FFDC"]="CAS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc5950708:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLOFF_NT_ATTR_VALUE"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc59a2f58:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ADDR"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc5bd1bb4:
        d["HwpReturnCode"]="RC_QME_FAILED_TO_ENTER_QUIESCE_MODE"
        d["FFDC"]="QME_FLAG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc5d18684:
        d["HwpReturnCode"]="RC_L2_PURGE_DONE_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc5eb7e3b:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc5ed610d:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR14_BAD_ECS_CID"
        d["FFDC"]="CID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc5fc1c7e:
        d["HwpReturnCode"]="RC_PM_PBA_BCDE_STOP_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc5fe5eb0:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc61156ee:
        d["HwpReturnCode"]="RC_IO_PPE_RESET"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc613c3e6:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc616efb3:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ENCODE_ERROR"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc624c2fd:
        d["HwpReturnCode"]="RC_P10_RAM_INVALID_REG_TYPE_ACCESS_ERR"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6299a8f:
        d["HwpReturnCode"]="RC_P10_NCU_ENABLE_DARN_RNG_DISABLED"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc632198c:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_UNKNOWN_SYNDROME_ECC"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc632a210:
        d["HwpReturnCode"]="RC_MAGIC_NUMBER_NOT_VALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc635b60c:
        d["HwpReturnCode"]="RC_XIPC_MVPD_CHIPLET_ID_MESS"
        d["FFDC"]="MVPD_CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc63b0e9b:
        d["HwpReturnCode"]="RC_INVALID_TOR_VERSION"
        d["FFDC"]="RING_SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc64920e9:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc65346ad:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6555fd2:
        d["HwpReturnCode"]="RC_QME_FAILED_TO_ENTER_QUIESCE_MODE"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc65eb157:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc65f1179:
        d["HwpReturnCode"]="RC_MSS_FREQ_SELECTED_FREQ_NOT_SUPPORTED"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6608230:
        d["HwpReturnCode"]="RC_INCORRECT_POUNDW_BUCKET_ID"
        d["FFDC"]="BUCKET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc66828e9:
        d["HwpReturnCode"]="RC_POZ_I2CC_RESET_ERROR"
        d["FFDC"]="DEVICEADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6a92b8d:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ECO_MODE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6b511be:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6b8f52c:
        d["HwpReturnCode"]="RC_TARGET_ENTRY_MAGIC_WORD_MISMATCH"
        d["FFDC"]="TARGET_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6c1ac76:
        d["HwpReturnCode"]="RC_MSS_INVALID_DDR5_DRAM_WR_PREAMBLE"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6dde657:
        d["HwpReturnCode"]="RC_PMSR_SHIFT_INACTIVE_TIMEOUT"
        d["FFDC"]="QME_SCSR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6e5ef6d:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_SMBUS_SYNC_MSG_NOT_FOUND"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc6f56ed3:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc70329ca:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc70c1637:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_CLEANUP_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc71cb7b9:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_XMETA_BOTH_HALVES_SELECTED"
        d["FFDC"]="PORT_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc726a362:
        d["HwpReturnCode"]="RC_P10_PUTRING_OPCG_DONE_TIMEOUT"
        d["FFDC"]="ROTATE_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7292578:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_CALCULATION_ERR"
        d["FFDC"]="IOLINK_UNIT_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc73518ba:
        d["HwpReturnCode"]="RC_MSS_SPD_TIMING_FAIL"
        d["FFDC"]="FUNCTION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7376671:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERR"
        d["FFDC"]="CLOCK_A_OK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc745cacb:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR_BAD_STRAP_VALUE"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7688707:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FFDC_ERR"
        d["FFDC"]="MISC_CONFIG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc76ad7b7:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="TABLE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc76b274b:
        d["HwpReturnCode"]="RC_PARALLEL_SCAN_COMPARE_ERR"
        d["FFDC"]="CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc779586d:
        d["HwpReturnCode"]="RC_QMEC_RINGS_OUTPUT_BUFFER_TOO_SMALL"
        d["FFDC"]="CUST_QME_RINGS_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7849711:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_FUSED_ODD_ERROR"
        d["FFDC"]="CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7867a10:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7a1d6bb:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="CU_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7a895fb:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET8"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7c57026:
        d["HwpReturnCode"]="RC_PM_AVSBUS_EXCESSIVE_VOLTAGE_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7cc92a8:
        d["HwpReturnCode"]="RC_INVALID_BUCKET_ID"
        d["FFDC"]="NUM_BUCKETS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7d016bb:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERR"
        d["FFDC"]="ATTR_CP_REFCLOCK_SELECT_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7ec8e34:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="TCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7ed52c0:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7eefa8d:
        d["HwpReturnCode"]="RC_RCS_INVALID_SIDE"
        d["FFDC"]="SELECTED_SIDE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc7fd6b71:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR34_RTT_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc8107f74:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="AVSBUS_BRIDGE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc810b813:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_READ_MISCOMPARE"
        d["FFDC"]="FAIL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc8178318:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="INTRAGROUP_CONNECTIONS_OK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc81a05fa:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_WRITE_OFFSET"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc81f1f42:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_OCMB_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc8507186:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc8565967:
        d["HwpReturnCode"]="RC_P10_RAM_TEST_GENERAL_ERROR"
        d["FFDC"]="LINE_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc88b169f:
        d["HwpReturnCode"]="RC_I2C_SCOM_UNEXPECTED_IBM_INDICATOR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc8a6dfe4:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="PLAT_SOURCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc8e1e941:
        d["HwpReturnCode"]="RC_ODY_INVALID_GI2C_TARGET_CONFIG"
        d["FFDC"]="RCD_TARGET_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc8ed50d9:
        d["HwpReturnCode"]="RC_PM_SUSPEND_XGPE_FAILS"
        d["FFDC"]="GPE3XIRAMDBG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc8f1daed:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET8"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc9053bc2:
        d["HwpReturnCode"]="RC_MSS_EXP_UNKNOWN_THERMAL_SENSOR"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc924aeed:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc926d150:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET2"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc92b260a:
        d["HwpReturnCode"]="RC_INVALID_SIZE_FOR_ENDIANNESS_CORRECTION"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc92dd226:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_INVALID_COMMAND"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc933c939:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_DOWNSTREAM_EDPL"
        d["FFDC"]="THRESHHOLD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc934ff1e:
        d["HwpReturnCode"]="RC_STATIC_POWER_GATING_PFET_CNFG_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc955431a:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR35_RTT_FIELD_VALUE"
        d["FFDC"]="IS_RTT_NOM_RD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc96a9ef9:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc98ae057:
        d["HwpReturnCode"]="RC_COLLECT_EXPLORER_ERROR"
        d["FFDC"]="EXP_SAVED_IMAGEB_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc9cea513:
        d["HwpReturnCode"]="RC_VDN_PGOOD_NOT_SET"
        d["FFDC"]="AVS_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc9e636c6:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xc9e6631e:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xca130b78:
        d["HwpReturnCode"]="RC_ODY_INVALID_ATX_OVERRIDE"
        d["FFDC"]="FAILING_CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xca20664e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLON_RD_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xca53116d:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xca7b1a50:
        d["HwpReturnCode"]="RC_MSS_EXP_CCS_READ_MISCOMPARE"
        d["FFDC"]="FAIL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xca82dbff:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xca930783:
        d["HwpReturnCode"]="RC_XGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xca9a3812:
        d["HwpReturnCode"]="RC_PM_SUSPEND_XGPE_FAILS"
        d["FFDC"]="GPE3XIRAMEDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcaa74f61:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_INIT_TIMEOUT_ERROR"
        d["FFDC"]="ARRAY_MODE_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcaadf33f:
        d["HwpReturnCode"]="RC_INVALID_RING_IMAGE"
        d["FFDC"]="VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcab7f2ad:
        d["HwpReturnCode"]="RC_PM_OCC_GPE1_HALT_TIMEOUT"
        d["FFDC"]="GPE1_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcab8baa2:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_UNSUPPORTED_DDR_FREQ"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcac36ea2:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET2"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcad35011:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="RELATIVE_PORT_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcad53a69:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_NO_MASTER_ERR"
        d["FFDC"]="ACTIVE_CORES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcaf1f184:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR_3"
        d["FFDC"]="BAR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcaf53d3b:
        d["HwpReturnCode"]="RC_RCS_CLOCK_ERR"
        d["FFDC"]="ATTR_CP_REFCLOCK_SELECT_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb08e822:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_PG_ERR"
        d["FFDC"]="L3_PG_BIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb1f214d:
        d["HwpReturnCode"]="RC_MSS_FAILED_DATA_INTEGRITY_CHECK"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb5b10f4:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb6255c5:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SIZE_MAPPING_ERROR"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb6cc969:
        d["HwpReturnCode"]="RC_P10_SBE_MCS_SETUP_NO_MC_FOUND_ERR"
        d["FFDC"]="IS_MASTER_SBE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb7b266d:
        d["HwpReturnCode"]="RC_LPC_ACCESS_TIMEOUT"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb7bb024:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_BAD_STATE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb8e300c:
        d["HwpReturnCode"]="RC_P10_NX_CRB_KILL_DONE_TIMEOUT"
        d["FFDC"]="NX_DMA_SU_CRB_KILL_REQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcb95aba3:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcbb85194:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="MSS_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcbb9ec04:
        d["HwpReturnCode"]="RC_POZ_I2C_FIFO_TIMEOUT_ERROR"
        d["FFDC"]="POLLINGINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcbcdd30c:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_XSCOM_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcbd1dd49:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcbeb617e:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_GROUP_SIZE"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc090eaa:
        d["HwpReturnCode"]="RC_MSS_INVALID_PRIMARY_RANK_COUNT"
        d["FFDC"]="RANK_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc0aac9f:
        d["HwpReturnCode"]="RC_MSS_RESTORE_REPAIRS_BYTE_OUT_OF_RANGE"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc0e5a77:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="IR_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc3405e1:
        d["HwpReturnCode"]="RC_MSS_INVALID_RTT_WR_ENCODING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc39ecb3:
        d["HwpReturnCode"]="RC_P10_HW540133_LLB_WA_ERR"
        d["FFDC"]="LOCK_ERR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc41476e:
        d["HwpReturnCode"]="RC_MSS_INVALID_DRAM_GEN"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc42a2b7:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PAUC_GARD_ERR"
        d["FFDC"]="CONTAINED_IPL_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc48ccea:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_ACTIVE_CORES_ERROR"
        d["FFDC"]="ACTIVE_CORES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc4fbbb9:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc61e875:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_TA_WRONG_SIZE_ERR"
        d["FFDC"]="EXP_TA_DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc7ef915:
        d["HwpReturnCode"]="RC_FILT_PLL_LOCK_ERR"
        d["FFDC"]="TARGET_CHIPLET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc7f7be2:
        d["HwpReturnCode"]="RC_MSS_VOLT_INVALID_DRAM_GEN"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc82ccbb:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET0"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc8a0fe8:
        d["HwpReturnCode"]="RC_ODYSSEY_I2CC_RESET_ERROR"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcc95aa4a:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_COMPARE_ERROR_IN_LAST_PATTERN"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcca310d8:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcca94689:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_NO_RX_IDENTIFIED_ERR"
        d["FFDC"]="DL_RX_LANE_CONTROL_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcccb5a69:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET8"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xccdb258e:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="EXP_BAR_ADDR_RANGECHECK_LOW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xccdb3e8c:
        d["HwpReturnCode"]="RC_L3_PURGE_DONE_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xccdc8695:
        d["HwpReturnCode"]="RC_P10_NX_UMAC_DISPATCH_SLOTS_TO_DRAIN_CRBS_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xccdd40d3:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET2"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xccde1c10:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_EXTRA_INPUT_DATA"
        d["FFDC"]="RNW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xccdec3c9:
        d["HwpReturnCode"]="RC_MSS_MCBIST_STUCK_IN_PROGRESS"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcce40c41:
        d["HwpReturnCode"]="RC_QME_BCE_BUSY_ERR"
        d["FFDC"]="TOPOSCOMS3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xccf093e7:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd047c11:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd04e67e:
        d["HwpReturnCode"]="RC_MSS_MAINT_BAD_STEER_MUX_TYPE"
        d["FFDC"]="STEER_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd1e8129:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="END_ADDR2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd1f4131:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd3f4f92:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_INVALID_CMD"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd4980af:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd59b8d3:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="MULTICAST"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd84e0c6:
        d["HwpReturnCode"]="RC_SELF_SAVE_INIT_FAILED"
        d["FFDC"]="CORE_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcd8dd354:
        d["HwpReturnCode"]="RC_ODY_PPR_RESOURCE_UNAVAILABLE"
        d["FFDC"]="ROW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcda5d3ca:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ECO_CHIP_CONTAINED_CONFIG_ERROR"
        d["FFDC"]="ECO_VEC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcdb4b931:
        d["HwpReturnCode"]="RC_BCE_BUF_SMALLER_FOR_NON_HCODE_SECTION"
        d["FFDC"]="BCE_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcdbba250:
        d["HwpReturnCode"]="RC_P10_PGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcdd04039:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcddd2f1a:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcde5ae5f:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcdf7cd57:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET2"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcdf9afaf:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IDD_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcdf9e14b:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="POINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcdfdeebb:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce0f1c75:
        d["HwpReturnCode"]="RC_QME_META_QMEATMT_MAGIC_MISMATCH"
        d["FFDC"]="QMEATMT_MAGIC_WORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce26d096:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce33f115:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_RESET_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce35cdb9:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce42a1c5:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA14"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce48b05a:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_REVISION"
        d["FFDC"]="SPD_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce5aa82c:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT_MC"
        d["FFDC"]="CORE_SSHSRC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce5bc6c6:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_NON_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="DATA0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce5c9dc4:
        d["HwpReturnCode"]="RC_BCEBAR1_TOPOLOGY_INIT_ERROR"
        d["FFDC"]="BCE1_BAR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xce82329f:
        d["Register FFDC"]="REG_FFDC_ODY_MEMDIAGS_FAILURE"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBMR0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBCFGQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCB_CNTLQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCB_CNTLSTATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBSTATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBMCATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBPARMQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBAGRAQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MBSEC1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MBSTRQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBISTFIRQ_RW_WCLEAR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBAMR0A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBAMR1A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBAMR2A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBAMR3A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBFD0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBFD1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBFD2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBFD3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBFD4Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBFD5Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBFD6Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBFD7Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBSA0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBSA1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBSA2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBSA3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBEA0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBEA1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBEA2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::ody::ODC_MCBIST_SCOM_MCBEA3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xceb0dcc7:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="GEN_HASH_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xceba2bfd:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLOFF_NT_ATTR_VALUE"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcec4f770:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_RANK"
        d["FFDC"]="PHY_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xced1e7f5:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="ROW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcee1d766:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DIMM_TYPE"
        d["FFDC"]="TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcee4a9ea:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcee798d5:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_OVERFLOW"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcef0ae03:
        d["HwpReturnCode"]="RC_PM_AVSBUS_EXCESSIVE_VOLTAGE_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xceff4b0f:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf0a3659:
        d["HwpReturnCode"]="RC_I2C_GET_SCOM_INVALID_READ_SIZE"
        d["FFDC"]="SIZE_REQUESTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf24f7c4:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_UNEQUAL_MC_FREQS"
        d["FFDC"]="MC_UNIT1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf2d4cc3:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA30"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf3cb323:
        d["HwpReturnCode"]="RC_XIPC_TYPE_FIELD_MISMATCH"
        d["FFDC"]="RING2_TYPE_FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf404df7:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_REVISION_FOR_MODULE_SPECIFC"
        d["FFDC"]="SPD_REVISION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf4331f7:
        d["HwpReturnCode"]="RC_QME_META_COREQ_PROTECT_FAIL"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf486e05:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_ERROR"
        d["FFDC"]="TOD_ERROR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf566948:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="ATTR_BACKING_CACHES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf5aad66:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_EDPL_MAX_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf5ef57b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="ULTRA_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf80ab23:
        d["HwpReturnCode"]="RC_P10_SBE_ATTR_SETUP_NMMU1_ERR"
        d["FFDC"]="N1_PG_MVPD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf8e46cf:
        d["HwpReturnCode"]="RC_PM_OCB3_GET_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcf9bcd1f:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_ACCESS_SIZE_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcfb27bd2:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcfc6e01c:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcfc78de6:
        d["HwpReturnCode"]="RC_RCS_CLOCK_ERR"
        d["FFDC"]="MASTER_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcfc8f46f:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ECO_MODE_ERR"
        d["FFDC"]="ECO_FOUND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcfcc46e6:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="FLAG_CHECK_OP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcfd0360b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="VPD_BUFFER_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcfdbfcf7:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_CCM_NOT_SUPPORTED_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcfe8cac4:
        d["HwpReturnCode"]="RC_SBE_SCAN0_DONE_POLL_THRESHOLD_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcff081e6:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="MC_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcffb340b:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_UNDERFLOW"
        d["FFDC"]="CORE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xcffd80c2:
        d["HwpReturnCode"]="RC_P10_DYNINIT_BITVEC_RANGE_ERROR"
        d["FFDC"]="BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd036830a:
        d["HwpReturnCode"]="RC_METADATA_ENABLE_REQUIRES_TEMPLATE_5_OR_9"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0423509:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd04cae25:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd04ddbab:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_SIZE_ERROR"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0520ce6:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_OPCODE_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0548afb:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_MULTIPLE_RX_IDENTIFIED_ERR"
        d["FFDC"]="DL_RX_LANE_CONTROL_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd06a9d4e:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd08f7b13:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_EN_TX_DQ_PREAMBLE_PATTERN_U0"
        d["FFDC"]="PATTERN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd090c915:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0a1f413:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_NSL_FAILED"
        d["FFDC"]="CLK_STAT_NSL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0b237b1:
        d["HwpReturnCode"]="RC_CORE_CHANGE_DONE_RESCLK_ENTRY_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0b554a9:
        d["HwpReturnCode"]="RC_MSS_MCBIST_INVALID_ADDRESS_PAIR_INDEX"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0bf31c9:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0d3dd10:
        d["Register FFDC"]="PBA_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAXCFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCUE_STAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCUE_PBADR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCUE_OCIBAR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCDE_PBADR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCDE_OCIBAR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_BCDE_STAT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRACT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRACT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAFIRMASK_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAF_PBAERRRPT2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAERRRPT1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAERRRPT2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL5",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL4",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBARBUFVAL5",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABAR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBABARMSK3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xd0dc5d7e:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="UNDERVOLT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0e21ca0:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="END_ADDR1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0ef0444:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="BACKING_CACHES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd0f03250:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET1"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd10b201c:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_TOO_LARGE"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd11fc57a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_DD_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_DDSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd12ba689:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_INVALID_MUX"
        d["FFDC"]="TRACE_ARRAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd130f5a5:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FAILURE_MAIL"
        d["FFDC"]="EXPECTED_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd148bf26:
        d["HwpReturnCode"]="RC_XIPC_ATTR_MAX_SBE_SEEPROM_SIZE_TOO_SMALL"
        d["FFDC"]="ATTR_MAX_SBE_SEEPROM_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd19366f1:
        d["HwpReturnCode"]="RC_P10_UMAC_QUIESCE_FAILED"
        d["FFDC"]="NX_PBI_UMAC_STATUS_CONTROL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd1ad412e:
        d["HwpReturnCode"]="RC_ODY_NUM_MRANKS_OUT_OF_BOUNDS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd1b3718b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR112_BAD_DFE_GAIN_BIAS"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd1bcc488:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_FW_VER_ERROR"
        d["FFDC"]="FW_VER_1_ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd1c1b3d9:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd1e79438:
        d["HwpReturnCode"]="RC_ODY_START_ADDR_BIGGER_THAN_END_ADDR"
        d["FFDC"]="START_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd1ed87dd:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_LOCK_ERR"
        d["FFDC"]="NUM_ATTEMPTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd1f75689:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_PBCQ_CQ_NOT_IDLE"
        d["FFDC"]="PHB_RESET_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd20c8357:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="ROOT_CTRL1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd216ed9b:
        d["HwpReturnCode"]="RC_P10_VAS_QUIESCE_TIMEOUT"
        d["FFDC"]="SOUTHDATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd21b163b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_TDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd220d047:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VRT_BLOCK_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2393fd6:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="TX1_LANE_CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd26e3e6a:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_ERROR"
        d["FFDC"]="RETRYCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd27090ba:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_PIE_INVALID_DQS_OSC_TIME"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd27f4bbd:
        d["HwpReturnCode"]="RC_P10_MSS_BAD_FREQ_CALCULATED"
        d["FFDC"]="SUPPORTED_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd280be02:
        d["HwpReturnCode"]="RC_QME_IMG_EXCEED_SRAM_SIZE"
        d["FFDC"]="QME_HCODE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2a71647:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ATTR_VECTORS_INCORRECT"
        d["FFDC"]="EXPECTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2adc513:
        d["HwpReturnCode"]="RC_QMEC_TOR_APPEND_RING_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2adcd39:
        d["HwpReturnCode"]="RC_PM_OCC_GPE1_HALT_TIMEOUT"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2b6c42d:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_SIZE_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2bcd33c:
        d["HwpReturnCode"]="RC_P10_IO_LOAD_PPE_IOPPE_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2beee06:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2c18721:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="HW_IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2ccf7fc:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2d26975:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_INVALID_DIMM_SIZE_MIX"
        d["FFDC"]="LARGER_DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2dd8593:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2e6e313:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_MFG_ID"
        d["FFDC"]="DMB_MFG_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2f5e592:
        d["HwpReturnCode"]="RC_BCE_BUF_SMALLER_FOR_NON_HCODE_SECTION"
        d["FFDC"]="SCOM_RESTORE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd2fe8591:
        d["HwpReturnCode"]="RC_EXP_INBAND_BE_DATA_RANGE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd30be2b8:
        d["HwpReturnCode"]="RC_MSS_MDS_I2C_CMD_FAIL"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd30f7c7b:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd32f9408:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RINGTABLE_VERSION_MISMATCH"
        d["FFDC"]="RINGTABLE_VERSION_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd338db46:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_FAILED"
        d["FFDC"]="CORE_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd379d670:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_OFFSET_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd37e2719:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd37fbfad:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_TARGET2"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd38c8caa:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_IN_RECOVERY_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd392657d:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ACTIVE_BACKING_OVERLAP_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd397d3d2:
        d["HwpReturnCode"]="RC_INVALID_TP_REGIONS"
        d["FFDC"]="TP_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd3aab9e2:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_FUSED_CORE_PARTNER_NOT_FOUND"
        d["FFDC"]="MASTER_CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd3b28da7:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="MCHP_STATUS_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd3c5af28:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR34_RTT_FIELD_VALUE"
        d["FFDC"]="IS_RTT_WR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd3ed7658:
        d["HwpReturnCode"]="RC_CORE_SPECIAL_WAKEUP_NOT_FEASIBLE"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd3f0129c:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd3fc12c6:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_DLR_PSAVE_MODE_ERR"
        d["FFDC"]="TABLE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd409a087:
        d["HwpReturnCode"]="RC_P10_PBI_MASTER_MACHINES_IDLE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd40bc211:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_WHEN_ROUNDING"
        d["FFDC"]="TIMING_PS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd41a577f:
        d["HwpReturnCode"]="RC_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd42d26ed:
        d["HwpReturnCode"]="RC_OCC_CONTROL_MEM_BOOT_LENGTH_MISMATCH"
        d["FFDC"]="LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd434af54:
        d["HwpReturnCode"]="RC_QME_BCE_HW_ERR"
        d["FFDC"]="QME_BCEBAR1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd465cc4f:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_PBCQ_CQ_NOT_IDLE"
        d["FFDC"]="CQ_STAT_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd488ed53:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd48d9a09:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="MASTER_CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd4bb9b58:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_COMMIT_NO_DOORBELL"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd4bcaa2d:
        d["HwpReturnCode"]="RC_PPE_STATE_HALT_TIMEOUT_ERR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd4c8d135:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_RDP_AC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd4cc1ba7:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="AVSBUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd4d9e8e2:
        d["HwpReturnCode"]="RC_COLLECT_EXPLORER_ERROR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd4e6bec4:
        d["HwpReturnCode"]="RC_OCMB_IS_NOT_EXPLORER"
        d["FFDC"]="ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd4e7202c:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_LOCK_ERR"
        d["FFDC"]="LOCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd4f4636d:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR35_RTT_FIELD_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd50338bc:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_ENDLESS_BUFFER"
        d["FFDC"]="CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd50501ed:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR8_WR_PREAMBLE_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd50cd50c:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="REM_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd50df2f0:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_ERROR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd52090bf:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LCO_MODE_SETUP_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5256802:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_IO_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5267190:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_ERASE_ERR"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5271baa:
        d["HwpReturnCode"]="RC_PM_PBA_BAR_SIZE_INVALID"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd527cefa:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd528e15b:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_EVN_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5573be1:
        d["HwpReturnCode"]="RC_POZ_I2C_WAIT_FOR_CMD_COMP_TIMEOUT_ERROR"
        d["FFDC"]="RETRYCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd56a43c7:
        d["HwpReturnCode"]="RC_ODYSSEY_I2CC_RESET_ERROR"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd57f8419:
        d["Register FFDC"]="ODY_SCRATCH_REGS_SCOM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_4_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_5_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_6_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_7_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_8_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_9_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_10_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_11_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_12_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_13_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_14_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_15_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::poz::FSXCOMP_FSXLOG_SCRATCH_REGISTER_16_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xd58fae5d:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_KEYWORD_MAX"
        d["FFDC"]="KEYWORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5a1d449:
        d["HwpReturnCode"]="RC_XIPC_RS4_DECOMPRESS_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5a3091d:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_INF_ERR"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5b325b5:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_EN_TX_DQ_PREAMBLE_PATTERN_U0"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5b65f6c:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5bb1e58:
        d["HwpReturnCode"]="RC_PMIC_DELAY_OUT_OF_RANGE"
        d["FFDC"]="DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5be404e:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PAU_MMIO_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5cacb9c:
        d["HwpReturnCode"]="RC_POZ_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5d3f55a:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_PG_ERR"
        d["FFDC"]="ECL2_PG_BIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5e9fd95:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="FLAG_CHECK_CACHE_INJECT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd5eee146:
        d["HwpReturnCode"]="RC_EXP_FLASH_COMMAND_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6018d2d:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_CONFIGURATION_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6068f8b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_VALUE"
        d["FFDC"]="TURBO_VID_COMPARE_IVID_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd619b509:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="DDR_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6211c0f:
        d["HwpReturnCode"]="RC_MSS_INVALID_PAGE_SIZE"
        d["FFDC"]="DRAM_WIDTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd623ba78:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6338916:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET2"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd63f0398:
        d["HwpReturnCode"]="RC_PSTATE_PB_PSTATE_STEP_EQ_0"
        d["FFDC"]="SYSTEM_PSTATE0_FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd64270ee:
        d["HwpReturnCode"]="RC_XGPE_RESET_TIMEOUT"
        d["FFDC"]="XGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd651fc99:
        d["HwpReturnCode"]="RC_POZ_CPLT_NOT_ALIGNED_ERR"
        d["FFDC"]="PERV_CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd66bfe5a:
        d["HwpReturnCode"]="RC_XIPC_RINGID_RINGPROPS_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd69cc088:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_INVALID_CMD"
        d["FFDC"]="BOOT_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6a18de0:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR_2"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6a1d9a0:
        d["HwpReturnCode"]="RC_MSS_NO_PORT_POWER"
        d["FFDC"]="IDLE_UTILIZATION_DIMM_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6aee42f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT7_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6b61110:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6ba47e9:
        d["HwpReturnCode"]="RC_P10_IOHS_POLL_ACTION_STATE_ERROR"
        d["FFDC"]="PAUC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6c4063b:
        d["HwpReturnCode"]="RC_XIPC_XIP_API_MISC_ERROR"
        d["FFDC"]="XIP_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6cfa8a6:
        d["HwpReturnCode"]="RC_PM_SUSPEND_XGPE_FAILS"
        d["FFDC"]="GPE3XISRR0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6d4064c:
        d["HwpReturnCode"]="RC_P10_IOP_TOP_PHY_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6eae5e5:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6f351ec:
        d["HwpReturnCode"]="RC_PIBMEM_PIB_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6f3f8b3:
        d["HwpReturnCode"]="RC_P10_CHTM_CTRL_TIMEOUT"
        d["FFDC"]="DELAY_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6f8a0bf:
        d["HwpReturnCode"]="RC_QMEC_FUNC_CALL_ARGUMENT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd6fd8590:
        d["HwpReturnCode"]="RC_PSTATE_PB_UT_FREQ_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd703b5ab:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd7274fdb:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd739a9ba:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_CLOCKS_OFF"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd75b82cc:
        d["HwpReturnCode"]="RC_BCE_BUF_SMALLER_FOR_NON_HCODE_SECTION"
        d["FFDC"]="CMN_RING_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd75b88df:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_MULTIPLE_MASTER_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd7711b4e:
        d["Register FFDC"]="REG_FFDC_EXP_MEMDIAGS_FAILURE"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBMR0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBCFGQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCB_CNTLQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCB_CNTLSTATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSTATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBMCATQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBPARMQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAGRAQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MBSEC1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MBSTRQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBISTFIRQ",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAMR0A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAMR1A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAMR2A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBAMR3A0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD4Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD5Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD6Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBFD7Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSA0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSA1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSA2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBSA3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBEA0Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBEA1Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBEA2Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_MCBIST_MCBEA3Q",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xd780eda0:
        d["Register FFDC"]="OCC_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OISR0_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OIMR0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OITR0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OISR1_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OIMR1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OITR1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_CCSR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR0_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR1_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR2_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR3_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBAMODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVCTL3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_PBA_PBAO_PBASLVRST",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEIVPR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_SCOM_OCCLFIR_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMDBG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIRAMEDR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE0_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE1_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE2_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_GPE3_OCB_GPEXIDBGPRO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OINKR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OINKR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCFLG1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G0ISR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G1ISR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G2ISR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G3ISR0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G0ISR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G1ISR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G2ISR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_G3ISR1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCS0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCS1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCS2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCCS3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xd78b520a:
        d["HwpReturnCode"]="RC_P10_OMI_SETUP_BARS_INVALID_BAR_1"
        d["FFDC"]="BAR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd7909bb1:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR13_BAD_TCCD_L"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd798f93e:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd79d92c9:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd7a02076:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_THREAD_STOP_ERR"
        d["FFDC"]="THREAD_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd7af0a3d:
        d["HwpReturnCode"]="RC_SETUP_REF_CLOCK_NE_TERM_UNAVAILABLE"
        d["FFDC"]="PROC_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd7d5ac26:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="SECONDARY_CONFIG_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd7f02828:
        d["HwpReturnCode"]="RC_PMIC_EFUSE_BLOWN"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd7fd1f88:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR5_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="EXPECTED_OPERABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd806c178:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="CHIP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd82d0e81:
        d["HwpReturnCode"]="RC_MSS_TOO_MANY_DIMMS_ON_PORT"
        d["FFDC"]="DIMM_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd83846ff:
        d["HwpReturnCode"]="RC_EXP_UPDATE_AUTH_FAIL"
        d["FFDC"]="MCHP_ERROR_CODE_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd84e59d2:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="DRAM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd879dce8:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="AMB_COND_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd887c1b0:
        d["HwpReturnCode"]="RC_P10_MSS_FAILED_SYNC_MODE"
        d["FFDC"]="OMI_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd88a08ba:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd8c08a2e:
        d["HwpReturnCode"]="RC_SYSTEM_IN_CHECKSTOP_STATE"
        d["FFDC"]="QME_EISR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd8cc6f96:
        d["HwpReturnCode"]="RC_SELF_REST_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd8dd2573:
        d["Register FFDC"]="REG_FFDC_RNG_SELF_TEST_FAIL"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::NX_PBI_RNG_ST0",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::NX_PBI_RNG_ST1",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::NX_PBI_RNG_ST2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::NX_PBI_RNG_ST3",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::NX_PBI_RNG_RDELAY",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::NX_PBI_RNG_CFG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xd8f00e71:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd8fb498f:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd901e2b6:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLOFF_RD_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9023548:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd903870f:
        d["HwpReturnCode"]="RC_POZ_THOLD_ERR"
        d["FFDC"]="READ_CLK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9104126:
        d["HwpReturnCode"]="RC_NO_PMIC_DT_DDR5_TARGETS_FOUND"
        d["FFDC"]="NUM_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9218433:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET0"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd92394c4:
        d["HwpReturnCode"]="RC_L3_PURGE_DONE_TIMEOUT"
        d["FFDC"]="L3_PURGE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd92ccc10:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_WRITE_WHILE_BUSY"
        d["FFDC"]="TP_TPCHIP_OCC_OCI_OCB_P2S_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd931149a:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9349dda:
        d["HwpReturnCode"]="RC_MSS_PORT_DOES_NOT_SUPPORT_MAJORITY_FREQ"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd939f646:
        d["HwpReturnCode"]="RC_PM_OCC_GPE0_HALT_TIMEOUT"
        d["FFDC"]="GPE0_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd93ce9f9:
        d["HwpReturnCode"]="RC_FBC_CORE_TOPO_HOMER_SCOM_ERROR"
        d["FFDC"]="OPERATION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd958bef8:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9791f92:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_LATENCY"
        d["FFDC"]="IOHS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9854af7:
        d["HwpReturnCode"]="RC_UNSUPPORTED_ATTR_LEVEL"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9870b55:
        d["HwpReturnCode"]="RC_CORECACHE_REALIGN_TIMEOUT"
        d["FFDC"]="QUAD_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd990082c:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_PSI_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd99a818c:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_DMA"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9ba8f87:
        d["HwpReturnCode"]="RC_POZ_I2CC_RESET_ERROR"
        d["FFDC"]="ENGINE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9c81389:
        d["HwpReturnCode"]="RC_L3_CLK_SYNC_DROP_TIMEOUT"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9d9d935:
        d["HwpReturnCode"]="RC_POZ_I2CC_RESET_ERROR"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9de3735:
        d["HwpReturnCode"]="RC_BAD_POUNDW_VPD_READ"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9f3d07a:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TOTAL_RECOVERY_ATTEMPTS_EXCEEDED"
        d["FFDC"]="MAX_ATTEMPTS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xd9f8cc89:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_UNDERFLOW"
        d["FFDC"]="FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda11573c:
        d["HwpReturnCode"]="RC_PMIC_EFUSE_BLOWN"
        d["FFDC"]="THRESHOLD_LOW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda274f83:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda288cb7:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda34c34c:
        d["HwpReturnCode"]="RC_OCC_CONTROL_MEM_BOOT_LENGTH_MISMATCH"
        d["FFDC"]="ACTLENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda4da619:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_CLOCK_ATTRIBUTES"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda531858:
        d["HwpReturnCode"]="RC_PSTATE_PB_PSTATE0_FREQ_NOT_SET"
        d["FFDC"]="SYSTEM_PSTATE0_FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda567d50:
        d["HwpReturnCode"]="RC_PM_OCBINIT_BAD_Q_LENGTH_PARM"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda56daf3:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR12_BAD_VREFCS"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda6cce08:
        d["HwpReturnCode"]="RC_P10_SBE_PLL_INITF_UNSUPPORTED_PLL_BUCKET"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda86f601:
        d["HwpReturnCode"]="RC_ODY_OUT_OF_BOUNDS_RANK_PASSED_TO_SWIZZLE"
        d["FFDC"]="MAX_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xda98667f:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="MRW_MAX_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdaa7d205:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_SIZE_RC"
        d["FFDC"]="SECTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdaace873:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="EPS_GB_PERCENTAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdadc80bd:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_IOLINK_SEARCH_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdae97d6e:
        d["HwpReturnCode"]="RC_XGPE_INIT_TIMEOUT"
        d["FFDC"]="XSR_IAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdaec1c54:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb2241d8:
        d["HwpReturnCode"]="RC_MSS_SPD_TIMING_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb2356d4:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR12_BAD_VREFCS"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb2dc590:
        d["HwpReturnCode"]="RC_P10_TOD_SETUP_INVALID_TOPOLOGY_RX"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb360c84:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_IMAGE_SIZE"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb54c985:
        d["HwpReturnCode"]="RC_EXP_TWI_UNEXPECTED_STATUS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb58e9c7:
        d["HwpReturnCode"]="RC_MSS_CALC_POWER_CURVE_DIVIDE_BY_ZERO"
        d["FFDC"]="PORT_DATABUS_UTIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb5dc49d:
        d["HwpReturnCode"]="RC_PM_OCC_GPE0_HALT_TIMEOUT"
        d["FFDC"]="GPE0_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb5e9311:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="GOOD_NORMAL_CORES_PER_SORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb6bb515:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR34_RTT_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb6e8845:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_MISSING_FLAG"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb950dbf:
        d["HwpReturnCode"]="RC_P10_LOAD_IOP_XRAM_IMG_ERROR"
        d["FFDC"]="HW_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdb9b5584:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R04_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdbbf3b26:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdbc665ca:
        d["HwpReturnCode"]="RC_XIPC_MVPD_CHIPLET_ID_MESS"
        d["FFDC"]="CHIPLET_SEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdbdb0eef:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdc0ccf84:
        d["HwpReturnCode"]="RC_QME_SRAM_ACCESS_DENIED"
        d["FFDC"]="USE_BYTE_BUFFER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdc39d670:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_OPCODE_ERR"
        d["FFDC"]="OPCODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdc4bde97:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdc57190b:
        d["HwpReturnCode"]="RC_CORE_CHANGE_DONE_RESCLK_ENTRY_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdc698d9f:
        d["HwpReturnCode"]="RC_MSS_MAINT_BAD_RANK_INPUT"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdca706f0:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_INIT_TIMEOUT_ERROR"
        d["FFDC"]="PEC_MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdcd0e0dc:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdcd7a57e:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_SIZING"
        d["FFDC"]="RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdcdef5fd:
        d["HwpReturnCode"]="RC_P10_TOD_TIMER_START_SIGNAL_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdcf0ca92:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_XSCOM_BAR_ATTR_ERR"
        d["FFDC"]="BAR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdcfdb073:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdd24d50b:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="MRANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdd35ac1f:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="VDM_OVERVOLT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdd3e34fd:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="TOPOSCOMS2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdd42f5e4:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="ENABLED1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdd5a11c7:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdd5d02e0:
        d["Register FFDC"]="REG_FFDC_ADU_FBC_NOT_INITIALIZED"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPBR_AD_SND_MODE_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::PB_COM_SCOM_ES3_STATION_MODE",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::perv::ATTN_INTERRUPT_REG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xdd70661e:
        d["HwpReturnCode"]="RC_P10_INVALID_LINK_CONFIG_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdd737336:
        d["Register FFDC"]="PERV_CTRL_REGISTERS_CFAM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_PERV_CTRL0_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_PERV_CTRL1_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xdd83ea29:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_FEATURE_LOOKUP_ERROR"
        d["FFDC"]="MODE_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xddaf47e3:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_TRAINING_FAILURE_MAIL"
        d["FFDC"]="TRAINING_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xddb4434e:
        d["HwpReturnCode"]="RC_MVPD_RING_FUNC_INVALID_RS4_HEADER"
        d["FFDC"]="HEADER_SCAN_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xddbfc20d:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_NSL_FAILED"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xddd02634:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde069b3c:
        d["HwpReturnCode"]="RC_PMSR_SHIFT_INACTIVE_TIMEOUT"
        d["FFDC"]="PMSR_SHIFT_INACTIVE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde19115b:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_CMD_FAIL"
        d["FFDC"]="STATUS_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde2388ea:
        d["HwpReturnCode"]="RC_MSS_MAINT_DO_STEER_ALL_SPARES_DEPLOYED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde25014d:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNKNOWN_ERROR"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde2aecc2:
        d["HwpReturnCode"]="RC_PM_AVSBUS_WRITE_VOLTAGE_ERROR"
        d["FFDC"]="OVERCURRENT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde2b967c:
        d["HwpReturnCode"]="RC_XGPE_INIT_DEBUG_HALT"
        d["FFDC"]="XGPE_STATE_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde2efa4e:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_HOTPLUG_CONSISTENCY_ERR"
        d["FFDC"]="ADDRESS1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde33e21d:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde7bafce:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="LOCAL_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde88a1bf:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="GEN_HASH_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xde8e5b50:
        d["HwpReturnCode"]="RC_INVALID_SBE_FFDC"
        d["FFDC"]="INVALID_ERRVAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdea39e6a:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdeaaa5d3:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="DL_FIR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdeb465a1:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="ECO_CACHES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdec4e3db:
        d["HwpReturnCode"]="RC_TEST_TEMPSENSOR_TARGET0"
        d["FFDC"]="TARGET_TEMP_SENSOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdec73b5f:
        d["HwpReturnCode"]="RC_MSS_VOLT_INVALID_DRAM_GEN"
        d["FFDC"]="DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdec90508:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL_DDR5_4U"
        d["FFDC"]="PMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdec9f4fa:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET2"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdecc9c2e:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR112_BAD_DFE_GAIN_BIAS"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xded37a39:
        d["HwpReturnCode"]="RC_CORE_CHANGE_DONE_RESCLK_ENTRY_TIMEOUT"
        d["FFDC"]="CORE_CHANGE_DONE_RESCLK_ENTRY_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xded3c75a:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_UNSUPPORTED_SPLIT"
        d["FFDC"]="IOHS_LINK_SPLIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xded6d0cd:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IDD_RDP_AC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdee0ecd1:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET8"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdefa0318:
        d["HwpReturnCode"]="RC_BAD_BIST_PARAMS_FORMAT"
        d["FFDC"]="BIST_PARAMS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdf3cfc98:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_WRITE_PREAMBLE"
        d["FFDC"]="WRPRE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdf41fb7d:
        d["HwpReturnCode"]="RC_PM_AVSBUS_UNAVAILABLE_RESOURCE_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdf5c3649:
        d["HwpReturnCode"]="RC_PPEBAR_TOPOLOGY_INIT_ERROR"
        d["FFDC"]="TOPO_SCOM_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdfa1a208:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="IRT_RDP_DC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdfce59de:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="OMIC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdfe368b4:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="DL0_CONFIG1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdfe9523a:
        d["HwpReturnCode"]="RC_XIPC_MVPD_PG_KEYWORD_VERSION_ERROR"
        d["FFDC"]="MVPD_PGSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdfea202f:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_MCBIST_FAILED_TO_START"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdff4fc26:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_TARGET0"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xdffaa90d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET2"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe0252abe:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_CLOCKS_OFF"
        d["FFDC"]="TRACE_ARRAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe0399c94:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET2"
        d["FFDC"]="TARGET_DIMM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe06dbda6:
        d["HwpReturnCode"]="RC_SET_SYS_FREQ_ORIGINAL_CORRUPTION"
        d["FFDC"]="ORIG_FLOOR_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe072d682:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_OVERFLOW"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe07309e1:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_UNEXPECTED_ERR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe08a649e:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MAX_SIZE_ERR"
        d["FFDC"]="OP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe09e7ba8:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_PREAMBLE_CTRL"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe0bb89bd:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="FIR_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe0cc6653:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_NUMBER_OF_EFD_IS_ZERO"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe0de870e:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_ERR"
        d["FFDC"]="SHIFTED_B_ERR_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe0e1217f:
        d["HwpReturnCode"]="RC_TARGET_ENTRY_MAGIC_WORD_MISMATCH"
        d["FFDC"]="TARGET_INS_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1114037:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_PARITY_UECC_ERROR"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe11a51e9:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_HEADER_ERR"
        d["FFDC"]="HEADER_B3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe12de812:
        d["HwpReturnCode"]="RC_EXP_UPDATE_CMD_FAILED"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe13085ee:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR38_ODTLON_NT_ATTR_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe13cda35:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe13e9b45:
        d["HwpReturnCode"]="RC_MSS_TCCDL_OVERFLOW_CALC"
        d["FFDC"]="FTB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1497a92:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_IMAGE_SIZE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe14defa6:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_OVERFLOW"
        d["FFDC"]="LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe15c617e:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_CALCULATION_ERR"
        d["FFDC"]="DL_LANE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe16b9c10:
        d["HwpReturnCode"]="RC_QME_BCE_HW_ERR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe18d8f16:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_SYNDROME_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1a14c0c:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1a5a7cd:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="PLAT_BIT_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1b880c3:
        d["HwpReturnCode"]="RC_IO_PPE_DONE_DCCAL_FAILED"
        d["FFDC"]="POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1ca285c:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL_DDR5_4U"
        d["FFDC"]="RETURN_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1d16c57:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="FAILING_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1d965a3:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ACTIVE_BACKING_OVERLAP_ERR"
        d["FFDC"]="ACTIVE_CORES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1e58334:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_GARD_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1e93c70:
        d["HwpReturnCode"]="RC_MSS_EXP_CATASTROPHIC_DRAMINIT_TRAINING_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1f55c5c:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_FAILED"
        d["FFDC"]="SSH_OTR_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe1fe3ea5:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe2048eb0:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_UNSUPPORTED_FLAGS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe2105009:
        d["HwpReturnCode"]="RC_POZ_IO_TX_TDR_MULTI_GROUP_ERROR"
        d["FFDC"]="GROUPA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe21a9905:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_ADDR"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe235b726:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_SIZE_ERROR"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe25a461e:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_COMMIT_NO_DOORBELL"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe25e7699:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_LOC_ENDP_TARGET_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe26f99b7:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LCO_MODE_SETUP_ADAPTIVE_ATTR_ERR"
        d["FFDC"]="ADAPTIVE_N"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe27224ae:
        d["HwpReturnCode"]="RC_PM_OCB3_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="CHANNEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe275e996:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_MISALIGNED_ADDR"
        d["FFDC"]="FLAGS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe2838f26:
        d["HwpReturnCode"]="RC_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="CBS_CS_IDLE_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe285d96e:
        d["HwpReturnCode"]="RC_SECURE_BOOT_FAIL"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe286a3f1:
        d["HwpReturnCode"]="RC_PGPE_INIT_PSTATE_AUTOSTART_TIMEOUT"
        d["FFDC"]="OCCFLAG2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe289bfec:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe28e07ba:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_CMD_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe2ba762a:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP1_BUF_SIZE"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe2ce1e35:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_ZERO_ERROR"
        d["FFDC"]="FREQUENCY_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe2eca6d8:
        d["HwpReturnCode"]="RC_P10_DETERMINE_ECO_MODE_TARGET_STATE_ERR"
        d["FFDC"]="ASSOCIATED_EQ_FUNCTIONAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe2fd2516:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_PRE_CONDITION_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe310b67f:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe31fc6ca:
        d["HwpReturnCode"]="RC_ODY_OUT_OF_BOUNDS_RANK_PASSED_TO_SWIZZLE"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe32746c8:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe33bbf8e:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_SETUP_ERROR"
        d["FFDC"]="REGISTER_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe361d9bb:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe370505d:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_MEM_ADDR_RANGE_OUT_OF_BOUNDS"
        d["FFDC"]="MEM_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe3715d2c:
        d["HwpReturnCode"]="RC_MSS_FREQ_NOT_EQUAL_MAX_DOMAIN_FREQ"
        d["FFDC"]="MEM_PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe37f2dce:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_TARGET0"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe383172e:
        d["HwpReturnCode"]="RC_EXP_INBAND_LE_DATA_RANGE"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe383b806:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_INIT_FAIL"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe3a0d49b:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe3b3c07b:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_SECONDARY_TOPOLOGY_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe3bc9419:
        d["HwpReturnCode"]="RC_P10_OTL_NOT_IN_RESET"
        d["FFDC"]="MISC_CONFIG2_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe3cc0c16:
        d["HwpReturnCode"]="RC_PROCPM_AVSBUS_POLL_TIMEOUT"
        d["FFDC"]="AVSBUS_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe3e0c600:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_SCOM_PATH"
        d["FFDC"]="POLL_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe3f9946c:
        d["HwpReturnCode"]="RC_PMIC_ORDER_OUT_OF_RANGE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe3fbf808:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe40131ad:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET8"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe40298c6:
        d["HwpReturnCode"]="RC_MSS_OUT_OF_BOUNDS_INDEXING"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe404265f:
        d["HwpReturnCode"]="RC_PM_OCB0_GET_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe40c292a:
        d["HwpReturnCode"]="RC_P10_PURGE_COMPLETE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe4129003:
        d["HwpReturnCode"]="RC_QME_HCODE_BUILD_FAIL"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe4219f5e:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_OVERFLOW"
        d["FFDC"]="PSTATE_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe42935e6:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_OUT_OF_RANGE"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe42cd35f:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_OVERFLOW"
        d["FFDC"]="PDW_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe4406e0f:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNKNOWN_ERROR"
        d["FFDC"]="EXTENDED_ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe449d9af:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="CLOCK_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe46637c8:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA21"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe493cae7:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_INVALID_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe495bf5b:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe4b1a334:
        d["HwpReturnCode"]="RC_P10_L3ERR_EXTRACT_SYNDROME_NOT_FOUND"
        d["FFDC"]="TRACE_ARRAY_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe4ba472d:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_OFFSET_ERROR"
        d["FFDC"]="OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe4e0c3ec:
        d["HwpReturnCode"]="RC_MSS_RANK_OUT_OF_RANGE"
        d["FFDC"]="RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe4ec43ae:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_ATTR_VECTORS_INCORRECT"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe507ea85:
        d["HwpReturnCode"]="RC_SBE_ARRAYINIT_POLL_THRESHOLD_ERR"
        d["FFDC"]="LOOP_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe50ac9d7:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_FAILED"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe5254ffc:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET2"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe5375922:
        d["HwpReturnCode"]="RC_XGPE_BAD_MODE"
        d["FFDC"]="BADMODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe54b35e0:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="EQ_POSITION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe54cac32:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL_DDR5"
        d["FFDC"]="N_MODE_PMIC0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe55d6980:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_INCONSISTENT_RANK"
        d["FFDC"]="FIRST_PORT_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe57011c7:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IDC_INVALID"
        d["FFDC"]="POWERSAVE_TDP_IDC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe5735da4:
        d["HwpReturnCode"]="RC_MSS_EXP_I2C_CMD_FAIL"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe57897d6:
        d["HwpReturnCode"]="RC_P10_HW549287_WAR_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe58d076a:
        d["HwpReturnCode"]="RC_PSTATE_PB_IQ_VPD_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe5a184ad:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_RANK"
        d["FFDC"]="RANK3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe5a49783:
        d["HwpReturnCode"]="RC_QME_HCODE_TRANSFER_FAILED"
        d["FFDC"]="QME_BCEBAR1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe5fb4b3f:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_CI"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe603f3dd:
        d["HwpReturnCode"]="RC_MSS_OUT_OF_BOUNDS_INDEXING"
        d["FFDC"]="LIST_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6206e97:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_SIZE_ERROR"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe65883b4:
        d["HwpReturnCode"]="RC_PM_OCB_PUT_NO_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6691015:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET8"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe66da78d:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_HW529794_TIMEOUT_MC"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6767f50:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_IC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6829593:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="TP_TPCHIP_OCC_OCI_OCB_P2S_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6889881:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_PERDRAM_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe68bcef0:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6978f78:
        d["HwpReturnCode"]="RC_QMEC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe69ec93a:
        d["HwpReturnCode"]="RC_DATA_STORE_INTR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6b2e715:
        d["HwpReturnCode"]="RC_PM_SET_HOMER_BAR_NOT_4MB_ALIGNED"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6b5cd2b:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_DESIGNATION_ERR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe6cd75c0:
        d["Register FFDC"]="ROOT_CTRL_REGISTERS_SCOM"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL0_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL1_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL2_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL3_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL4_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL5_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL6_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL7_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPVSB_FSI_W_MAILBOX_FSXCOMP_FSXLOG_ROOT_CTRL8_RW",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xe6d133d0:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_CFAM_PATH"
        d["FFDC"]="SB_MSG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7150f1d:
        d["HwpReturnCode"]="RC_EXP_INBAND_BE_DATA_RANGE"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe750ed1e:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_RANGE_OVERLAP_ERR"
        d["FFDC"]="ENABLED2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7553e4b:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_UNDERFLOW"
        d["FFDC"]="LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe75adc32:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_RX_LANE_BUSY_TIMEOUT_ERROR"
        d["FFDC"]="IOHS_FABRIC_LANE_REVERSAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7758532:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe779b06c:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe798a10d:
        d["HwpReturnCode"]="RC_MSS_FAILED_SYNC_MODE"
        d["FFDC"]="NEST_FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe79f4723:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP4_BUF_SIZE"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7a2f23c:
        d["HwpReturnCode"]="RC_XGPE_INIT_TIMEOUT"
        d["FFDC"]="TIMEOUT_COUNTER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7a7fb55:
        d["HwpReturnCode"]="RC_P10_ADU_FBC_NOT_INITIALIZED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7ac9376:
        d["HwpReturnCode"]="RC_SBE_SPI_CMD_STATUS_REG_UNSUPPORTED_STATE"
        d["FFDC"]="BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7c170a8:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_PRE_CONDITION_ERR"
        d["FFDC"]="PARTNER_LINK_DOWN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7c706e9:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_HALF_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_ENDP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7cbf96a:
        d["HwpReturnCode"]="RC_P10_SBE_SCOMINIT_FABRIC_BROADCAST_ATTR_ERR"
        d["FFDC"]="BROADCAST_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe7ef34bb:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_LOCK_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe802f7cd:
        d["HwpReturnCode"]="RC_PMIC_ENABLE_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe80cdb0b:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL_DDR5"
        d["FFDC"]="N_MODE_PMIC1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe811a45b:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="TOR_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8138b27:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="NEW_BAD_BITS_R0_BYTE0_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8177594:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR5_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_VDD_ENDURANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe81fe6fb:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_FLAGS"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8242f4c:
        d["HwpReturnCode"]="RC_POZ_I2C_FIFO_TIMEOUT_ERROR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe82988fb:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET8"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe82ce43d:
        d["HwpReturnCode"]="RC_EXP_UPDATE_WRITE_FAIL"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8325b8a:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_RDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe84361e7:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_INVALID_VALUES_ERR"
        d["FFDC"]="R_T0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe845e3f0:
        d["HwpReturnCode"]="RC_MSS_ODY_CCS_INCONSISTENT_RANK"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe85e8a78:
        d["HwpReturnCode"]="RC_P10_PSIHBCR_INBOUND_QUEUE_NOT_EMPTY"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8796ef2:
        d["HwpReturnCode"]="RC_NO_PMIC_DT_DDR5_TARGETS_FOUND"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe898d6bf:
        d["HwpReturnCode"]="RC_CORECACHE_REALIGN_TIMEOUT"
        d["FFDC"]="CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8a76ced:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_PER_DRAM_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8ac93fb:
        d["HwpReturnCode"]="RC_POZ_CHIPLET_NOT_FOUND"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8b0f420:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_FUSED_NOT_EVEN_ERROR"
        d["FFDC"]="CORE_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8b9fe0d:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS_DDR5"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8d1602e:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_MAX_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8e2682c:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW_ADDL_INFO"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8e799ad:
        d["HwpReturnCode"]="RC_POZ_I2C_WAIT_FOR_CMD_COMP_TIMEOUT_ERROR"
        d["FFDC"]="POLLINGINT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8e7cf9e:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_BLOCK_SIZE_IS_OUT_OF_BOUNDS"
        d["FFDC"]="EFD_MEMORY_SPACE_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8e81dfc:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe8ef19ee:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_DLL_LOCK_FAIL"
        d["FFDC"]="OMI_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe90b83d0:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_ERROR"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe912aab1:
        d["HwpReturnCode"]="RC_P10_MFG_OMI_SCREEN_DOWNSTREAM_CRC"
        d["FFDC"]="CRC_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe919c97c:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="MAXPOLLS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe92747fd:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_UNDERFLOW"
        d["FFDC"]="LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe92f20c5:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT13_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9357c6a:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_WITH_MNFG_REPAIRS_DISABLED"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9450df8:
        d["HwpReturnCode"]="RC_PM_MALF_DEAD_CORES_FOUND"
        d["FFDC"]="OCC_FLAG2_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe94c919b:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVPG_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OVERLAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe95b6932:
        d["HwpReturnCode"]="RC_ADDR_NOT_RECOGNIZED"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe95efb89:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_FW_VER_ERROR"
        d["FFDC"]="FW_VER_0_ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe976281d:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_SL_FAILED"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe977bee5:
        d["HwpReturnCode"]="RC_P10_PUT_REG_RAM_INACTIVE_THREAD_HW542214"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe97a05f4:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_OUT_OF_RANGE"
        d["FFDC"]="EXP_BAR_ADDR_RANGECHECK_HIGH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe98477d9:
        d["HwpReturnCode"]="RC_POZ_CBS_NOT_IN_IDLE_STATE"
        d["FFDC"]="HW_DELAY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe98e1108:
        d["HwpReturnCode"]="RC_QME_INVALID_CORE_EX_CONFIG"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9910c96:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9a6175b:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR39_ODTLOFF_RD_ATTR_VALUE"
        d["FFDC"]="DIMM_RANK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9d15082:
        d["HwpReturnCode"]="RC_CORE_CHANGE_DONE_RESCLK_ENTRY_TIMEOUT"
        d["FFDC"]="CORE_CHANGE_DONE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9d22543:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET2"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9dcb6b2:
        d["HwpReturnCode"]="RC_MSS_TCCDL_OVERFLOW_CALC"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9de128a:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="RSP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9e1121a:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xe9fbb94f:
        d["HwpReturnCode"]="RC_RCS_CLOCK_ERR"
        d["FFDC"]="READ_SNS1LTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea1c2dfe:
        d["HwpReturnCode"]="RC_PM_AVSBUS_MASTER_BAD_CRC_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea331240:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_DELAY_UNDERFLOW"
        d["FFDC"]="ERROR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea37338c:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea504a4d:
        d["HwpReturnCode"]="RC_MSS_EXP_BOOT_CONFIG_SERDES_INIT_FAIL"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea521e75:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea5491f3:
        d["HwpReturnCode"]="RC_MSS_INVALID_FREQUENCY"
        d["FFDC"]="FREQ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea7aa498:
        d["HwpReturnCode"]="RC_PM_AVSBUS_ZERO_RESP_ERROR"
        d["FFDC"]="RAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea7ce2ad:
        d["HwpReturnCode"]="RC_NO_MALF_PM_RESET"
        d["FFDC"]="OCC_FLAG2_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea7fa4a9:
        d["HwpReturnCode"]="RC_P10_HW540133_LLB_WA_ERR"
        d["FFDC"]="WA_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xea91fc17:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_TIMEOUT_EQ"
        d["FFDC"]="CPLT_STAT0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeaa12e63:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_COMPUTED_ZERO_TCK_STD"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeaad9399:
        d["HwpReturnCode"]="RC_P10_HW540133_FLB_WA_ERR"
        d["FFDC"]="WA_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeabcf2b4:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_KEYWORD_MAX"
        d["FFDC"]="ACTUAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeabe3a18:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeaca5860:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_DQS_RTT_PARK_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeaec0196:
        d["HwpReturnCode"]="RC_RCS_PLL_LOCK_ERR"
        d["FFDC"]="ATTR_CP_REFCLOCK_SELECT_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeaf55761:
        d["HwpReturnCode"]="RC_PSTATE_PB_CORE_FLOOR_FREQ_GT_CF6_FREQ"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeafa5151:
        d["HwpReturnCode"]="RC_P10_TOD_POLLING_DELAY_CALC_OVERFLOW"
        d["FFDC"]="TOD_DIVISOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb05284b:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVC_BAR_ATTR_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb0de3b7:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_NEW_BAD_BITS_FOUND"
        d["FFDC"]="NEW_BAD_BITS_R0_BYTE4_7"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb2fe69c:
        d["HwpReturnCode"]="RC_MSS_INVALID_FINE_REFRESH_MODE"
        d["FFDC"]="FINE_REF_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb31f797:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_COPIER_BUILD_FAIL"
        d["FFDC"]="ACTUAL_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb3625dc:
        d["HwpReturnCode"]="RC_MSS_RESTORE_REPAIRS_BYTE_OUT_OF_RANGE"
        d["FFDC"]="MAX_BYTE_IDX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb48ceea:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_NM_REGION_MAP_ERROR"
        d["FFDC"]="CURR_GROUP_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb512076:
        d["HwpReturnCode"]="RC_MSS_EFF_CONFIG_MIRROR_DISABLED"
        d["FFDC"]="MRW_HW_MIRRORING_ENABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb6922a2:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_TRAINING_TIMEOUT_FAIL"
        d["FFDC"]="FW_VERSION_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb832309:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="TX0_LANE_CONTROL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb8d2a5f:
        d["HwpReturnCode"]="RC_EXP_OMI_TRAIN_ERR"
        d["FFDC"]="ACTUAL_SM_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb8e468d:
        d["HwpReturnCode"]="RC_P10_WAIT_FOR_ERAT_IDLE"
        d["FFDC"]="NX_PBI_SHIM_ERAT_STATUS_CONTROL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeb921264:
        d["HwpReturnCode"]="RC_INVALID_PMIC_DT_DDR5_TARGET_CONFIG"
        d["FFDC"]="EXPECTED_MIN_PMICS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xebaa0459:
        d["HwpReturnCode"]="RC_PIBMEM_ECC_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xebab300a:
        d["HwpReturnCode"]="RC_MSS_VOLT_WRONG_NUMBER_OF_VOLTAGES"
        d["FFDC"]="EXPECTED_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xebb9607b:
        d["HwpReturnCode"]="RC_MSS_EXP_HALF_DIMM_MODE_NOT_SUPPORTED"
        d["FFDC"]="HALF_DIMM_SETTING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xebc0d3cc:
        d["HwpReturnCode"]="RC_MSS_EXP_SENSOR_CACHE_ENABLE_FAILED"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xebe689ed:
        d["HwpReturnCode"]="RC_QME_VREF_CALIBRATION_FAILED"
        d["FFDC"]="IS_IVRM_ENABLED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xebf29caf:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec153ae4:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="IRT_RDP_AC_10MA_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec1a1b6c:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_CAL_ERROR"
        d["FFDC"]="MASTER_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec295d58:
        d["HwpReturnCode"]="RC_THOLD_ERR"
        d["FFDC"]="CLOCK_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec2f85ae:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec3f028b:
        d["HwpReturnCode"]="RC_P10_PUTSRAM_TARGET_NOT_FUNCTIONAL_ERROR"
        d["FFDC"]="PERV_CHIPLET_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec45bead:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="HW_IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec460b19:
        d["HwpReturnCode"]="RC_POZ_VDN_POWER_NOT_ON"
        d["FFDC"]="FSI2PIB_STATUS_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec493e78:
        d["HwpReturnCode"]="RC_EXPAND_RING_UTIL_INVALID_PARAMETERS"
        d["FFDC"]="IN_IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec625794:
        d["HwpReturnCode"]="RC_MSS_EXP_ENTERPRISE_SETUP_ERROR"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec64c3ea:
        d["HwpReturnCode"]="RC_TIMEFAC_FROM_PC_XFER_RECEIVE_DONE_TIMEOUT"
        d["FFDC"]="TIMEFAC_FROM_PC_XFER_RECEIVE_DONE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec75939e:
        d["HwpReturnCode"]="RC_TEST_DIMM_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec862e8e:
        d["HwpReturnCode"]="RC_MSS_EXP_RSP_ARG_FAILED"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xec88ac71:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xecba04d0:
        d["HwpReturnCode"]="RC_P10_RAM_STATUS_IN_RECOVERY_ERR"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xecbc29ef:
        d["HwpReturnCode"]="RC_MSS_POWER_THERMAL_DECODE_ERROR"
        d["FFDC"]="DIMM_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xecbe2bbc:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_USER_INPUT_MSDG_ERROR"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xecd196cd:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR5_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="EXPECTED_ENDURANT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xecd7b178:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_IOLINK_POS_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xecdd70fa:
        d["Register FFDC"]="SBE_IPL_SCRATCH_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_1_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_2_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_3_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_4_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_5_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_6_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_7_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= CFAM_DATA_LEN:
                dReg = {"CFAM Register": " scomt::perv::FSXCOMP_FSXLOG_SCRATCH_REGISTER_8_FSI",
                             "Hex Dump": hexDump(data, i, i+CFAM_DATA_LEN)}
                i += CFAM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xed247417:
        d["HwpReturnCode"]="RC_P10_RAM_INVALID_REG_TYPE_ACCESS_ERR"
        d["FFDC"]="REG_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed2559b9:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE6"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed28e3fd:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_UTILS_CONFIG_MODE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed2ff07f:
        d["HwpReturnCode"]="RC_PM_OCB0_PUT_DATA_POLL_NOT_FULL_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed302f98:
        d["HwpReturnCode"]="RC_POZ_HEARTBEAT_NOT_SET_ERR"
        d["FFDC"]="PERV_HEARTBEAT_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed41559f:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_NONE_ERR"
        d["FFDC"]="LOC_IOLINK_EVN_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed4ecc05:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed71f454:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_CALC_NCK"
        d["FFDC"]="NCK_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed95c11d:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed9d7d03:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT8_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xed9de0c1:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR"
        d["FFDC"]="GROUP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeda21724:
        d["HwpReturnCode"]="RC_IO_EXT_CMD_POLL_FAILED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeda40506:
        d["HwpReturnCode"]="RC_P10_GEN_XSCOM_INIT_SCOM_XLATE_ERR"
        d["FFDC"]="EC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeda4ced3:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_IOHS_FREQ_LOOKUP_ERR"
        d["FFDC"]="FREQ_IOHS_MHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xedb3a631:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="RANK2_BADDQ64_80"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xedb4ccb8:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET_MASK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xedb8c77d:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_EN_TX_DM_PREAMBLE_PATTERN"
        d["FFDC"]="PATTERN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xedf2038b:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_TRACE_RUNNING"
        d["FFDC"]="TRCTRL_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xedf36926:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_MEMORY_BAR_NOT_POSSIBLE"
        d["FFDC"]="ADJUSTED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee0c1e00:
        d["HwpReturnCode"]="RC_XIPC_MVPD_RINGTABLE_VERSION_MISMATCH"
        d["FFDC"]="RINGTABLE_VERSION_MVPD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee1647d9:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_PLANAR_DRAM_DIMM_TYPE"
        d["FFDC"]="DIMM_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee17fc0d:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_WOULD_OVERFLOW"
        d["FFDC"]="SIZE_OF_THIS_RING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee1e301a:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_HARDCODE_UNSUPPORTED"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee2a038c:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNSUPPORTED_MODE"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee345b8f:
        d["HwpReturnCode"]="RC_POZ_IO_TX_TDR_MULTI_GROUP_ERROR"
        d["FFDC"]="GROUPB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee39efb0:
        d["HwpReturnCode"]="RC_P10_NX_STOP_UMAC_FETCHING_NEW_CRBS_TIMEOUT"
        d["FFDC"]="NX_PBI_UMAC_STATUS_CONTROL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee43e51b:
        d["HwpReturnCode"]="RC_XIPC_IMAGE_SIZING"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee6bd440:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="TCK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee718ca1:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_ARY_FAILED"
        d["FFDC"]="CLK_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee84a6ed:
        d["HwpReturnCode"]="RC_UNEXPECTED_ATTR_FORMAT_VER"
        d["FFDC"]="HEADER_MINOR_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee899d8f:
        d["HwpReturnCode"]="RC_P10_PURGE_CMD_REG_ERR"
        d["FFDC"]="CMD_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xee94839e:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_PLAT_ERROR"
        d["FFDC"]="PLAT_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeec70566:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeec736fc:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_MRW_POWER_CONTROL_REQUESTED"
        d["FFDC"]="FUNCTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeec9c390:
        d["HwpReturnCode"]="RC_P10_PGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeed30e94:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeee6a84b:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_CALCULATION_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeee791f0:
        d["HwpReturnCode"]="RC_PMIC_NON_REDUNDANT_FAIL"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeef50f81:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="BACKING_CACHES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xeef6fd0a:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP2_BUF"
        d["FFDC"]="TEMP2_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef0a9f1d:
        d["HwpReturnCode"]="RC_EXP_UNKNOWN_REVISION"
        d["FFDC"]="EFUSE_IMAGE_OUT_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef33aba5:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="NOMINAL_TDP_IAC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef461924:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_NEEDED_CONFIG_ERROR"
        d["FFDC"]="ACTIVE_CORES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef4b102d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef52dc2c:
        d["HwpReturnCode"]="RC_PSTATE_PB_PDV_TDP_CURRENT_ERROR"
        d["FFDC"]="MODEL_DATA_FLAG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef6282e9:
        d["HwpReturnCode"]="RC_MSS_INVALID_DIMM_SPEED"
        d["FFDC"]="DIMM_SPEED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef744dd1:
        d["HwpReturnCode"]="RC_INVALID_ATTR_INDEX"
        d["FFDC"]="HGT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef91cb27:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_TDP_IAC_INVALID"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xef9973f6:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xefa7b352:
        d["HwpReturnCode"]="RC_XIPC_RING_SECTION_SIZING"
        d["FFDC"]="MAX_RING_SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xefb85f73:
        d["HwpReturnCode"]="RC_PSTATE_PB_XLATE_OVERFLOW"
        d["FFDC"]="SYSTEM_PSTATE0_FREQ_KHZ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xefbea318:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="RING_BUF_SIZE2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xefc1a1a7:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT_MC"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xefca78b8:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_OP"
        d["FFDC"]="OPERATION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xefd07bc3:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_HEADER_DATA_INVALID"
        d["FFDC"]="VCS_STEP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xefdef794:
        d["HwpReturnCode"]="RC_INVALID_POUNDV_VERSION"
        d["FFDC"]="SUPPORTED_VERSION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xefff36fe:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_DIFF_GROUP_ID_ERR"
        d["FFDC"]="REM_FBC_CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0096c88:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR3_BAD_CYCLE_ALIGN"
        d["FFDC"]="MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf00bb4c2:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP1_BUF"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf00cae31:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_UNKNOWN_ERROR"
        d["FFDC"]="ERROR_CODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf00e5fcb:
        d["HwpReturnCode"]="RC_PM_OCB0_GET_DATA_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf02bc20c:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_INVALID_BUS"
        d["FFDC"]="TRACE_BUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf059d9ef:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf05f81f8:
        d["HwpReturnCode"]="RC_MSS_NEGATIVE_VPD_SIZE"
        d["FFDC"]="SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf06619ba:
        d["HwpReturnCode"]="RC_MSS_OUT_OF_BOUNDS_INDEXING"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf06e6c00:
        d["HwpReturnCode"]="RC_PMIC_DROPPED_INTO_N_MODE_DDR5"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf06f3fde:
        d["HwpReturnCode"]="RC_P10_L3_FLUSH_PREVIOUS_PURGE_ACTIVE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0798f39:
        d["HwpReturnCode"]="RC_MSS_FREQ_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="DESIRED_CAS_LATENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf07ed0bd:
        d["Register FFDC"]="REG_FFDC_RAM_CORE_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_THRCTL_TCTLCOM_RAS_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_FIR_RAM_MODEREG",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_FIR_RAM_CTRL",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_FIR_RAM_STATUS",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_THRCTL_TCTLCOM_HOLD_OUT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_FIR_HOLD_OUT",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::c::EC_PC_PMC_THREAD_INFO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xf083b993:
        d["HwpReturnCode"]="RC_INVALID_ATTR_INDEX"
        d["FFDC"]="COL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf094f094:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_EPSILON_UNSUPPORTED_TABLE_TYPE_ERR"
        d["FFDC"]="TABLE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0a0dbe7:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_GROUP_SIZE"
        d["FFDC"]="MC_POS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0bcb603:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP"
        d["FFDC"]="MAX_REGION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0cb7918:
        d["HwpReturnCode"]="RC_COLLECT_EXPLORER_ERROR"
        d["FFDC"]="EXP_SAVED_IMAGEA_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0d165cf:
        d["HwpReturnCode"]="RC_MSS_INVALID_CAST_CALC_NCK"
        d["FFDC"]="CORRECTION_FACTOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0dc6268:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_CONFIG_ERR"
        d["FFDC"]="IOHS_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0edb84a:
        d["HwpReturnCode"]="RC_ODY_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="DRAM_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0f55920:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_ACCESS_SIZE_ERROR"
        d["FFDC"]="ACCESS_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0f5f755:
        d["HwpReturnCode"]="RC_HCODE_INVALID_PHASE"
        d["FFDC"]="IMAGE_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0f6fee3:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="MVPD_SCAN_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0fad22e:
        d["HwpReturnCode"]="RC_P10_IO_TX_TDR_SCREEN_MULTI_GROUP_ERROR"
        d["FFDC"]="OMI_GROUPA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf0fbb8db:
        d["HwpReturnCode"]="RC_P10_PURGE_CMD_REG_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf10fe047:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="REQUIRED_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf1160575:
        d["HwpReturnCode"]="RC_XPMR_HDR_BUILD_FAIL"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf12723b1:
        d["HwpReturnCode"]="RC_P10_NHTM_CTRL_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf129c6f9:
        d["HwpReturnCode"]="RC_RCS_CLOCK_TEST_OUT_ERROR"
        d["FFDC"]="CLOCK_A_OK"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf12af6c8:
        d["HwpReturnCode"]="RC_P10_OTL_NOT_IN_RESET"
        d["FFDC"]="STATUS_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf12b9449:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="CMP_HASH_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf12e3872:
        d["HwpReturnCode"]="RC_MSS_SPD_TIMING_FAIL"
        d["FFDC"]="TIMING"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf1369192:
        d["HwpReturnCode"]="RC_MSS_BAD_CL_CAST"
        d["FFDC"]="CL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf13bbf48:
        d["HwpReturnCode"]="RC_MSS_EXP_FW_STATUS_POLLING_TIMEOUT"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf160dfa0:
        d["HwpReturnCode"]="RC_ODY_SCRATCH_REGS_UTILS_BUCKET_OUT_OF_RANGE_ERR"
        d["FFDC"]="BUCKET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf16c842d:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="LINK_CNFG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf181f9e0:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_MULTIPLE_RX_IDENTIFIED_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf19890c0:
        d["HwpReturnCode"]="RC_OPIT_INTERRUPT_NOT_CLEAR"
        d["FFDC"]="OPIT_AND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf1c02c71:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="ERROR_VALID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf1e7859e:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_INVALID_PARAMETERS"
        d["FFDC"]="IMAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf1e84e7e:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT16_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf1f8cc14:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_VPD_BUFFER_INADEQUATE_FOR_DDR"
        d["FFDC"]="REQUIRED_DDR5_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf1fe4b78:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_OUT_OF_RANGE"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2008ed2:
        d["HwpReturnCode"]="RC_PM_STATIC_POUNDV_EC_MISMATCH"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2164098:
        d["HwpReturnCode"]="RC_ODY_PHYINIT_INVALID_PREAMBLE_CTRL"
        d["FFDC"]="PREAMBLECTRL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2233ab0:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR14_BAD_ECS_CID"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2410ac2:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_VENDOR_IDS"
        d["FFDC"]="VENDOR_ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf28068ee:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MULTIPLE_MASTER_DESIGNATION_ERR"
        d["FFDC"]="MASTER_CHIP_SYS_NEXT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf289c09b:
        d["HwpReturnCode"]="RC_CORE_SPECIAL_WAKEUP_NOT_FEASIBLE"
        d["FFDC"]="CORE_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2b0a9a7:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="EFD_METADATA16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2b51416:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET1"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2c9648f:
        d["HwpReturnCode"]="RC_PMIC_REDUNDANCY_FAIL_DDR5"
        d["FFDC"]="N_MODE_PMIC2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2d9b430:
        d["HwpReturnCode"]="RC_PMIC_VOLTAGE_OUT_OF_RANGE"
        d["FFDC"]="VOLTAGE_BITMAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf2e56284:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_OFFSET_ERROR"
        d["FFDC"]="PEC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf3042264:
        d["HwpReturnCode"]="RC_MSS_OUTPUT_OVERFLOW_CALC_UTIL"
        d["FFDC"]="RESULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf306841d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET8"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf30bd7ac:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR6_TRTP_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf31484d6:
        d["HwpReturnCode"]="RC_MSS_NO_DATABUS_UTILIZATION"
        d["FFDC"]="PORT_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf31d2e22:
        d["HwpReturnCode"]="RC_EXP_UPDATE_INV_IMAGE_LEN"
        d["FFDC"]="IMAGE_LEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf3218740:
        d["HwpReturnCode"]="RC_PM_QME_FIRINIT_BAD_MODE"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf34a5e09:
        d["HwpReturnCode"]="RC_TOR_TRAVERSAL_ERROR"
        d["FFDC"]="RING_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf36484b8:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_MEM_ADDR_RANGE_OUT_OF_BOUNDS"
        d["FFDC"]="IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf36cc6e9:
        d["HwpReturnCode"]="RC_ILLEGAL_EXPECTED_STOP_LEVEL"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf38513c4:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_INVALID_COMMAND"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf38b7d16:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_ACTIVE_ECO_ERROR"
        d["FFDC"]="ATTR_ACTIVE_CORES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf39d46cf:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_GARD_TARGET1"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf39e4eeb:
        d["HwpReturnCode"]="RC_XGPE_BOOT_LOADER_BUILD_FAIL"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf3a969fe:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET8"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf3ab7682:
        d["HwpReturnCode"]="RC_PM_AVSBUS_NO_RESP_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf3d45359:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_NONHYBRID_MDS"
        d["FFDC"]="HYBRID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf3e5052e:
        d["HwpReturnCode"]="RC_XIPC_TOR_GET_SINGLE_RING_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf40082aa:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_DRAM_GENERATION_MIXING_NOT_SUPPORTED"
        d["FFDC"]="FIRST_DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4071c7f:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_ECO_TARGET"
        d["FFDC"]="CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf408c086:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_DUPLICATE_FABRIC_ID_ERR"
        d["FFDC"]="CHIP_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf447d75e:
        d["HwpReturnCode"]="RC_PM_OCB1_GET_DATA_ERROR"
        d["FFDC"]="DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf44aab11:
        d["HwpReturnCode"]="RC_TEST_MEMPORT_TARGET0"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4500399:
        d["HwpReturnCode"]="RC_P10_IOP_XRAM_FW_VER_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf452f55f:
        d["HwpReturnCode"]="RC_MSS_VOLT_DDR5_TYPE_REQUIRED_VOLTAGE"
        d["FFDC"]="ACTUAL_VDDQ_OPERABLE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf47a3f9b:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_INIT_TIMEOUT"
        d["FFDC"]="TFMR_EXPECTED_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf47e9167:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_FREQ_DROP_VALUE"
        d["FFDC"]="VDM_NORMAL_SMALL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf482ef47:
        d["HwpReturnCode"]="RC_P10_PAU_SCOMINIT_IOHS_OCAPI_CONFIG_ERR"
        d["FFDC"]="IOHS_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf499dd5b:
        d["HwpReturnCode"]="RC_P10_XIP_SECTION_PGPE_PPMR"
        d["FFDC"]="EC_LEVEL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf49abc54:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_NEST_FREQ_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4a2be28:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R73_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4ac3f50:
        d["HwpReturnCode"]="RC_XIPC_DYNAMIC_INIT_FAILED"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4b8542c:
        d["HwpReturnCode"]="RC_P10_IO_TX_TDR_SCREEN_ERROR"
        d["FFDC"]="TDR_STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4bb862c:
        d["HwpReturnCode"]="RC_MSS_PLUG_RULES_PLANAR_DRAM_GEN"
        d["FFDC"]="DRAM_GEN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4c3b5e1:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="FFDC_REG_DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4d6cd64:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR4_BAD_MIN_REFRESH_RATE"
        d["FFDC"]="WIDE_RANGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4d8d9b6:
        d["HwpReturnCode"]="RC_XIPC_MVPD_PG_KEYWORD_VERSION_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4f6e4d0:
        d["HwpReturnCode"]="RC_P10_RAM_THREAD_INVALID_ERR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf4f7c633:
        d["HwpReturnCode"]="RC_P10_UMAC_QUIESCE_FAILED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf50093b4:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="ICS_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf5018ab9:
        d["HwpReturnCode"]="RC_PROC_GETTRACEARRAY_CORE_NOT_DUMPABLE"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf5100a53:
        d["HwpReturnCode"]="RC_ATOMIC_LOCK_OWNER_ID_INVALID"
        d["FFDC"]="ACTUAL_LOCK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf52877be:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR6_WR_RECOVERY_ATTR_VALUE"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf52eddf9:
        d["HwpReturnCode"]="RC_PM_PSS_ADC_TIMEOUT"
        d["FFDC"]="POLLCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf52f373a:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="SYS_WB"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf562398b:
        d["HwpReturnCode"]="RC_P10_OTL_NOT_IN_RESET"
        d["FFDC"]="PAU_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf59755d2:
        d["HwpReturnCode"]="RC_EXP_INBAND_RSP_CRC_ERR"
        d["FFDC"]="COMPUTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf597a542:
        d["HwpReturnCode"]="RC_P10_HW540133_LLB_WA_ERR"
        d["FFDC"]="LAST_ATTEMPT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf5e9b2a2:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_START_NOMAINT"
        d["FFDC"]="C_RAS_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf5ef932c:
        d["HwpReturnCode"]="RC_MSS_EXP_DDR_PHY_INIT_TRAINING_FAIL"
        d["FFDC"]="RANK1_BADDQ0_63"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf5f50add:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT21_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf60c0013:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_MISALIGNED_ADDR"
        d["FFDC"]="TSIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6111264:
        d["HwpReturnCode"]="RC_INVALID_RING_ID"
        d["FFDC"]="RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf614978a:
        d["Register FFDC"]="REG_FFDC_EXP_SPI_FLASH_ERR_INFO"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "EXPLR_TP_MB_UNIT_TOP_LOCAL_FIR",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xf61ff427:
        d["HwpReturnCode"]="RC_XIP_SECTION_APPEND_APPEND_RC"
        d["FFDC"]="SECTION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf62bdeef:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_IO_ERR"
        d["FFDC"]="REG_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf62c3e30:
        d["HwpReturnCode"]="RC_P10_OMI_TRAIN_ERR"
        d["FFDC"]="STATUS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf63e04e9:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_NO_IOHS_MATCH_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf65425a6:
        d["HwpReturnCode"]="RC_SBE_SPI_HANG_TIMEOUT"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6660b02:
        d["HwpReturnCode"]="RC_PM_OCBINIT_BAD_Q_LENGTH_PARM"
        d["FFDC"]="TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf666fe8e:
        d["HwpReturnCode"]="RC_MSS_MDS_I2C_CMD_FAIL"
        d["FFDC"]="MDS_MDIA_CTL_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6752b49:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="MVPD_RING_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf679ed92:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_REVISION_FOR_MODULE_SPECIFC"
        d["FFDC"]="DIMM_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf67dded8:
        d["HwpReturnCode"]="RC_IO_PPE_TX_TDR_FAILED"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf67f98e5:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_THRESHOLD_VALUE"
        d["FFDC"]="OP_POINT_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf68ed9a6:
        d["HwpReturnCode"]="RC_LPC_ACCESS_TIMEOUT"
        d["FFDC"]="DATA"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf69653af:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_WOF_UT_ERROR"
        d["FFDC"]="VCS_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf697c7cc:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_ARY_FAILED"
        d["FFDC"]="CLK_STAT_ARY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6a29a7b:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUND_W_INVALID_VID_ORDER"
        d["FFDC"]="EQ_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6b9e433:
        d["HwpReturnCode"]="RC_DIMM_RUNNING_IN_N_MODE"
        d["FFDC"]="N_MODE_PMIC3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6be5d20:
        d["HwpReturnCode"]="RC_P10_BOOT_MODE_BITVEC_MERGE_ERROR"
        d["FFDC"]="HW_IMAGE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6cbf01f:
        d["HwpReturnCode"]="RC_XIPC_RINGID_CHIPLETPROPS_ERROR"
        d["FFDC"]="TOR_MAGIC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6cf9b3e:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FFDC_ERR"
        d["FFDC"]="LATENCY_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf6e8409b:
        d["HwpReturnCode"]="RC_P10_ADU_STATUS_REG_ADDRESS_ERR"
        d["FFDC"]="STATUSREG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7088c64:
        d["HwpReturnCode"]="RC_XGPE_HCODE_BUILD_FAIL"
        d["FFDC"]="SYS_PHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf70a26e9:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="RING_BUF3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf71a3f6d:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_SIZE_PARM"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf71e710f:
        d["HwpReturnCode"]="RC_PGPE_PBA_INIT_FAILED"
        d["FFDC"]="MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf72c3230:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_ADU_STATUS_MISMATCH_ERR"
        d["FFDC"]="CHIP_DATA_VALID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf734dd00:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT_MC"
        d["FFDC"]="SP_WKUP_REG_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf73724ed:
        d["HwpReturnCode"]="RC_PM_QME_BAR_SIZE_INVALID"
        d["FFDC"]="CURPROC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7454f49:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="CORE_SSHSRC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf746155e:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="R06_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf74923c7:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_TRACE_MUX_INCORRECT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7702fa4:
        d["HwpReturnCode"]="RC_EXP_FW_UPDATE_WRITE_NO_DOORBELL"
        d["FFDC"]="SEQUENCE_NUMBER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7706c2f:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_CLOCKS_OFF"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7720aca:
        d["HwpReturnCode"]="RC_PM_PBA_SLAVE_BUSY_AFTER_RESET"
        d["FFDC"]="SLAVENUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf775404c:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="THREAD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf782ed08:
        d["HwpReturnCode"]="RC_P10_ADU_UTILS_INVALID_FLAG"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7ac0403:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_DMB_MFG_ID"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7d03547:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_GARD_TARGET1"
        d["FFDC"]="MY_TEST_UINT64"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7f1c672:
        d["HwpReturnCode"]="RC_PMIC_STATUS_ERRORS"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7f4159b:
        d["HwpReturnCode"]="RC_TEST_PERV_TARGET1"
        d["FFDC"]="MY_TEST_UINT16"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7f72a3d:
        d["HwpReturnCode"]="RC_QME_HCODE_BUILD_FAIL"
        d["FFDC"]="MAX_ALLOWED_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf7fb2c1d:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET2"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf811277b:
        d["HwpReturnCode"]="RC_P10_SBE_MCS_SETUP_NO_MC_FOUND_ERR"
        d["FFDC"]="MC3_PG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf819de44:
        d["HwpReturnCode"]="RC_POZ_FILE_HASH_MISMATCH"
        d["FFDC"]="CMP_HASH_5"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf824c6b3:
        d["HwpReturnCode"]="RC_ODY_GETTRACEARRAY_INVALID_MUX"
        d["FFDC"]="MUX_SELECT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8323b5c:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET0"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf834b06b:
        d["HwpReturnCode"]="RC_MSS_FREQ_NO_COMMON_SUPPORTED_CL"
        d["FFDC"]="MC_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf83ff4b9:
        d["HwpReturnCode"]="RC_HW_IMG_PTR_ERROR"
        d["FFDC"]="HW_IMG_BUF_PTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf84b0210:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_DIMM_DECONFIG_GARD_TARGET2"
        d["FFDC"]="MY_TEST_UINT32"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8562052:
        d["HwpReturnCode"]="RC_PM_BACKING_CACHEPOWER_DOWN_ECO_ERR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf857aae8:
        d["HwpReturnCode"]="RC_ODY_MEMDIAGS_PORT_NOT_FUNCTIONAL"
        d["FFDC"]="ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf859650a:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_INVALID_MCC_CONFIG"
        d["FFDC"]="MCC1_MCC_NUM_IN_GROUP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf86a5955:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf86ff6ff:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET1"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf87f7a2c:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_LARGE_DROOP_OVERFLOW"
        d["FFDC"]="PDW_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8812072:
        d["HwpReturnCode"]="RC_NCU_PURGE_DONE_TIMEOUT"
        d["FFDC"]="MC_CORE_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf88278fd:
        d["HwpReturnCode"]="RC_CORECACHE_POW_CTRL_TIMEOUT"
        d["FFDC"]="PFET_SENSES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8840bc8:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_DECONFIGURE_GARD_TARGET8"
        d["FFDC"]="MY_TEST_UINT8"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf88eda46:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_SMF_256MB_MINIMUM_ERROR"
        d["FFDC"]="SMF_CONFIG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8bb28d7:
        d["HwpReturnCode"]="RC_XIPC_MVPD_OVLY_RING_HEADER_MISMATCH"
        d["FFDC"]="OVLY_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8c4c6c2:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_SLOPE_ERROR"
        d["FFDC"]="ICS_TDP_DC_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8cbafc5:
        d["HwpReturnCode"]="RC_EXP_TWI_INVALID_STATUS_ID"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8cf3c6f:
        d["HwpReturnCode"]="RC_SPCWKUP_CORE_TIMEOUT"
        d["FFDC"]="ENTITY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8d3309f:
        d["HwpReturnCode"]="RC_LINK_TRAINING_DONE_POLL_FAILED"
        d["FFDC"]="DONE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8d4f4d1:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_OFFSET_ERROR"
        d["FFDC"]="VPD_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8d55848:
        d["HwpReturnCode"]="RC_MSS_INVALID_CW_ENCODING"
        d["FFDC"]="BCW"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8db6de0:
        d["HwpReturnCode"]="RC_SBE_ARRAYINIT_POLL_THRESHOLD_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8deb8e7:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_MEMPORT_DECONFIGURE_GARD_TARGET1"
        d["FFDC"]="TARGET_PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8e03d9a:
        d["HwpReturnCode"]="RC_PM_BLOCK_WAKEUP_INTR_FAILED"
        d["FFDC"]="OP_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf8e78ca9:
        d["HwpReturnCode"]="RC_SBE_BOOT_CHECK_ERR_CFAM_PATH"
        d["FFDC"]="POLL_COUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf94eaafc:
        d["HwpReturnCode"]="RC_XIPC_DD_LEVEL_MISMATCH_ERROR"
        d["FFDC"]="MVPD_DDDATA3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf97c6112:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf97fc62b:
        d["HwpReturnCode"]="RC_SRAM_ABIST_DONE_BIT_ERR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf98d48dc:
        d["HwpReturnCode"]="RC_XGPE_IMG_NOT_FOUND_IN_HW_IMG"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf99f8e11:
        d["HwpReturnCode"]="RC_PM_DPLL_FREQ_UPDATE_FAIL"
        d["FFDC"]="DPLL_STAT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf9aef27d:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_REMOTE_LINK_ID_ERR"
        d["FFDC"]="LOCAL_LINK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf9ba729a:
        d["HwpReturnCode"]="RC_GETTRACEARRAY_INVALID_TARGET"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf9c23c88:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR37_ODTLOFF_ATTR_VALUE"
        d["FFDC"]="MIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf9ce88ca:
        d["HwpReturnCode"]="RC_MSS_FREQ_DDR5_FAILED_TO_FIND_SUPPORTED_CL"
        d["FFDC"]="TRCD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf9e628a0:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR5_DRV_IMP_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf9ece95d:
        d["HwpReturnCode"]="RC_P10_RAM_NOT_SETUP_OPCODE_ERR"
        d["FFDC"]="ALLOW_MULT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xf9fc5602:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_ADDRESS_NOT_ALIGNED"
        d["FFDC"]="BAR_BASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfa0069ef:
        d["HwpReturnCode"]="RC_PM_AVSBUS_STATUS_READ_ERROR"
        d["FFDC"]="PROC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfa35bde6:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR5_DRV_IMP_FIELD_VALUE"
        d["FFDC"]="DIMM_IN_ERROR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfa36cbd3:
        d["Register FFDC"]="OCB_CHANNEL2_FFDC_REGISTERS"
        while (len(data) - i) > 0:
            registerArray = []
            if (len(data) - i) >= POS_LEN:
                chipPosLabel = "Chip Position: " + memConcat(data, i, i+4)[0]
                i += POS_LEN
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBAR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBCSR2_RO",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLBR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSLCS2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHBR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSHCS2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWCR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBLWSBR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_OCBSES2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            if (len(data) - i) >= SCOM_DATA_LEN:
                dReg = {"SCOM Register": "scomt::proc::TP_TPCHIP_OCC_OCI_OCB_PIB_OCBESR2",
                             "Hex Dump": hexDump(data, i, i+SCOM_DATA_LEN)}
                i += SCOM_DATA_LEN
                registerArray.append(dReg)
            d[chipPosLabel] = registerArray
    if ffdcId == 0xfa3e87f9:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_PHY_INIT_RSP_DATA_LENGTH"
        d["FFDC"]="FW_PARTITION_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfa42278b:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_PDI_KEYWORD_HEADER_ERR"
        d["FFDC"]="HEADER_B2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfa4ca1dd:
        d["HwpReturnCode"]="RC_SBE_SELECT_EX_INSUFFICIENT_BACKING_CACHES_ERROR"
        d["FFDC"]="ATTR_BACKING_CACHES_NUM"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfa5c6646:
        d["HwpReturnCode"]="RC_PSTATE_PB_BIASED_POUNDV_ZERO_ERROR"
        d["FFDC"]="IDD_TDP_DC_A"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfa87ddc7:
        d["HwpReturnCode"]="RC_SBE_SPI_INVALID_PORT_MULTIPLEX_SET"
        d["FFDC"]="BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfa9b8d42:
        d["HwpReturnCode"]="RC_POZ_I2C_FAILED_TO_LOCK_ENGINE_TIMEOUT_ERROR"
        d["FFDC"]="TIMEOUTCOUNT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfaa76dbb:
        d["HwpReturnCode"]="RC_EXP_SPI_FLASH_AUTH_FAIL_MFG"
        d["FFDC"]="EXP_ACTIVE_LOG_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfaae9d41:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_MVPD_READ_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfab05561:
        d["HwpReturnCode"]="RC_XIPC_XIP_GET_SECTION_ERROR"
        d["FFDC"]="SECTION_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfab0ac78:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR32_CA_ODT_ATTR_VALUE"
        d["FFDC"]="STRAP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfacbac8b:
        d["HwpReturnCode"]="RC_P10_ATTR_UPDATE_MVPD_READ_ERR"
        d["FFDC"]="KEYWORD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfaee3ef6:
        d["HwpReturnCode"]="RC_EXTRACT_SBE_RC_PIBMEM_ECC_ERR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfaf65fc4:
        d["HwpReturnCode"]="RC_P10_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="OMI_FREQ_1"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfb02ee1e:
        d["HwpReturnCode"]="RC_MSS_EXP_POLL_ABORT_FW_STATUS_BUSY"
        d["FFDC"]="COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfb1e72c8:
        d["HwpReturnCode"]="RC_PM_PBA_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="BAR_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfb36863d:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_MEMORY_SPACE_SIZE_ERROR"
        d["FFDC"]="EFD_MEMORY_SPACE_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfb452bbf:
        d["HwpReturnCode"]="RC_P10_TOD_MOVE_TOD_TO_TB_SCOM_XLATE_ERR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfba0a340:
        d["HwpReturnCode"]="RC_PGPE_INIT_DEBUG_HALT"
        d["FFDC"]="PGPE_BASE_ADDRESS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfba0ebe2:
        d["HwpReturnCode"]="RC_XIPC_RS4_OVERLAY_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfbbb38ab:
        d["HwpReturnCode"]="RC_SHADOW_DIS_CORE_SHADOW_STATE_TIMEOUT"
        d["FFDC"]="SHADOW_DIS_CORE_SHADOW_STATE_POLL_TIMEOUT_HW_NS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfbd4d66e:
        d["HwpReturnCode"]="RC_P10_SBE_LOAD_BOOTLOADER_INVALID_TARGET_ADDRESS"
        d["FFDC"]="CHIP_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfbe7e048:
        d["HwpReturnCode"]="RC_P10_L2ERR_EXTRACT_TA_WRONG_SIZE_ERR"
        d["FFDC"]="TA_DATA_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfbf82657:
        d["HwpReturnCode"]="RC_EXP_FLASH_COMMAND_ERR"
        d["FFDC"]="REQ_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc175fc2:
        d["HwpReturnCode"]="RC_INVALID_SCAN_TARGET_TYPE"
        d["FFDC"]="VALID_TARGET_TYPES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc22a1b4:
        d["HwpReturnCode"]="RC_MSS_INVALID_VPD_FREQ_LIST_PASSED"
        d["FFDC"]="EXPECTED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc258108:
        d["HwpReturnCode"]="RC_ODY_DRAMINIT_REPAIRS_EXCEEDED"
        d["FFDC"]="DISABLES_BYTE4"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc285100:
        d["HwpReturnCode"]="RC_INVALID_PMIC_DT_DDR5_TARGET_CONFIG"
        d["FFDC"]="EXPECTED_MIN_DT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc3332d6:
        d["HwpReturnCode"]="RC_VIN_BULK_BELOW_TOLERANCE"
        d["FFDC"]="NOMINAL_MV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc43b19a:
        d["HwpReturnCode"]="RC_MSS_CCS_STUCK_IN_PROGRESS"
        d["FFDC"]="MC_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc4cfa28:
        d["HwpReturnCode"]="RC_P10_TOD_INIT_M_PATH_0_STEP_CHECK_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc618bdd:
        d["HwpReturnCode"]="RC_HCODE_INVALID_TEMP4_BUF"
        d["FFDC"]="TEMP4_BUF_SIZE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc6b4902:
        d["HwpReturnCode"]="RC_PSTATE_PB_RESCLK_INDEX_ERROR"
        d["FFDC"]="FREQ_REGIONS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc774b2c:
        d["HwpReturnCode"]="RC_P10_THREAD_CONTROL_STOP_FAIL"
        d["FFDC"]="C_RAS_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc84436d:
        d["HwpReturnCode"]="RC_P10_SBE_CORE_SPR_SETUP_MASTER_FUSED_CORE_PARTNER_NOT_FOUND"
        d["FFDC"]="FUSED_MODE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc858bc9:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_EFD_NOT_FOUND"
        d["FFDC"]="FREQUENCY"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc91a8f1:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_UNDERFLOW"
        d["FFDC"]="LIMIT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc987db1:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_LINK_VALIDATE_IOHS_TARGET_ERR"
        d["FFDC"]="LINK_CNFG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfc9e2eb3:
        d["HwpReturnCode"]="RC_POZ_I2C_STATUS_INTR_ERROR"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfcab6923:
        d["HwpReturnCode"]="RC_MSS_NEGATIVE_VPD_SIZE"
        d["FFDC"]="OCMB_TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfcab6beb:
        d["HwpReturnCode"]="RC_P10_IOHS_RESET_IOLINK_SEARCH_ERR"
        d["FFDC"]="HALF"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfcb40e5a:
        d["HwpReturnCode"]="RC_P10_SBE_EXIT_CACHE_CONTAINED_ECO_MODE_ERR"
        d["FFDC"]="ACTIVE_CORES"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfcc05bb3:
        d["HwpReturnCode"]="RC_PMIC_MISMATCHING_REVISIONS_DDR5"
        d["FFDC"]="REVISION_ATTR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfcc8cec9:
        d["HwpReturnCode"]="RC_PUTRING_OPCG_DONE_TIMEOUT"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfcede140:
        d["HwpReturnCode"]="RC_PSTATE_PB_WOF_OVERRIDE_INVALID"
        d["FFDC"]="SYS_RC"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfcf2fdff:
        d["HwpReturnCode"]="RC_P10_MSS_NO_SUPPORTED_FREQ"
        d["FFDC"]="PORT1_FREQ_SUPPORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfd1307f4:
        d["HwpReturnCode"]="RC_PM_AVSBUS_INVALID_DATA_ERROR"
        d["FFDC"]="BRIDGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfd1d8424:
        d["HwpReturnCode"]="RC_EXP_RESPONSE_WRONG_REQID"
        d["FFDC"]="FW_VERSION_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfd3ac7d5:
        d["HwpReturnCode"]="RC_QMEC_RINGID_API_ERROR"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfd4e318f:
        d["HwpReturnCode"]="RC_PM_QME_ADDR_ALIGNMENT_ERROR"
        d["FFDC"]="BAR_ADDR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfd5d9fa1:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_LINK_TRAIN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfd7cdaa7:
        d["HwpReturnCode"]="RC_VDN_PGOOD_NOT_SET"
        d["FFDC"]="CBS_ENVSTAT_READ"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfd8221ad:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_TOPOLOGY"
        d["FFDC"]="CONNECTED_GROUP_IDS"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfda675a2:
        d["HwpReturnCode"]="RC_QME_START_TIMEOUT"
        d["FFDC"]="OCC_FLAG_REG_VAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfdade58d:
        d["HwpReturnCode"]="RC_XIPC_INVALID_INPUT_BUFFER_PTR_PARM"
        d["FFDC"]="SYSPHASE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe108c82:
        d["HwpReturnCode"]="RC_EXP_UPDATE_DEV_SECTOR_INF_ERR"
        d["FFDC"]="MCHP_ERROR_CODE_3"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe133149:
        d["HwpReturnCode"]="RC_P10_SBE_SCRATCH_REGS_PCIE_FREQ_LOOKUP_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe1994ed:
        d["HwpReturnCode"]="RC_MSS_UNSUPPORTED_MRW_POWER_CONTROL_REQUESTED"
        d["FFDC"]="VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe2165f8:
        d["HwpReturnCode"]="RC_MSS_EXP_DRAMINIT_UNSUPPORTED_DRAM_WIDTH"
        d["FFDC"]="PORT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe2d5ff4:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_TEMPSENSOR_TARGET1"
        d["FFDC"]="TARGET_TEMP_SENSOR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe2dcab1:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_INVALID_LINK_STATE"
        d["FFDC"]="LINK_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe42977b:
        d["HwpReturnCode"]="RC_INVALID_RING_IMAGE"
        d["FFDC"]="RS4_HEADER"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe47fdfb:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR33_CA_ODT_PER_DRAM_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe4a9b01:
        d["HwpReturnCode"]="RC_MSS_EFF_GROUPING_UNABLE_TO_GROUP_DIMM"
        d["FFDC"]="MC_PORT_SUBCHANNELS_ENABLED"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe527e47:
        d["HwpReturnCode"]="RC_PSTATE_PB_DDS_ADJ_TRIP_OFFSET_OVERFLOW"
        d["FFDC"]="ERROR_VALUE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe59ec87:
        d["HwpReturnCode"]="RC_ODY_DRAM_INDEX_OUT_OF_BOUNDS"
        d["FFDC"]="INDEX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe67939c:
        d["HwpReturnCode"]="RC_P10_FBC_TDM_INJECT_PRE_CONDITION_ERR"
        d["FFDC"]="SELECTED_LINK_DOWN"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe7ef348:
        d["HwpReturnCode"]="RC_PUTRING_CHECKWORD_DATA_MISMATCH"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe92de23:
        d["HwpReturnCode"]="RC_MSS_INVALID_INDEX_PASSED"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe92e4a9:
        d["HwpReturnCode"]="RC_EXP_ROW_REPAIR_ENTRY_OUT_OF_BOUNDS"
        d["FFDC"]="DRAM_MAX"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfe96d47b:
        d["HwpReturnCode"]="RC_P10_IO_QUIESCE_LANE_NO_RX_IDENTIFIED_ERR"
        d["FFDC"]="IOHS_FABRIC_LANE_REVERSAL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfeca42d1:
        d["HwpReturnCode"]="RC_METADATA_ENABLE_REQUIRES_TEMPLATE_5_OR_9"
        d["FFDC"]="TMPL_9"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfee4b6fd:
        d["HwpReturnCode"]="RC_MSS_DDR5_MR34_RTT_FIELD_VALUE"
        d["FFDC"]="FIELD"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfeeb81ea:
        d["HwpReturnCode"]="RC_MSS_INVALID_SPD_NONHYBRID_MDS"
        d["FFDC"]="HYBRID_MEDIA_TYPE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfef731f3:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_TL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_LINK_TRAIN_NEXT"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff270388:
        d["HwpReturnCode"]="RC_XIPC_XIP_APPEND_ERROR"
        d["FFDC"]="OCCURRENCE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff4affba:
        d["HwpReturnCode"]="RC_CORECACHE_CLK_CTRL_SL_FAILED"
        d["FFDC"]="CLK_COMMAND"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff4b0791:
        d["HwpReturnCode"]="RC_P10_GETPUTMEMPROC_INVALID_SIZE_DMA"
        d["FFDC"]="TARGET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff52b471:
        d["HwpReturnCode"]="RC_P10_IO_INIT_DONE_TIMEOUT_ERROR"
        d["FFDC"]="DEBUG_STATE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff5886fe:
        d["HwpReturnCode"]="RC_PM_AVSBUS_EXCESSIVE_VOLTAGE_ERROR"
        d["FFDC"]="VOLTAGE"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff5be823:
        d["HwpReturnCode"]="RC_DDIMM_GET_EFD_UNSUPPORTED_FREQUENCY"
        d["FFDC"]="FREQ0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff5f1c43:
        d["HwpReturnCode"]="RC_RCS_FPLL_DESKEW_ERR"
        d["FFDC"]="MASTER_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff6a15f1:
        d["HwpReturnCode"]="RC_P10_PHB_PERST_ACTION_INVALID_ARGS_ERR"
        d["FFDC"]="PERSTACTION"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff6a5c22:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_2"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff74abbd:
        d["HwpReturnCode"]="RC_P10_FBC_EFF_CONFIG_LINKS_MULTIPLE_SPECIFICATION"
        d["FFDC"]="LOC_LINK_ID"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff790be2:
        d["HwpReturnCode"]="RC_P10_SBE_MCS_SETUP_NO_MC_FOUND_ERR"
        d["FFDC"]="CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff7da905:
        d["HwpReturnCode"]="RC_P10_SETUP_MMIO_BARS_INT_NVC_BAR_ATTR_ERR"
        d["FFDC"]="BAR_OFFSET"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff7fe472:
        d["HwpReturnCode"]="RC_P10_CHTM_CTRL_TIMEOUT"
        d["FFDC"]="HTM_STATUS_REG"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff82b60a:
        d["HwpReturnCode"]="RC_TEST_CALLOUT_PERV_TARGET8"
        d["FFDC"]="TARGET_PERV"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xff9dda59:
        d["HwpReturnCode"]="RC_P10_BUILD_SMP_MASTER_CONFIGURATION_ERR"
        d["FFDC"]="MASTER_CHIP_CURR"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xffadf294:
        d["HwpReturnCode"]="RC_SPI_CLK_ERR"
        d["FFDC"]="TARGET_CHIP"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xffc98351:
        d["HwpReturnCode"]="RC_PSTATE_PB_POUNDV_SLOPE_ERROR"
        d["FFDC"]="VDD_B"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xffde3603:
        d["HwpReturnCode"]="RC_MSS_EXP_INVALID_FW_ADAPTER_PROPERTIES_RSP_DATA_LENGTH"
        d["FFDC"]="ACTUAL_LENGTH"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xffef7bbd:
        d["HwpReturnCode"]="RC_P10_FAB_IOVALID_DL_FULL_NOT_TRAINED_RETRAIN_HALF_ERR"
        d["FFDC"]="LOC_IOLINK_EVN_FAIL"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    if ffdcId == 0xfff0989a:
        d["HwpReturnCode"]="RC_MSS_MRW_FREQ_MAX_FREQ_EMPTY_SET"
        d["FFDC"]="MSS_VPD_FREQ_0"
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))
    # if nothing is in dictionary yet, then ffdcId was not found
    if len(d) == 0:
        d["Unrecognized FFDC"] = f'0x{ffdcId:X}'
        if (len(data) - i):
            d["Hex Dump"]=hexDump(data, i, len(data))

    jsonStr = json.dumps(d)
    return jsonStr

# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/explorer/explorer_ocmb_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2018,2024
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

################################################################################
#                                Thresholds                                    #
################################################################################

# Threshold syntax:
#   threshold( field(<timebase>) [, mfg(<timebase>)|mfg_file(<mfg_theshold>)] );
#
# Timebase syntax:
#   <threshold_count> [/ [timbase_count] <sec|min|hour|day>]
#
# Note that <mfg_theshold> can be found in prdfMfgThresholds.lst
#
# Examples:
#   threshold( field( 1        ) );
#   threshold( field(32 /   day) );
#   threshold( field( 5 / 2 min) );
#   threshold( field(32 / 1 day), mfg(2 / hour) );
#   threshold( field( 2 /   min), mfg(1       ) );
#   threshold( field(32 /   day), mfg_file(P8CHIP_OFFNODE_BUS_CES) );

/** Threshold of 1 */
actionclass threshold1
{
    threshold( field(1) );
};

/** Threshold of 32 per day */
actionclass threshold32pday
{
    threshold( field(32 / day) );
};

/** Threshold of 5 per day */
actionclass threshold5pday
{
    threshold( field(5 / day) );
};

################################################################################
#                               Special Flags                                  #
################################################################################

/** SUE source */
actionclass SueSource { flag(UERE); };

/** SUE originated from somewhere else */
actionclass SueSeen { flag(SUE); };

################################################################################
#                               Simple Callouts                                #
################################################################################

# Callout self
actionclass calloutSelfHigh { callout(MRU_HIGH); };
actionclass calloutSelfMed  { callout(MRU_MED);  };
actionclass calloutSelfMedA { callout(MRU_MEDA); };
actionclass calloutSelfLow  { callout(MRU_LOW);  };

# 2nd Level Support
actionclass callout2ndLvlMed
{ callout(procedure(LEVEL2_SUPPORT), MRU_MED); };

/** Callout self with  low priority but don't gard it */
actionclass calloutSelfLowNoGard
{ callout(MRU_LOW, NO_GARD); };

actionclass level2_M_self_L
{
    callout2ndLvlMed;
    calloutSelfLowNoGard;
};

actionclass omi
{
    callout(connected(TYPE_OMI), MRU_MED);
};

actionclass omi_L
{
    callout(connected(TYPE_OMI), MRU_LOW);
};

actionclass omi_bus
{
    funccall("calloutBusInterface");
};

actionclass mem_port
{
    callout(connected(TYPE_MEM_PORT,0), MRU_MED);
};

actionclass mem_port_L
{
    callout(connected(TYPE_MEM_PORT,0), MRU_LOW, NO_GARD);
};

actionclass all_dimm_H
{
    funccall("CalloutAttachedDimmsHigh");
};

actionclass all_dimm_H_memport_L
{
    all_dimm_H;
    mem_port_L;
};

actionclass parent_proc
{
    callout(connected(TYPE_PROC), MRU_MED);
};

################################################################################
#                           Callouts with thresholds                           #
################################################################################

actionclass self_th_1
{
    calloutSelfMed;
    threshold1;
};

actionclass self_th_32perDay
{
    calloutSelfMed;
    threshold32pday;
};

actionclass parent_proc_th_32perDay
{
    parent_proc;
    threshold32pday;
};

actionclass level2_th_1
{
    callout2ndLvlMed;
    threshold1;
};

actionclass level2_th_32perDay
{
    callout2ndLvlMed;
    threshold32pday;
};

actionclass level2_M_self_L_th_1
{
    level2_M_self_L;
    threshold1;
};

actionclass omi_th_1
{
    omi;
    threshold1;
};

actionclass omi_bus_th_1
{
    omi_bus;
    threshold1;
};

actionclass omi_bus_th_32perDay
{
    omi_bus;
    threshold32pday;
};

actionclass mem_port_th_1
{
    mem_port;
    threshold1;
};

actionclass mem_port_th_32perDay
{
    mem_port;
    threshold32pday;
};

actionclass self_H_omi_L_th_1
{
    calloutSelfHigh;
    omi_L;
    threshold1;
};

actionclass all_dimm_H_memport_L_th_1
{
    all_dimm_H_memport_L;
    threshold1;
};

actionclass all_dimm_H_memport_L_th_32perDay
{
    all_dimm_H_memport_L;
    threshold32pday;
};

################################################################################
#                                   Special                                    #
################################################################################

/**
 * Threshold 32/day (field) and 1 (mnfg). Do not predictively callout on
 * threshold in the field, instead just mask.
 */
actionclass threshold_and_mask_th32
{
    threshold32pday;
    funccall("ClearServiceCallFlag"); # must be called after thresholding
};

actionclass threshold_and_mask_self
{
    calloutSelfMed;
    threshold_and_mask_th32;
};

actionclass threshold_and_mask_level2
{
    callout2ndLvlMed;
    threshold_and_mask_th32;
};

actionclass threshold_and_mask_mem_port
{
    mem_port;
    threshold_and_mask_th32;
};

actionclass threshold_and_mask_omi
{
    omi;
    threshold_and_mask_th32;
};

actionclass threshold_and_mask_omi_bus
{
    omi_bus;
    threshold_and_mask_th32;
};

/**
 * Threshold on first occurence. Do not predictively callout on threshold in the
 * field, instead just mask.
 */
actionclass threshold_and_mask_th1
{
    threshold1;
    funccall("ClearServiceCallFlag"); # must be called after thresholding
};

actionclass threshold_and_mask_self_th1
{
    calloutSelfMed;
    threshold_and_mask_th1;
};

actionclass omi_degraded_mode
{
    capture(kvco_fix);
    funccall("CheckKvcoFix");
    try( funccall("OmiRunningInDegradedMode"),
         try(funccall("CrcSideEffect_Ocmb"), omi_bus) );
    funccall("omiDegradeRetrainWorkaround");
    threshold1;
    funccall("OmiDegradeDD1Workaround"); # Must be called after threshold
};

actionclass threshold_and_mask_mnfgInfo_th1
{
    threshold1;
    funccall("ClearServiceCallFlag_mnfgInfo"); # must be called after threshold
};

actionclass self_th_1_noClearFirBits
{
    calloutSelfMed;
    threshold1;
    funccall("returnNoClearFirBits"); # must be called last
};

actionclass mem_port_th_1_noClearFirBits
{
    mem_port;
    threshold1;
    funccall("returnNoClearFirBits"); # must be called last
};

actionclass omi_bus_th_1_noClearFirBits
{
    omi_bus;
    threshold1;
    funccall("returnNoClearFirBits"); # must be called last
};

actionclass self_th_1_x4Root
{
    self_th_1;
    funccall("x4RootCause"); # must be called after threshold
};

# Bits using these actions are CRC-related errors that are potential
# side-effects of bits in the PAU_PHY_FIR. There is additional handling
# to determine the callout if a root cause bit is found on as well.
actionclass omi_bus_th_32perDay_CRC
{
    try ( funccall("CrcSideEffect_Ocmb"), omi_bus );
    threshold32pday;
};

################################################################################
#                           Callouts with flags                                #
################################################################################

actionclass self_th_1_UERE     { self_th_1;     SueSource; };
actionclass level2_th_1_UERE   { level2_th_1;   SueSource; };
actionclass mem_port_th_1_UERE { mem_port_th_1; SueSource; };

actionclass self_th_1_noClearFirBits_UERE
{
    SueSource;
    self_th_1_noClearFirBits; # must be called last
};

actionclass mem_port_th_1_noClearFirBits_UERE
{
    SueSource;
    mem_port_th_1_noClearFirBits; # must be called last
};

actionclass omi_bus_th_1_noClearFirBits_UERE
{
    SueSource;
    omi_bus_th_1_noClearFirBits; # must be called last
};

actionclass all_dimm_H_memport_L_th_1_UERE
{
    all_dimm_H_memport_L_th_1;
    SueSource;
};

################################################################################
#                               Default callouts                               #
################################################################################

/** Default action for an unexpected unmasked bit */
actionclass defaultMaskedError
{
    callout2ndLvlMed;
    threshold1;
};

/** Default TBD action */
actionclass TBDDefaultCallout
{
    callout2ndLvlMed;
    threshold( field(32 / day), mfg(32 / day) );
};

################################################################################
#                                 OCMB Actions                                 #
################################################################################

/** Foxhound Fatal */
actionclass foxhound_fatal_0
{
    funccall("FoxhoundFatal_0");
    self_H_omi_L_th_1;
};

actionclass foxhound_fatal_1
{
    funccall("FoxhoundFatal_1");
    self_H_omi_L_th_1;
};

actionclass foxhound_fatal_2
{
    funccall("FoxhoundFatal_2");
    self_H_omi_L_th_1;
};

actionclass foxhound_fatal_3
{
    funccall("FoxhoundFatal_3");
    self_H_omi_L_th_1;
};

actionclass foxhound_fatal_4
{
    funccall("FoxhoundFatal_4");
    self_H_omi_L_th_1;
};

actionclass foxhound_fatal_5
{
    funccall("FoxhoundFatal_5");
    self_H_omi_L_th_1;
};

actionclass foxhound_fatal_6
{
    funccall("FoxhoundFatal_6");
    self_H_omi_L_th_1;
};

actionclass foxhound_fatal_7
{
    funccall("FoxhoundFatal_7");
    self_H_omi_L_th_1;
};

/** OMI-DL Fatal Error */
actionclass dl_fatal_error_UERE
{
    SueSource;
    try( funccall("DlFatalError"), omi_bus );
    threshold1;
    funccall("returnNoClearFirBits");
};

/** MCBIST program complete */
actionclass mcbist_program_complete
{
    funccall("McbistCmdComplete");
};

/** Verify Chip Mark */
actionclass verify_chip_mark_0 { funccall("AnalyzeFetchMpe_0"); };
actionclass verify_chip_mark_1 { funccall("AnalyzeFetchMpe_1"); };
actionclass verify_chip_mark_2 { funccall("AnalyzeFetchMpe_2"); };
actionclass verify_chip_mark_3 { funccall("AnalyzeFetchMpe_3"); };
actionclass verify_chip_mark_4 { funccall("AnalyzeFetchMpe_4"); };
actionclass verify_chip_mark_5 { funccall("AnalyzeFetchMpe_5"); };
actionclass verify_chip_mark_6 { funccall("AnalyzeFetchMpe_6"); };
actionclass verify_chip_mark_7 { funccall("AnalyzeFetchMpe_7"); };

/** Mainline NCE/TCE handling */
actionclass mainline_nce_tce_handling
{
    funccall("AnalyzeFetchNceTce");
};

/** Handle Mainline AUEs/IAUEs */
actionclass mainline_aue_iaue_handling_UERE
{
    SueSource;
    funccall("AnalyzeFetchAueIaue");
    mem_port_L;
    threshold1;
    funccall("returnNoClearFirBits");
};

/** Mainline UE handling */
actionclass mainline_ue_handling
{
    threshold( field(33 / 30 min ) ); # To prevent flooding. Will be unmasked
                                      # when background scrubbing resumes after
                                      # targeted diagnostics is complete.
    funccall("AnalyzeFetchUe");
};

actionclass mainline_ue_handling_UERE
{
    SueSource;
    mainline_ue_handling;
    funccall("ClearMainlineIue");
};

/** Handle Mainline IUEs */
actionclass mainline_iue_handling
{
    # An IUE itself is not a SUE source, however, a threshold of IUEs will
    # trigger a port failure, which will generate SUEs. The port failure could
    # also crash the machine so we want to make sure this bit is flagged as an
    # SUE just in case it is needed in the checkstop analysis.
    SueSource;
    # Thresholding done in the plugin
    funccall("AnalyzeMainlineIue");
};

/**  Handle Maintenance IUEs */
actionclass maintenance_iue_handling
{
    # An IUE itself is not a SUE source, however, a threshold of IUEs will
    # trigger a port failure, which will generate SUEs. The port failure could
    # also crash the machine so we want to make sure this bit is flagged as an
    # SUE just in case it is needed in the checkstop analysis.
    SueSource;
    # Thresholding done in the plugin
    funccall("AnalyzeMaintIue");
};

actionclass memory_impe_handling
{
    funccall("AnalyzeImpe");
};

/** Handle Maintenance AUEs */
actionclass maintenance_aue_handling_UERE
{
    SueSource;
    funccall("AnalyzeMaintAue");
    mem_port_L;
    threshold1;
    funccall("returnNoClearFirBits");
};

/** Handle Maintenance IAUEs */
actionclass maintenance_iaue_handling_UERE
{
    SueSource;
    all_dimm_H_memport_L;
    threshold1;
    funccall("returnNoClearFirBits");
};

/** SRQ RCD Parity Error */
actionclass srq_rcd_parity_error
{
    # Note: RCD parity error here is not an SUE source because if an SUE does
    # get returned it would have to be because RCD recovery/retry didn't work,
    # meaning it would show up as RDFFIR[15] or SRQFIR[13]. But SRQFIR[4] on
    # it's own would not be SUE source, since it just counts any instance of
    # an RCD parity error, without knowing whether it will go away on a retry.
    all_dimm_H_memport_L;
    funccall("RcdParityError"); # Thresholding done in plugin
};

actionclass mem_port_failure_UERE
{
    all_dimm_H_memport_L_th_1;
    SueSource;
    funccall("returnNoClearFirBits");
};

# During analysis of another attention. PRD is required to manually trigger a
# channel failure. In which, cases we want to suppress this the extra log,
# unless it resulted in a system checkstop.
actionclass fwInitChnlFail_UERE
{
    try( funccall("checkIueTh"), calloutSelfMed );
    threshold_and_mask_mnfgInfo_th1;
    SueSource;
};

################################################################################
# TLX_ERR1_REPORT register
################################################################################

actionclass tlxt_recov_error
{
    analyze(gTLX_ERR1_REPORT);
    funccall("clearAndMaskTlxtRe");
};

rule rTLX_ERR1_REPORT
{
  RECOVERABLE:
    TLX_ERR1_REPORT & ~TLX_ERR1_REPORT_MASK;
};

group gTLX_ERR1_REPORT
    filter singlebit,
           cs_root_cause
{
    /** TLX_ERR1_REPORT[37]
     *  TLXT FIFO CE
     */
    (rTLX_ERR1_REPORT, bit(37)) ? self_th_32perDay;

    /** TLX_ERR1_REPORT[39]
     *  Unexpected Interrupt Response
     */
    (rTLX_ERR1_REPORT, bit(39)) ? parent_proc_th_32perDay;

    /** TLX_ERR1_REPORT[40]
     *  BDI Poisoned
     */
    (rTLX_ERR1_REPORT, bit(40)) ? self_th_1;

    /** TLX_ERR1_REPORT[41]
     *  TLXT Metadata UE
     */
    (rTLX_ERR1_REPORT, bit(41)) ? self_th_1;
};

################################################################################
# Analyze groups
################################################################################

actionclass analyzeOCMB_LFIR
{
    capture(ocmb_regs);
    funccall("CollectScratchpad");
    analyze(gOCMB_LFIR);
};

actionclass analyzeMMIOFIR
{
    capture(ocmb_regs);
    analyze(gMMIOFIR);
};

actionclass analyzeSRQFIR
{
    capture(ocmb_regs);
    analyze(gSRQFIR);
};

actionclass analyzeMCBISTFIR
{
    capture(ocmb_regs);
    analyze(gMCBISTFIR);
};

actionclass analyzeRDFFIR
{
    capture(ocmb_regs);
    analyze(gRDFFIR);
};

actionclass analyzeTLXFIR
{
    capture(ocmb_regs);
    analyze(gTLXFIR);
};

actionclass analyzeOMIDLFIR
{
    capture(ocmb_regs);
    capture(omi_ocmb_ffdc);
    funccall("CollectOmiFfdc");
    analyze(gOMIDLFIR);
};

